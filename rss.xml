<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Tchut-Tchut Blog</title><link>http://beenje.github.io/blog/</link><description>Notes to myself</description><atom:link rel="self" type="application/rss+xml" href="http://beenje.github.io/blog/rss.xml"></atom:link><language>en</language><lastBuildDate>Sat, 28 Jan 2017 22:50:05 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Docker and conda</title><link>http://beenje.github.io/blog/posts/docker-and-conda/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I just read a blog post about &lt;a class="reference external" href="http://fmgdata.kinja.com/using-docker-with-conda-environments-1790901398"&gt;Using Docker with Conda Environments&lt;/a&gt;.
I do things slightly differently so I thought I would share an example of
Dockerfile I use:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FROM continuumio/miniconda3:latest

# Install extra packages if required
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    xxxxxx \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

# Add the user that will run the app (no need to run as root)
RUN groupadd -r myuser &amp;amp;&amp;amp; useradd -r -g myuser myuser

WORKDIR /app

# Install myapp requirements
COPY environment.yml /app/environment.yml
RUN conda config --add channels conda-forge \
    &amp;amp;&amp;amp; conda env create -n myapp -f environment.yml \
    &amp;amp;&amp;amp; rm -rf /opt/conda/pkgs/*

# Install myapp
COPY . /app/
RUN chown -R myuser:myuser /app/*

# activate the myapp environment
ENV PATH /opt/conda/envs/myapp/bin:$PATH
&lt;/pre&gt;
&lt;p&gt;I don't run &lt;cite&gt;source activate myapp&lt;/cite&gt; but just use &lt;cite&gt;ENV&lt;/cite&gt; to update the &lt;cite&gt;PATH&lt;/cite&gt;
variable. There is only one environment in the docker image. No need for the extra
checks done by the activate script.&lt;/p&gt;
&lt;p&gt;With this Dockerfile, any command will be run in the &lt;cite&gt;myapp&lt;/cite&gt;
environment.&lt;/p&gt;
&lt;p&gt;Just a few additional notes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Be sure to only copy the file &lt;cite&gt;environment.yml&lt;/cite&gt; before to copy the full
current directory. Otherwise any change in the directory would
invalidate the docker cache.
We only want to re-create the conda environment if &lt;cite&gt;environment.yml&lt;/cite&gt;
changes.&lt;/li&gt;
&lt;li&gt;I always add the &lt;a class="reference external" href="https://conda-forge.github.io"&gt;conda-forge channel&lt;/a&gt;.
Check this &lt;a class="reference external" href="https://www.continuum.io/blog/developer-blog/community-conda-forge"&gt;post&lt;/a&gt;
if you haven't heard of it yet.&lt;/li&gt;
&lt;li&gt;I clean some cache (&lt;em&gt;/var/lib/apt/lists/&lt;/em&gt; and &lt;em&gt;/opt/conda/pkgs/&lt;/em&gt;) to
make the image a bit smaller.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I switched from virtualenv to &lt;a class="reference external" href="https://conda.io"&gt;conda&lt;/a&gt; a while ago and I really enjoy it.
A big thanks to &lt;a class="reference external" href="https://www.continuum.io"&gt;Continuum Analytics&lt;/a&gt;!&lt;/p&gt;&lt;/div&gt;</description><category>conda</category><category>docker</category><category>python</category><guid>http://beenje.github.io/blog/posts/docker-and-conda/</guid><pubDate>Sat, 28 Jan 2017 22:32:56 GMT</pubDate></item><item><title>Home Assistant on Turris Omnia via LXC container</title><link>http://beenje.github.io/blog/posts/home-assistant-on-turris-omnia-via-lxc-container/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;In a previous post, I described &lt;a class="reference external" href="http://beenje.github.io/blog/posts/openvpn-source-based-routing"&gt;how to install OpenVPN client on a Turris
Omnia router&lt;/a&gt;. To start or stop the
client, I was using the command line and mentioned the LuCi Web User
Interface.&lt;/p&gt;
&lt;p&gt;Both ways are not super easy and fast to access.
A while ago, I wrote a small &lt;a class="reference external" href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; web
application to change some settings in my router. The application just
allowed to click on a button to run a script via ssh on the router.&lt;/p&gt;
&lt;p&gt;So I could write a small webapp to do just that.
But I recently read about &lt;a class="reference external" href="https://home-assistant.io"&gt;Home Assistant&lt;/a&gt;. It's
an open-source home automation platform to track and control your devices
at home. There are many components available, including &lt;a class="reference external" href="https://home-assistant.io/components/switch.command_line/"&gt;Command Line
Switch&lt;/a&gt; which
looks exactly like what I need.&lt;/p&gt;
&lt;p&gt;The Raspberry Pi is a popular device to install Home Assistant.
But my &lt;a class="reference external" href="https://omnia.turris.cz/en/"&gt;Turris Omnia&lt;/a&gt; is quite powerful for a router with
1 GB of RAM and 8 GB of flash. It's time to use some of that power.&lt;/p&gt;
&lt;p&gt;From what I &lt;a class="reference external" href="https://forum.turris.cz/t/home-automation-home-assistant-upgrade/1037"&gt;read&lt;/a&gt;,
there is an openWrt package of Home Assistant.
I couldn't find it in the Turris Omnia available packages.
Anyway, there is another feature I wanted to try: &lt;a class="reference external" href="https://www.turris.cz/doc/en/howto/lxc"&gt;LXC Containers&lt;/a&gt;. Home Assistant is a Python
application, so it's easy to install in a linux container and would allow
to easily keep the version up-to-date.&lt;/p&gt;
&lt;p&gt;So let's start!&lt;/p&gt;
&lt;div class="section" id="create-a-lxc-container"&gt;
&lt;h2&gt;Create a LXC container&lt;/h2&gt;
&lt;p&gt;As described &lt;a class="reference external" href="https://www.turris.cz/doc/en/howto/lxc"&gt;here&lt;/a&gt;, you can
create a LXC container via the LuCI web interface or via the command
line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@turris:~# lxc-create -t download -n homeassistant
Setting up the GPG keyring
Downloading the image index
WARNING: Failed to download the file over HTTPs.
         The file was instead download over HTTP. A server replay attack may be possible!

 ---
 DIST  RELEASE  ARCH  VARIANT  BUILD
 ---
 Turris_OS  stable  armv7l  default  2017-01-22
 Turris_OS  stable  ppc  default  2017-01-22
 Alpine  3.4  armv7l  default  2017-01-22
 Debian  Jessie  armv7l  default  2017-01-22
 Gentoo  stable  armv7l  default  2017-01-22
 openSUSE  13.2  armv7l  default  2017-01-22
 openSUSE  42.2  armv7l  default  2017-01-22
 openSUSE  Tumbleweed  armv7l  default  2017-01-22
 Ubuntu  Xenial  armv7l  default  2017-01-22
 Ubuntu  Yakkety  armv7l  default  2017-01-22
 ---

 Distribution: Debian
 Release: Jessie
 Architecture: armv7l

 Flushing the cache...
 Downloading the image index
 Downloading the rootfs
 Downloading the metadata
 The image cache is now ready
 Unpacking the rootfs

 ---
 Distribution Debian version Jessie was just installed into your
 container.

 Content of the tarballs is provided by third party, thus there is
 no warranty of any kind.
&lt;/pre&gt;
&lt;p&gt;As you can see above, I chose a Debian Jessie distribution.&lt;/p&gt;
&lt;p&gt;Let's start and enter the container:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@turris:~# lxc-start -n homeassistant
root@turris:~# lxc-attach -n homeassistant
&lt;/pre&gt;
&lt;p&gt;Now that we are inside the container, we can first set the root password:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@LXC_NAME:~# passwd
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;LXC_NAME&lt;/em&gt; is not a super nice hostname. Let's update it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@LXC_NAME:~# hostnamectl set-hostname homeassistant
Failed to create bus connection: No such file or directory
&lt;/pre&gt;
&lt;p&gt;Ok... We have to &lt;a class="reference external" href="http://serverfault.com/questions/685837/how-to-set-the-hostname-for-a-debian-jessie-system"&gt;install dbus&lt;/a&gt;.
While we are at it, let's install vim because
we'll need it to edit the homeassistant configuration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@LXC_NAME:~# apt-get update
root@LXC_NAME:~# apt-get upgrade
root@LXC_NAME:~# apt-get install -y dbus vim
&lt;/pre&gt;
&lt;p&gt;Setting the hostname now works properly:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@LXC_NAME:~# hostnamectl set-hostname homeassistant
&lt;/pre&gt;
&lt;p&gt;We can exit and enter the container again to see the change:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@LXC_NAME:~# exit
root@turris:~# lxc-attach -n homeassistant
root@homeassistant:~#
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="install-home-assistant"&gt;
&lt;h2&gt;Install Home Assistant&lt;/h2&gt;
&lt;p&gt;Next, we just have to follow the &lt;a class="reference external" href="https://home-assistant.io/getting-started/installation-virtualenv/"&gt;Home Assistant installation instructions&lt;/a&gt;.
They are well detailed. I'll just quickly repeat them here to make it
easier to follow but you should refer to the official page for any update:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@homeassistant:~# apt-get install python-pip python3-dev
root@homeassistant:~# pip install --upgrade virtualenv
root@homeassistant:~# adduser --system homeassistant
root@homeassistant:~# mkdir /srv/homeassistant
root@homeassistant:~# chown homeassistant /srv/homeassistant
root@homeassistant:~# su -s /bin/bash homeassistant
homeassistant@homeassistant:/root$ virtualenv -p python3 /srv/homeassistant
homeassistant@homeassistant:/root$ source /srv/homeassistant/bin/activate
(homeassistant) homeassistant@homeassistant:/root$ pip3 install --upgrade homeassistant
&lt;/pre&gt;
&lt;p&gt;Just run &lt;em&gt;hass&lt;/em&gt; to start the application and create the default
configuration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(homeassistant) homeassistant@homeassistant:/root$ hass
&lt;/pre&gt;
&lt;p&gt;Press CTRL-C to exit.
Check the created configuration file:
&lt;cite&gt;/home/homeassistant/.homeassistant/configuration.yaml&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;You can comment out the &lt;cite&gt;introduction:&lt;/cite&gt; line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Show links to resources in log and frontend
#introduction:
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="add-a-switch-to-home-assistant"&gt;
&lt;h2&gt;Add a switch to Home Assistant&lt;/h2&gt;
&lt;p&gt;To start and stop our VPN we define a &lt;a class="reference external" href="https://home-assistant.io/components/switch.command_line/"&gt;Command Line Switch&lt;/a&gt; that
triggers the openvpn script on the router.
Add the following at the end of the file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
switch:
  platform: command_line
  switches:
        atv_vpn:
          command_on: 'ssh root@&amp;lt;router IP&amp;gt; "/etc/init.d/openvpn start"'
          command_off: 'ssh root@&amp;lt;router IP&amp;gt; "/etc/init.d/openvpn stop"'
          friendly_name: ATV4 VPN
&lt;/pre&gt;
&lt;p&gt;The LXC container is just like another computer (a virtual one) on the local network.
To access the router, we have to ssh to it. For this to work without
requesting a password, we have to generate a ssh key and add the public
key to the authorized_keys file on the router:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
homeassistant@homeassistant:~$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/homeassistant/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/homeassistant/.ssh/id_rsa.
Your public key has been saved in /home/homeassistant/.ssh/id_rsa.pub.
&lt;/pre&gt;
&lt;p&gt;Copy the content of &lt;cite&gt;/home/homeassistant/.ssh/id_rsa.pub&lt;/cite&gt; to
&lt;cite&gt;/root/.ssh/authorized_keys&lt;/cite&gt; (on the router not inside the container).&lt;/p&gt;
&lt;p&gt;With this configuration, the switch will always be off when you restart
Home Assistant. It won't know either if you change the state using the
command line or LuCI web interface.
This can be solved by adding the optional &lt;cite&gt;command_state&lt;/cite&gt; line. The
command shall return a result code &lt;em&gt;0&lt;/em&gt; if the switch is on.
The openvpn init script on the Turris Omnia doesn't take "status" as
argument. An easy way to check if openvpn is running is to use pgrep.
Our new configuration becomes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
switch:
  platform: command_line
  switches:
        atv_vpn:
          command_on: 'ssh root@&amp;lt;router IP&amp;gt; "/etc/init.d/openvpn start"'
          command_off: 'ssh root@&amp;lt;router IP&amp;gt; "/etc/init.d/openvpn stop"'
          command_state: 'ssh root@&amp;lt;router IP&amp;gt; "pgrep /usr/sbin/openvpn"'
          friendly_name: ATV4 VPN
&lt;/pre&gt;
&lt;p&gt;That's it. The switch state will now properly be updated
even if the VPN is started or stopped without using the application.&lt;/p&gt;
&lt;p&gt;If you go to &lt;em&gt;http://&amp;lt;container IP&amp;gt;:8123&lt;/em&gt;, you should see something like
that:&lt;/p&gt;
&lt;img alt="/images/hass_home.png" src="http://beenje.github.io/blog/images/hass_home.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="automatically-start-home-assistant"&gt;
&lt;h2&gt;Automatically start Home Assistant&lt;/h2&gt;
&lt;p&gt;Let's configure &lt;a class="reference external" href="https://home-assistant.io/getting-started/autostart-systemd/"&gt;systemd&lt;/a&gt; to automatically
start the application.
Create the file &lt;cite&gt;/etc/systemd/system/home-assistant@homeassistant.service&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@homeassistant:~# cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; /etc/systemd/system/home-assistant@homeassistant.service
[Unit]
Description=Home Assistant
After=network.target

[Service]
Type=simple
User=homeassistant
ExecStart=/srv/homeassistant/bin/hass -c "/home/homeassistant/.homeassistant"

[Install]
WantedBy=multi-user.target
EOF
&lt;/pre&gt;
&lt;p&gt;Enable and launch Home Assistant:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@homeassistant:~# systemctl --system daemon-reload
root@homeassistant:~# systemctl enable home-assistant@homeassistant
Created symlink from /etc/systemd/system/multi-user.target.wants/home-assistant@homeassistant.service to /etc/systemd/system/home-assistant@homeassistant.service.
root@homeassistant:~# systemctl start home-assistant@homeassistant
&lt;/pre&gt;
&lt;p&gt;You can check the logs with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@homeassistant:~# journalctl -f -u home-assistant@homeassistant
&lt;/pre&gt;
&lt;p&gt;We just have to make sure the container starts automatically when we
reboot the router.
Set the following in &lt;cite&gt;/etc/config/lxc-auto&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root@turris:~# cat /etc/config/lxc-auto
config container
  option name homeassistant
  option timeout 60
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="make-it-easy-to-access-home-assistant"&gt;
&lt;h2&gt;Make it easy to access Home Assistant&lt;/h2&gt;
&lt;p&gt;There is one more thing we want to do: assign a fixed IP to the container.
This can be done like for any machines on the LAN via the &lt;em&gt;DHCP and DNS&lt;/em&gt; settings in LuCI interface.
In &lt;em&gt;Static Leases&lt;/em&gt;, assign a fixed IP to the container MAC address.&lt;/p&gt;
&lt;p&gt;Now that the container has a fixed IP, go to &lt;em&gt;http://&amp;lt;container IP&amp;gt;:8123&lt;/em&gt; and
create a bookmark or add an icon to your phone and tablet home screen.
This makes it easy for anyone at home to turn the VPN on and off!&lt;/p&gt;
&lt;img alt="/images/hass_icon.png" src="http://beenje.github.io/blog/images/hass_icon.png"&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>home-assistant</category><category>LXC</category><category>OpenWrt</category><category>turris</category><category>VPN</category><guid>http://beenje.github.io/blog/posts/home-assistant-on-turris-omnia-via-lxc-container/</guid><pubDate>Thu, 26 Jan 2017 21:01:30 GMT</pubDate></item><item><title>OpenVPN source based routing</title><link>http://beenje.github.io/blog/posts/openvpn-source-based-routing/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I already spoke about installing OpenVPN on a Raspberry Pi in another blog
&lt;a class="reference external" href="http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I only connect to this VPN server to access content that requires a french IP address.
I use OpenVPN Connect App on my iPad and &lt;a class="reference external" href="https://tunnelblick.net"&gt;Tunnelblick&lt;/a&gt;
on my mac.
It works nicely but how to use this VPN on my Apple TV 4?
There is no VPN client available...&lt;/p&gt;
&lt;p&gt;End of last year I finally received my &lt;a class="reference external" href="https://omnia.turris.cz/en/"&gt;Turris Omnia&lt;/a&gt; that I supported on Indiegogo.
It's a nice router running a free operating system based on
OpenWrt with automatic updates.
If you haven't heard about it, you should check it out.&lt;/p&gt;
&lt;div class="section" id="configuring-openvpn-client-on-openwrt"&gt;
&lt;h2&gt;Configuring OpenVPN client on OpenWrt&lt;/h2&gt;
&lt;p&gt;Installing an OpenVPN client on OpenWrt is not very difficult.
Here is a quick summary.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install &lt;cite&gt;openvpn-openssl&lt;/cite&gt; package (via the
webinterface or the command line)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I already have a custom client config that I generated with Ansible in
this &lt;a class="reference external" href="http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible"&gt;post&lt;/a&gt;.
To use this config, create the file &lt;cite&gt;/etc/config/openvpn&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/config/openvpn
package openvpn

config openvpn myvpn
        # Set to 1 to enable this instance:
        option enabled 1
        # Include OpenVPN configuration
        option config /etc/openvpn/myclientconfig.ovpn
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a new interface in &lt;cite&gt;/etc/config/network&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
config interface 'myvpn'
       option proto 'none'
       option ifname 'tun0'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a new zone to &lt;cite&gt;/etc/config/firewall&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
config zone
        option forward 'REJECT'
        option output 'ACCEPT'
        option name 'VPN_FW'
        option input 'REJECT'
        option masq '1'
        option network 'myvpn'
        option mtu_fix '1'

config forwarding
        option dest 'VPN_FW'
        option src 'lan'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;An easy way to configure DNS servers is to add fixed DNS for the WAN interface of the router.
To use Google DNS, add the following two lines to the wan interface in &lt;cite&gt;/etc/config/network&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# diff -u network.save network
@@ -20,6 +20,8 @@
 config interface 'wan'
         option ifname 'eth1'
         option proto 'dhcp'
+        option peerdns '0'
+        option dns '8.8.8.8 8.8.4.4'
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you run &lt;cite&gt;/etc/init.d/openvpn start&lt;/cite&gt; with this config, you should connect successfully!
All the traffic will go via the VPN. That's nice but it's not what I want.
I only want my Apple TV traffic to go via the VPN. How to achieve that?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="source-based-routing"&gt;
&lt;h2&gt;Source based routing&lt;/h2&gt;
&lt;p&gt;I quickly found this &lt;a class="reference external" href="https://wiki.openwrt.org/doc/networking/routing"&gt;wiki page&lt;/a&gt; to implement source
based routing. Exactly what I want. What took me some time to realize is
that before to do that I had to ignore the routes pushed by the server.&lt;/p&gt;
&lt;p&gt;With my configuration, when the client connects, the server pushes some
routes among which a default route that makes all the traffic go via the
VPN:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         10.8.0.21       128.0.0.0       UG    0      0        0 tun0
...
&lt;/pre&gt;
&lt;p&gt;Ignoring the routes pushed by the server can be done with the &lt;cite&gt;--route-noexec&lt;/cite&gt; option.
I tried to add &lt;cite&gt;option route_noexec 1&lt;/cite&gt; to my &lt;cite&gt;/etc/config/openvpn&lt;/cite&gt; file
but it had no effect. It looks like that when using a custom config, you
can't add other options there. You have to set everything in the custom
config. I added &lt;cite&gt;route-noexec&lt;/cite&gt; to  my &lt;cite&gt;/etc/openvpn/myclientconfig.ovpn&lt;/cite&gt; file and it worked!
No more route added. No traffic sent via the VPN.&lt;/p&gt;
&lt;p&gt;We can now apply the changes described in the &lt;a class="reference external" href="https://wiki.openwrt.org/doc/networking/routing"&gt;Routing wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the &lt;cite&gt;ip&lt;/cite&gt; package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the &lt;cite&gt;10 vpn&lt;/cite&gt; line to &lt;cite&gt;/etc/iproute2/rt_tables&lt;/cite&gt; so that it looks like
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/iproute2/rt_tables
#
# reserved values
#
255  local
254  main
253  default
10   vpn
0    unspec
#
# local
#
#1  inr.ruhep
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We now need to add a new rule and route when starting the client.
We can do so using the openvpn &lt;cite&gt;up&lt;/cite&gt; command. Create the &lt;cite&gt;/etc/openvpn/upvpn&lt;/cite&gt; script:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/openvpn/upvpn
#!/bin/sh

client=192.168.75.20

tun_dev=$1
tun_mtu=$2
link_mtu=$3
ifconfig_local_ip=$4
ifconfig_remote_ip=$5

echo "Routing client $client traffic through VPN"
ip rule add from $client priority 10 table vpn
ip route add $client dev $tun_dev table vpn
ip route add default via $ifconfig_remote_ip dev $tun_dev table vpn
ip route flush cache
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create the &lt;cite&gt;/etc/openvpn/downvpn&lt;/cite&gt; script to properly remove the rule and route:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/openvpn/downvpn
#!/bin/sh

client=192.168.75.20

tun_dev=$1
tun_mtu=$2
link_mtu=$3
ifconfig_local_ip=$4
ifconfig_remote_ip=$5

echo "Delete client $client traffic routing through VPN"
ip rule del from $client priority 10 table vpn
ip route del $client dev $tun_dev table vpn
ip route del default via $ifconfig_remote_ip dev $tun_dev table vpn
ip route flush cache
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We now have to add those scripts to the client config.
Here is everything I added to my &lt;cite&gt;/etc/openvpn/myclientconfig.ovpn&lt;/cite&gt; file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Don't add or remove routes automatically
# Source based routing for specific client added in up script
route-noexec
# script-security 2 needed to run up and down scripts
script-security 2
# Script to run after successful TUN/TAP device open
up /etc/openvpn/upvpn
# Call down script before to close TUN to properly remove the routing
down-pre
down /etc/openvpn/downvpn
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice that the machine IP address that we want to route via the VPN is
hard-coded in the the upvpn and downvpn scripts.
This IP shall be fixed. You can easily do that by associating it to
the required MAC address in the DHCP settings.&lt;/p&gt;
&lt;p&gt;The tunnel remote IP is automatically passed in parameter to the up and
down scripts by openvpn.&lt;/p&gt;
&lt;p&gt;If we run &lt;cite&gt;/etc/init.d/openvpn start&lt;/cite&gt; with this config, only the traffic
from the 192.168.75.20 IP address will go via the VPN!&lt;/p&gt;
&lt;p&gt;Run &lt;cite&gt;/etc/init.d/openvpn stop&lt;/cite&gt; to close the tunnel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a nice way to route traffic through a VPN based on the source IP
address.&lt;/p&gt;
&lt;p&gt;You can of course use the router webinterface to stop and start openvpn.
In &lt;a class="reference external" href="http://beenje.github.io/blog/posts/home-assistant-on-turris-omnia-via-lxc-container"&gt;another post&lt;/a&gt;,
I'll talk about an even more user friendly way to control it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>AppleTV</category><category>OpenWrt</category><category>pi</category><category>VPN</category><guid>http://beenje.github.io/blog/posts/openvpn-source-based-routing/</guid><pubDate>Fri, 20 Jan 2017 20:46:16 GMT</pubDate></item><item><title>Parsing and indexing PDF in Python</title><link>http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I have a &lt;a href="http://www.getdoxie.com"&gt;Doxie Go&lt;/a&gt; scanner and I scan all the documents I receive in paper.
That's nice, but it creates another problem. All the resulting PDF files have to be named, organized and stored...
Doing that manually is boring and time consuming. Of course that's something I want to automate!&lt;/p&gt;
&lt;p&gt;I even bought &lt;a href="https://www.noodlesoft.com"&gt;Hazel&lt;/a&gt; a while ago.
It's a nice software that monitors files in a folder and performs specific instructions based on the rules you defined.
It works well but I felt a bit limited and I thought I could probably write something more tailored to my use case.
And that would be more fun :-)&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Parsing-PDF-in-Python"&gt;Parsing PDF in Python&lt;a class="anchor-link" href="http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/#Parsing-PDF-in-Python"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A quick solution I found was to run &lt;a href="https://linux.die.net/man/1/pdftotext"&gt;pdftotext&lt;/a&gt; using subprocess.
I looked at &lt;a href="https://euske.github.io/pdfminer/"&gt;PDFMiner&lt;/a&gt;, a pure Python PDF parser but I found pdftotext
output to be more accurate.
On MacOS, you can install it using &lt;a href="http://brew.sh"&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install Caskroom/cask/pdftotext&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a simple Python function to do that:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_pdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"pdftotext"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-enc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'UTF-8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CalledProcessError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Skipping &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; (pdftotext returned status &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;)'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's try to parse a pdf file. We'll use &lt;code&gt;requests&lt;/code&gt; to download a sample file.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://www.cbu.edu.zm/downloads/pdf-sample.pdf'&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/tmp/pdf-sample.pdf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's first look at the PDF:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IFrame&lt;/span&gt;
&lt;span class="n"&gt;IFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://www.cbu.edu.zm/downloads/pdf-sample.pdf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;870&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[3]:&lt;/div&gt;

&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;

        &lt;iframe width="600" height="870" src="http://www.cbu.edu.zm/downloads/pdf-sample.pdf" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
        
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Nothing complex. It should be easy to parse.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_pdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/tmp/pdf-sample.pdf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[4]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;"Adobe Acrobat PDF Files\nAdobe® Portable Document Format (PDF) is a universal file format that preserves all of the fonts, formatting, colours and graphics of any source document, regardless of the application and platform used to create it. Adobe PDF is an ideal format for electronic document distribution as it overcomes the problems commonly encountered with electronic file sharing. • Anyone, anywhere can open a PDF file. All you need is the free Adobe Acrobat Reader. Recipients of other file formats sometimes can't open files because they don't have the applications used to create the documents. PDF files always print correctly on any printing device. PDF files always display exactly as created, regardless of fonts, software, and operating systems. Fonts, and graphics are not lost due to platform, software, and version incompatibilities. The free Acrobat Reader is easy to download and can be freely distributed by anyone. Compact PDF files are smaller than their source files and download a page at a time for fast display on the Web.\n\n• •\n\n• •\n\n\x0c"&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This works quite well. The layout is not respected but it's the text that matters. It would be easy to define some regex to define rules based on the PDF content.&lt;/p&gt;
&lt;p&gt;This could be the first step in naming and organizing the scanned documents.
But it would be nice to have an interface to easily search in all the files.
I've already used MongoDB full text search in a webapp I wrote and it worked well for my use case.
But I read about Elasticsearch and I always wanted to give it a try.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Elasticsearch-Ingest-Attachment-Processor-Plugin"&gt;Elasticsearch Ingest Attachment Processor Plugin&lt;a class="anchor-link" href="http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/#Elasticsearch-Ingest-Attachment-Processor-Plugin"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I could just index the result from pdftotext, but I know there is a plugin that can parse PDF files.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/elastic/elasticsearch-mapper-attachments#mapper-attachments-type-for-elasticsearch&amp;gt;"&gt;Mapper Attachments Type plugin&lt;/a&gt;
is &lt;a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/mapper-attachments.html&amp;gt;"&gt;deprecated&lt;/a&gt;
in 5.0.0. It has been replaced with the &lt;a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest-attachment.html"&gt;ingest-attachment&lt;/a&gt;
plugin.
So let's look at that.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Running-Elasticsearch"&gt;Running Elasticsearch&lt;a class="anchor-link" href="http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/#Running-Elasticsearch"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To run Elasticsearch, the easiest is to use Docker.
As the official image from &lt;a href="https://hub.docker.com/_/elasticsearch/"&gt;Docker Hub&lt;/a&gt; comes with no plugin, we'll
create our own image.
See &lt;a href="https://www.elastic.co/blog/elasticsearch-docker-plugin-management"&gt;Elasticsearch Plugin Management with Docker&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;p&gt;Here is our &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM elasticsearch:5

RUN /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-attachment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the &lt;code&gt;elasticsearch-ingest&lt;/code&gt; docker image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker build -t elasticsearch-ingest .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now run elasticsearch with the ingest-attachment plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d -p 9200:9200 elasticsearch-ingest&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Python-Elasticsearch-Client"&gt;Python Elasticsearch Client&lt;a class="anchor-link" href="http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/#Python-Elasticsearch-Client"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We'll use &lt;a href="https://elasticsearch-py.readthedocs.io/en/master/"&gt;elasticsearch-py&lt;/a&gt;
to interact with our Elasticsearch cluster.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's first check that our elasticsearch cluster is alive by asking about its health:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;health&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[6]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;'1479333419 21:56:59 elasticsearch green 1 1 0 0 0 0 0 0 - 100.0%\n'&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Nice! We can start playing with our ES cluster.&lt;/p&gt;
&lt;p&gt;As described in the &lt;a href="https://www.elastic.co/guide/en/elasticsearch/plugins/master/using-ingest-attachment.html"&gt;documentation&lt;/a&gt;, we first have to create a pipeline to use the Ingest Attachment Processor Plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT _ingest/pipeline/attachment
{
  "description" : "Extract attachment information",
  "processors" : [
    {
      "attachment" : {
        "field" : "data"
      }
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, how do we do that using the Python client?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"description"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Extract attachment information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"processors"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"attachment"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"field"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"data"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'_ingest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'pipeline'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'attachment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'acknowledged': True}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now, we can send a document to our pipeline. Let's start by using the same example as in the documentation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT my_index/my_type/my_id?pipeline=attachment
{
  "data": "e1xydGYxXGFuc2kNCkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0DQpccGFyIH0="
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using Python client, this gives:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_type'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'attachment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"e1xydGYxXGFuc2kNCkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0DQpccGFyIH0="&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;result1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[8]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'_id': 'AVhvJKzVIvjFWZACJU_t',
 '_index': 'my_index',
 '_shards': {'failed': 0, 'successful': 1, 'total': 2},
 '_type': 'my_type',
 '_version': 1,
 'created': True,
 'result': 'created'}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's try to get the created document based on its id:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_type'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'_id'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[9]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'_id': 'AVhvJKzVIvjFWZACJU_t',
 '_index': 'my_index',
 '_source': {'attachment': {'content': 'Lorem ipsum dolor sit amet',
   'content_length': 28,
   'content_type': 'application/rtf',
   'language': 'ro'},
  'data': 'e1xydGYxXGFuc2kNCkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0DQpccGFyIH0='},
 '_type': 'my_type',
 '_version': 1,
 'found': True}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We can see that the binary data passed to the pipeline was a Rich Text Format file and that the content was extracted: &lt;em&gt;Lorem ipsum dolor sit amet&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Displaying the binary data is not very useful. It doesn't matter in this example as it's quite small.
But it would be much bigger even on small files. We can exclude it using &lt;code&gt;_source_exclude&lt;/code&gt;:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_type'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'_id'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;_source_exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[10]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'_id': 'AVhvJKzVIvjFWZACJU_t',
 '_index': 'my_index',
 '_source': {'attachment': {'content': 'Lorem ipsum dolor sit amet',
   'content_length': 28,
   'content_type': 'application/rtf',
   'language': 'ro'}},
 '_type': 'my_type',
 '_version': 1,
 'found': True}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Indexing-PDF-files"&gt;Indexing PDF files&lt;a class="anchor-link" href="http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/#Indexing-PDF-files"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let's try to parse the same sample pdf as before.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://www.cbu.edu.zm/downloads/pdf-sample.pdf'&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Note that we have to encode the content of the pdf before to pass it to ES.
The source field must be a base64 encoded binary.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ascii'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_type'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'attachment'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;result2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[13]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'_id': 'AVhvJMC6IvjFWZACJU_u',
 '_index': 'my_index',
 '_shards': {'failed': 0, 'successful': 1, 'total': 2},
 '_type': 'my_type',
 '_version': 1,
 'created': True,
 'result': 'created'}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We can get the document based on its id:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_type'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'_id'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;_source_exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[14]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'_id': 'AVhvJMC6IvjFWZACJU_u',
 '_index': 'my_index',
 '_source': {'attachment': {'author': 'cdaily',
   'content': "Adobe Acrobat PDF Files\n\nAdobe® Portable Document Format (PDF) is a universal file format that preserves all\nof the fonts, formatting, colours and graphics of any source document, regardless of\nthe application and platform used to create it.\n\nAdobe PDF is an ideal format for electronic document distribution as it overcomes the\nproblems commonly encountered with electronic file sharing.\n\n•  Anyone, anywhere can open a PDF file. All you need is the free Adobe Acrobat\nReader. Recipients of other file formats sometimes can't open files because they\ndon't have the applications used to create the documents.\n\n•  PDF files always print correctly on any printing device.\n\n•  PDF files always display exactly as created, regardless of fonts, software, and\noperating systems. Fonts, and graphics are not lost due to platform, software, and\nversion incompatibilities.\n\n•  The free Acrobat Reader is easy to download and can be freely distributed by\nanyone.\n\n•  Compact PDF files are smaller than their source files and download a\npage at a time for fast display on the Web.",
   'content_length': 1073,
   'content_type': 'application/pdf',
   'date': '2000-06-28T23:21:08Z',
   'language': 'en',
   'title': 'This is a test PDF file'}},
 '_type': 'my_type',
 '_version': 1,
 'found': True}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Or with a basic search:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_type'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Adobe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_source_exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[15]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'_shards': {'failed': 0, 'successful': 5, 'total': 5},
 'hits': {'hits': [{'_id': 'AVhvJMC6IvjFWZACJU_u',
    '_index': 'my_index',
    '_score': 0.45930308,
    '_source': {'attachment': {'author': 'cdaily',
      'content': "Adobe Acrobat PDF Files\n\nAdobe® Portable Document Format (PDF) is a universal file format that preserves all\nof the fonts, formatting, colours and graphics of any source document, regardless of\nthe application and platform used to create it.\n\nAdobe PDF is an ideal format for electronic document distribution as it overcomes the\nproblems commonly encountered with electronic file sharing.\n\n•  Anyone, anywhere can open a PDF file. All you need is the free Adobe Acrobat\nReader. Recipients of other file formats sometimes can't open files because they\ndon't have the applications used to create the documents.\n\n•  PDF files always print correctly on any printing device.\n\n•  PDF files always display exactly as created, regardless of fonts, software, and\noperating systems. Fonts, and graphics are not lost due to platform, software, and\nversion incompatibilities.\n\n•  The free Acrobat Reader is easy to download and can be freely distributed by\nanyone.\n\n•  Compact PDF files are smaller than their source files and download a\npage at a time for fast display on the Web.",
      'content_length': 1073,
      'content_type': 'application/pdf',
      'date': '2000-06-28T23:21:08Z',
      'language': 'en',
      'title': 'This is a test PDF file'}},
    '_type': 'my_type'}],
  'max_score': 0.45930308,
  'total': 1},
 'timed_out': False,
 'took': 75}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Of course Elasticsearch allows much more complex queries. But that's something for another time.&lt;/p&gt;
&lt;p&gt;One interesting thing is that by printing the content, we can see that even the layout is quite acurate! Much better than the pdftotext output:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'_source'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'attachment'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Adobe Acrobat PDF Files

Adobe® Portable Document Format (PDF) is a universal file format that preserves all
of the fonts, formatting, colours and graphics of any source document, regardless of
the application and platform used to create it.

Adobe PDF is an ideal format for electronic document distribution as it overcomes the
problems commonly encountered with electronic file sharing.

•  Anyone, anywhere can open a PDF file. All you need is the free Adobe Acrobat
Reader. Recipients of other file formats sometimes can't open files because they
don't have the applications used to create the documents.

•  PDF files always print correctly on any printing device.

•  PDF files always display exactly as created, regardless of fonts, software, and
operating systems. Fonts, and graphics are not lost due to platform, software, and
version incompatibilities.

•  The free Acrobat Reader is easy to download and can be freely distributed by
anyone.

•  Compact PDF files are smaller than their source files and download a
page at a time for fast display on the Web.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The ingest-attachment plugin uses the Apache text extraction library &lt;a href="http://tika.apache.org"&gt;Tika&lt;/a&gt;.
It's really powerful. It detects and extracts metadata and text from many file types.&lt;/p&gt;
&lt;p&gt;Sending the file directly to Elasticsearch is nice, but in my use case, I'd like to process the file (change its title, move it to a specific location...) based on its content. I could of course update the document in ES after processing it.&lt;/p&gt;
&lt;p&gt;It might be better in some case to decorelate the parsing and processing from the indexing.
So let's check how to use Tika from Python.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Apache-Tika"&gt;Apache Tika&lt;a class="anchor-link" href="http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/#Apache-Tika"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/chrismattmann/tika-python"&gt;Tika-Python&lt;/a&gt; makes Apache Tika available as a Python library.
It can even starts a Tika REST server in the background, but this requires Java 7+ to be installed.
I prefer to run the server myself using the prebuilt docker image: &lt;a href="http://logicalspark.github.io/docker-tikaserver/"&gt;docker-tikaserver&lt;/a&gt;.
Like that I have control of what is running.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -p 9998:9998 logicalspark/docker-tikaserver&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then set Tika-Python to use Client mode only:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tika&lt;/span&gt;
&lt;span class="n"&gt;tika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TikaClientOnly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tika&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/tmp/pdf-sample.pdf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:9998/tika'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stderr output_text"&gt;
&lt;pre&gt;2016-11-16 22:57:14,233 [MainThread  ] [INFO ]  Starting new HTTP connection (1): localhost
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[19]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'content': "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is a test PDF file\n\n\nAdobe Acrobat PDF Files\n\nAdobe® Portable Document Format (PDF) is a universal file format that preserves all\nof the fonts, formatting, colours and graphics of any source document, regardless of\nthe application and platform used to create it.\n\nAdobe PDF is an ideal format for electronic document distribution as it overcomes the\nproblems commonly encountered with electronic file sharing.\n\n•  Anyone, anywhere can open a PDF file. All you need is the free Adobe Acrobat\nReader. Recipients of other file formats sometimes can't open files because they\ndon't have the applications used to create the documents.\n\n•  PDF files always print correctly on any printing device.\n\n•  PDF files always display exactly as created, regardless of fonts, software, and\noperating systems. Fonts, and graphics are not lost due to platform, software, and\nversion incompatibilities.\n\n•  The free Acrobat Reader is easy to download and can be freely distributed by\nanyone.\n\n•  Compact PDF files are smaller than their source files and download a\npage at a time for fast display on the Web.\n\n\n",
 'metadata': {'Author': 'cdaily',
  'Content-Type': 'application/pdf',
  'Creation-Date': '2000-06-28T23:21:08Z',
  'Last-Modified': '2013-10-28T19:24:13Z',
  'Last-Save-Date': '2013-10-28T19:24:13Z',
  'X-Parsed-By': ['org.apache.tika.parser.DefaultParser',
   'org.apache.tika.parser.pdf.PDFParser'],
  'X-TIKA:parse_time_millis': '62',
  'access_permission:assemble_document': 'true',
  'access_permission:can_modify': 'true',
  'access_permission:can_print': 'true',
  'access_permission:can_print_degraded': 'true',
  'access_permission:extract_content': 'true',
  'access_permission:extract_for_accessibility': 'true',
  'access_permission:fill_in_form': 'true',
  'access_permission:modify_annotations': 'true',
  'created': 'Wed Jun 28 23:21:08 UTC 2000',
  'creator': 'cdaily',
  'date': '2013-10-28T19:24:13Z',
  'dc:creator': 'cdaily',
  'dc:format': 'application/pdf; version=1.3',
  'dc:title': 'This is a test PDF file',
  'dcterms:created': '2000-06-28T23:21:08Z',
  'dcterms:modified': '2013-10-28T19:24:13Z',
  'meta:author': 'cdaily',
  'meta:creation-date': '2000-06-28T23:21:08Z',
  'meta:save-date': '2013-10-28T19:24:13Z',
  'modified': '2013-10-28T19:24:13Z',
  'pdf:PDFVersion': '1.3',
  'pdf:docinfo:created': '2000-06-28T23:21:08Z',
  'pdf:docinfo:creator': 'cdaily',
  'pdf:docinfo:creator_tool': 'Microsoft Word 8.0',
  'pdf:docinfo:modified': '2013-10-28T19:24:13Z',
  'pdf:docinfo:producer': 'Acrobat Distiller 4.0 for Windows',
  'pdf:docinfo:title': 'This is a test PDF file',
  'pdf:encrypted': 'false',
  'producer': 'Acrobat Distiller 4.0 for Windows',
  'resourceName': 'pdf-sample.pdf',
  'title': 'This is a test PDF file',
  'xmp:CreatorTool': 'Microsoft Word 8.0',
  'xmpMM:DocumentID': 'uuid:0805e221-80a8-459e-a522-635ed5c1e2e6',
  'xmpTPg:NPages': '1'}}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [20]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;This is a test PDF file


Adobe Acrobat PDF Files

Adobe® Portable Document Format (PDF) is a universal file format that preserves all
of the fonts, formatting, colours and graphics of any source document, regardless of
the application and platform used to create it.

Adobe PDF is an ideal format for electronic document distribution as it overcomes the
problems commonly encountered with electronic file sharing.

•  Anyone, anywhere can open a PDF file. All you need is the free Adobe Acrobat
Reader. Recipients of other file formats sometimes can't open files because they
don't have the applications used to create the documents.

•  PDF files always print correctly on any printing device.

•  PDF files always display exactly as created, regardless of fonts, software, and
operating systems. Fonts, and graphics are not lost due to platform, software, and
version incompatibilities.

•  The free Acrobat Reader is easy to download and can be freely distributed by
anyone.

•  Compact PDF files are smaller than their source files and download a
page at a time for fast display on the Web.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Not sure why we get the title of the PDF inside the content.
Anyway the text is extracted properly and we even get a lot of metadata:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [21]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'metadata'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[21]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;{'Author': 'cdaily',
 'Content-Type': 'application/pdf',
 'Creation-Date': '2000-06-28T23:21:08Z',
 'Last-Modified': '2013-10-28T19:24:13Z',
 'Last-Save-Date': '2013-10-28T19:24:13Z',
 'X-Parsed-By': ['org.apache.tika.parser.DefaultParser',
  'org.apache.tika.parser.pdf.PDFParser'],
 'X-TIKA:parse_time_millis': '62',
 'access_permission:assemble_document': 'true',
 'access_permission:can_modify': 'true',
 'access_permission:can_print': 'true',
 'access_permission:can_print_degraded': 'true',
 'access_permission:extract_content': 'true',
 'access_permission:extract_for_accessibility': 'true',
 'access_permission:fill_in_form': 'true',
 'access_permission:modify_annotations': 'true',
 'created': 'Wed Jun 28 23:21:08 UTC 2000',
 'creator': 'cdaily',
 'date': '2013-10-28T19:24:13Z',
 'dc:creator': 'cdaily',
 'dc:format': 'application/pdf; version=1.3',
 'dc:title': 'This is a test PDF file',
 'dcterms:created': '2000-06-28T23:21:08Z',
 'dcterms:modified': '2013-10-28T19:24:13Z',
 'meta:author': 'cdaily',
 'meta:creation-date': '2000-06-28T23:21:08Z',
 'meta:save-date': '2013-10-28T19:24:13Z',
 'modified': '2013-10-28T19:24:13Z',
 'pdf:PDFVersion': '1.3',
 'pdf:docinfo:created': '2000-06-28T23:21:08Z',
 'pdf:docinfo:creator': 'cdaily',
 'pdf:docinfo:creator_tool': 'Microsoft Word 8.0',
 'pdf:docinfo:modified': '2013-10-28T19:24:13Z',
 'pdf:docinfo:producer': 'Acrobat Distiller 4.0 for Windows',
 'pdf:docinfo:title': 'This is a test PDF file',
 'pdf:encrypted': 'false',
 'producer': 'Acrobat Distiller 4.0 for Windows',
 'resourceName': 'pdf-sample.pdf',
 'title': 'This is a test PDF file',
 'xmp:CreatorTool': 'Microsoft Word 8.0',
 'xmpMM:DocumentID': 'uuid:0805e221-80a8-459e-a522-635ed5c1e2e6',
 'xmpTPg:NPages': '1'}&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Conclusion"&gt;Conclusion&lt;a class="anchor-link" href="http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/#Conclusion"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We saw different methods to extract text from PDF in Python.
Depending on what you want to do, one might suit you better. And this was of course not exhaustive.&lt;/p&gt;
&lt;p&gt;If you want to index PDFs, Elasticsearch might be all you need.
The ingest-attachment plugin uses &lt;a href="http://tika.apache.org"&gt;Apache Tika&lt;/a&gt; which is very powerful.&lt;/p&gt;
&lt;p&gt;And thanks to &lt;a href="https://github.com/chrismattmann/tika-python"&gt;Tika-Python&lt;/a&gt;, it's very easy to use Tika directly from Python.
You can let the library starts the server or use Docker to start your own.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>elasticsearch</category><category>python</category><category>tika</category><guid>http://beenje.github.io/blog/posts/parsing-and-indexing-pdf-in-python/</guid><pubDate>Wed, 16 Nov 2016 20:59:23 GMT</pubDate></item><item><title>GitLab Container Registry and proxy</title><link>http://beenje.github.io/blog/posts/gitlab-container-registry-and-proxy/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;div class="section" id="gitlab-on-synology"&gt;
&lt;h2&gt;GitLab on Synology&lt;/h2&gt;
&lt;p&gt;I installed GitLab CE on a Synology RackStation RS815+ at work.
It has an Intel Atom C2538 that allows to run &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt; on the NAS.&lt;/p&gt;
&lt;p&gt;Official GitLab Community Edition docker images are available on &lt;a class="reference external" href="https://hub.docker.com/r/gitlab/gitlab-ce/"&gt;Docker Hub&lt;/a&gt;.
The documentation to use the image is quite clear and can be found &lt;a class="reference external" href="https://docs.gitlab.com/omnibus/docker/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The ports 80 and 443 are already used by nginx that comes with &lt;a class="reference external" href="https://www.synology.com/en-global/dsm/6.0"&gt;DSM&lt;/a&gt;.
I wanted to access GitLab using HTTPS, so I disabled port 443 in nginx
configuration. To do that I had to modify the template
&lt;cite&gt;/usr/syno/share/nginx/WWWService.mustache&lt;/cite&gt; and reboot the NAS:&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-1"&gt;&lt;/a&gt;&lt;span class="gd"&gt;--- WWWService.mustache.org 2016-08-16 23:25:06.000000000 +0100&lt;/span&gt;
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-2"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+++ WWWService.mustache 2016-09-19 13:53:45.256735700 +0100&lt;/span&gt;
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-3"&gt;&lt;/a&gt;&lt;span class="gu"&gt;@@ -1,8 +1,6 @@&lt;/span&gt;
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-4"&gt;&lt;/a&gt; server {
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-5"&gt;&lt;/a&gt;     listen 80 default_server{{#reuseport}} reuseport{{/reuseport}};
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-6"&gt;&lt;/a&gt;     listen [::]:80 default_server{{#reuseport}} reuseport{{/reuseport}};
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-7"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-    listen 443 default_server ssl{{#reuseport}} reuseport{{/reuseport}};&lt;/span&gt;
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-8"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-    listen [::]:443 default_server ssl{{#reuseport}} reuseport{{/reuseport}};&lt;/span&gt;
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_cff8ddd8ef394a489bfa0ff9a3761efd-10"&gt;&lt;/a&gt;     server_name _;
&lt;/pre&gt;&lt;p&gt;The port 22 is also already used by the ssh daemon so I decided to use
the port 2222. I created the directory &lt;cite&gt;/volume1/docker/gitlab&lt;/cite&gt; to store
all GitLab data. Here are the required variables in the
&lt;cite&gt;/volume1/docker/gitlab/config/gitlab.rb&lt;/cite&gt; config file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
external_url "https://mygitlab.example.com"

## GitLab Shell settings for GitLab
gitlab_rails['gitlab_shell_ssh_port'] = 2222

nginx['enable'] = true
nginx['redirect_http_to_https'] = true
&lt;/pre&gt;
&lt;p&gt;And this is how I run the image:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
docker run --detach \
    --hostname mygitlab.example.com \
    --publish 443:443 --publish 8080:80 --publish 2222:22 \
    --name gitlab \
    --restart always \
    --volume /volume1/docker/gitlab/config:/etc/gitlab \
    --volume /volume1/docker/gitlab/logs:/var/log/gitlab \
    --volume /volume1/docker/gitlab/data:/var/opt/gitlab \
    gitlab/gitlab-ce:latest
&lt;/pre&gt;
&lt;p&gt;This has been working fine. Since I heard about &lt;a class="reference external" href="https://about.gitlab.com/2016/05/23/gitlab-container-registry/"&gt;GitLab Container Registry&lt;/a&gt;,
I've been wanted to give it a try.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;GitLab Container Registry&lt;/h2&gt;
&lt;p&gt;To enable it, I just added to my &lt;cite&gt;gitlab.rb&lt;/cite&gt; file the registry url:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
registry_external_url 'https://mygitlab.example.com:4567'
&lt;/pre&gt;
&lt;p&gt;I use the existing GitLab domain and use the port 4567 for the registry.
The TLS certificate and key are in the default path, so no need to specify them.&lt;/p&gt;
&lt;p&gt;So let's restart GitLab. Don't forget to publish the new port 4567!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ docker stop gitlab
$ docker rm gitlab
$ docker run --detach \
    --hostname mygitlab.example.com \
    --publish 443:443 --publish 8080:80 --publish 2222:22 \
    --publish 4567:4567 \
    --name gitlab \
    --restart always \
    --volume /volume1/docker/gitlab/config:/etc/gitlab \
    --volume /volume1/docker/gitlab/logs:/var/log/gitlab \
    --volume /volume1/docker/gitlab/data:/var/opt/gitlab \
    gitlab/gitlab-ce:latest
&lt;/pre&gt;
&lt;p&gt;Easy! Let's test our new docker registry!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ docker login mygitlab.example.com:4567
Username: user
Password:
Error response from daemon: Get https://mygitlab.example.com:4567/v1/users/: Service Unavailable
&lt;/pre&gt;
&lt;p&gt;Hmm... Not super useful error...
I thought about publishing port 4567 in docker, so what is happening?
After looking through the logs, I found &lt;cite&gt;/volume1/docker/gitlab/logs/nginx/gitlab_registry_access.logi&lt;/cite&gt;. It's empty...
Let's try curl:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl https://mygitlab.example.com:4567/v1/users/

curl: (60) Peer certificate cannot be authenticated with known CA certificates
More details here: http://curl.haxx.se/docs/sslcerts.html

curl performs SSL certificate verification by default, using a "bundle"
 of Certificate Authority (CA) public keys (CA certs). If the default
 bundle file isn't adequate, you can specify an alternate file
 using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
 the bundle, the certificate verification probably failed due to a
 problem with the certificate (it might be expired, or the name might
 not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
 the -k (or --insecure) option.
&lt;/pre&gt;
&lt;p&gt;OK, I have a self-signed certificate. So let's try with &lt;cite&gt;--insecure&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl --insecure https://mygitlab.example.com:4567/v1/users/
404 page not found
&lt;/pre&gt;
&lt;p&gt;At least I get an entry in my log file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd /volume1/docker/gitlab
$ cat logs/nginx/gitlab_registry_access.log
xxx.xx.x.x - - [21/Sep/2016:14:24:57 +0000] "GET /v1/users/ HTTP/1.1" 404 19 "-" "curl/7.43.0"
&lt;/pre&gt;
&lt;p&gt;So, docker and nginx seem to be configured properly...
It looks like &lt;cite&gt;docker login&lt;/cite&gt; is not even trying to access my host...&lt;/p&gt;
&lt;p&gt;Let's try with a dummy host:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ docker login foo
Username: user
Password:
Error response from daemon: Get https://mygitlab.example.com:4567/v1/users/: Service Unavailable
&lt;/pre&gt;
&lt;p&gt;Same error!
Why is that? I can ping &lt;cite&gt;mygitlab.example.com&lt;/cite&gt; and even access nginx on port 4567 (using curl)
inside the docker container...
My machine is on the same network. It can't be a proxy problem. Wait. Proxy?&lt;/p&gt;
&lt;p&gt;That's when I remembered I had configured my docker daemon to use a proxy to access the internet!
I created the file &lt;cite&gt;/etc/systemd/system/docker.service.d/http-proxy.conf&lt;/cite&gt; with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Service]
Environment="HTTP_PROXY=http://proxy.example.com:8080/"
&lt;/pre&gt;
&lt;p&gt;Reading the &lt;a class="reference external" href="https://docs.docker.com/engine/admin/systemd/"&gt;docker documentation&lt;/a&gt;, it's very clear:
&lt;strong&gt;If you have internal Docker registries that you need to contact without proxying you can specify them via the NO_PROXY environment variable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's add the NO_PROXY variable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Service]
Environment="HTTP_PROXY=http://proxy.example.com:8080/" "NO_PROXY=localhost,127.0.0.1,mygitlab.example.com"
&lt;/pre&gt;
&lt;p&gt;Flush the changes and restart the docker daemon:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo systemctl daemon-reload
$ sudo systemctl restart docker
&lt;/pre&gt;
&lt;p&gt;Now let's try to login again:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ docker login mygitlab.example.com:4567
Username: user
Password:
Error response from daemon: Get https://mygitlab.example.com:4567/v1/users/: x509: certificate signed by unknown authority
&lt;/pre&gt;
&lt;p&gt;This error is easy to fix (after googling). I have to add the self-signed certificate at the OS level.
On my Ubuntu machine:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo cp mygitlab.example.com.crt /usr/local/share/ca-certificates/
$ sudo update-ca-certificates
$ sudo systemctl restart docker

$ docker login mygitlab.example.com:4567
Username: user
Password:
Login Succeeded
&lt;/pre&gt;
&lt;p&gt;Yes! :-)&lt;/p&gt;
&lt;p&gt;I can now push docker images to my GitLab Container Registry!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Setting GitLab Container Registry should have been easy but my proxy
settings made me lost quite some time... The proxy environment variables (HTTP_PROXY, NO_PROXY...)
are not taken into account by the docker commands. The docker daemon has to be configured
specifically. Something to remember!&lt;/p&gt;
&lt;p&gt;Note that this was with docker 1.11.2. When trying the same command on my Mac with docker 1.12.1, I got a nicer error message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ docker --version
Docker version 1.12.1, build 6f9534c
$ docker login foo
Username: user
Password:
Error response from daemon: Get https://foo/v1/users/: dial tcp: lookup foo on xxx.xxx.xx.x:53: no such host
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>ci</category><category>docker</category><category>git</category><category>gitlab</category><category>synology</category><guid>http://beenje.github.io/blog/posts/gitlab-container-registry-and-proxy/</guid><pubDate>Wed, 21 Sep 2016 20:10:06 GMT</pubDate></item><item><title>Running background tasks with Flask and RQ</title><link>http://beenje.github.io/blog/posts/running-background-tasks-with-flask-and-rq/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I wrote several webapps but it took me a while to understand how to run a
long task and get the result back (without blocking the server).
Of course, you should use a task queue like &lt;a class="reference external" href="http://www.celeryproject.org"&gt;Celery&lt;/a&gt; or &lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt;.
It's easy to find examples how to send a task to a queue and... forget
about it. But how do you get the result?&lt;/p&gt;
&lt;p&gt;I found a great blog post from Miguel Grinberg:
&lt;a class="reference external" href="http://blog.miguelgrinberg.com/post/using-celery-with-flask"&gt;Using Celery With Flask&lt;/a&gt;.
It explains how to use ajax to poll the server for status updates.
And I finally got it!
As Miguel's post already detailed &lt;a class="reference external" href="http://www.celeryproject.org"&gt;Celery&lt;/a&gt;, I wanted to investigate
&lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; (Redis Queue), a simple library to queue job.&lt;/p&gt;
&lt;p&gt;As a side note, Miguel's blog is really great. I learned Flask following the &lt;a class="reference external" href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega-Tutorial&lt;/a&gt;.
If you are starting with Flask, I highly recommend it, as well as the
&lt;a class="reference external" href="http://flaskbook.com"&gt;Flask book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'll make a simple app with a form to run some actions.&lt;/p&gt;
&lt;div class="section" id="first-version-send-a-post-to-the-server-and-wait-for-the-response"&gt;
&lt;h2&gt;First version: send a post to the server and wait for the response&lt;/h2&gt;
&lt;p&gt;Let's start with some boilerplate code. This is gonna be a very
simple example, but I'll organize it like I use to for a real application
using &lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/blueprints/"&gt;Blueprints&lt;/a&gt;, an
&lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/patterns/appfactories/"&gt;application factory&lt;/a&gt;
and some extensions (&lt;a class="reference external" href="https://pythonhosted.org/Flask-Bootstrap/"&gt;Flask-Bootstrap&lt;/a&gt;, &lt;a class="reference external" href="https://flask-script.readthedocs.io/en/latest/"&gt;Flask-Script&lt;/a&gt; and &lt;a class="reference external" href="http://flask-wtf.readthedocs.io/en/latest/"&gt;Flask-WTF&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
├── Dockerfile
├── LICENSE
├── README.rst
├── app
│   ├── __init__.py
│   ├── extensions.py
│   ├── factory.py
│   ├── main
│   │   ├── __init__.py
│   │   ├── forms.py
│   │   └── views.py
│   ├── settings.py
│   ├── static
│   │   └── css
│   │       └── main.css
│   ├── tasks.py
│   └── templates
│       ├── base.html
│       └── index.html
├── docker-compose.yml
├── environment.yml
├── manage.py
└── uwsgi.py
&lt;/pre&gt;
&lt;p&gt;I define all the used extensions in &lt;cite&gt;app/extensions.py&lt;/cite&gt;, my application factory in &lt;cite&gt;app/factory.py&lt;/cite&gt; and
my default settings in &lt;cite&gt;app/settings.py&lt;/cite&gt;. Nothing strange in there. You can refer to the
&lt;a class="reference external" href="https://github.com/beenje/flask-rq-example"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is our main &lt;cite&gt;app/main/views.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'main'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-14"&gt;&lt;/a&gt;            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Task failed: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-17"&gt;&lt;/a&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-18"&gt;&lt;/a&gt;            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-19"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'main.index'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ec965f0f20b7430198981fdab669c825-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;As said previously, we create a form. On submit, we run the task and send the response back.&lt;/p&gt;
&lt;p&gt;The form is defined in &lt;cite&gt;app/main/forms.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_wtf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Form&lt;/span&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SelectField&lt;/span&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaskForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SelectField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-10"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8cc6739fd94746a593a5c00352718761-11"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'TASKS'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In &lt;cite&gt;app/tasks.py&lt;/cite&gt;, we have our &lt;cite&gt;run&lt;/cite&gt; function to start a dummy task:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'error'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-9"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Short'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-11"&gt;&lt;/a&gt;        &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MAX_TIME_TO_WAIT'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_655a586d1944498b88ebb1a2dbedd109-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'{} performed in {} second(s)'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In &lt;cite&gt;app/templates/base.html&lt;/cite&gt;, we define a fixed to top navbar and
a container to show flash messages and our main code. Note that we take advantage of
&lt;a class="reference external" href="https://pythonhosted.org/Flask-Bootstrap/"&gt;Flask-Bootstrap&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code html"&gt;&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-1"&gt;&lt;/a&gt;{%- extends "bootstrap/base.html" %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-2"&gt;&lt;/a&gt;{% import "bootstrap/utils.html" as utils %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-4"&gt;&lt;/a&gt;{% block head %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-5"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-6"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-7"&gt;&lt;/a&gt;  {{super()}}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-8"&gt;&lt;/a&gt;{% endblock %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-10"&gt;&lt;/a&gt;{% block styles %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-11"&gt;&lt;/a&gt;  {{super()}}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-12"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('static', filename='css/main.css') }}"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-13"&gt;&lt;/a&gt;{% endblock %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-15"&gt;&lt;/a&gt;{% block title %}My App{% endblock %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-17"&gt;&lt;/a&gt;{% block navbar %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-18"&gt;&lt;/a&gt;  &lt;span class="c"&gt;&amp;lt;!-- Fixed navbar --&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-19"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-default navbar-fixed-top"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-20"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-21"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-22"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggle"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;".navbar-collapse"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-23"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-24"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-25"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-26"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-27"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-28"&gt;&lt;/a&gt;        &lt;span class="c"&gt;&amp;lt;!--img class="navbar-brand" src="../../static/logo.png"--&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-29"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('main.index') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My App&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-30"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-31"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-32"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-33"&gt;&lt;/a&gt;{% endblock %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-35"&gt;&lt;/a&gt;{% block content %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-36"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"mainContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-37"&gt;&lt;/a&gt;    {{utils.flashed_messages(container=False, dismissible=True)}}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-38"&gt;&lt;/a&gt;    {% block main %}{% endblock %}
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-39"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_fa9c151cb92b456aa01b836005c296b8-40"&gt;&lt;/a&gt;{% endblock %}
&lt;/pre&gt;&lt;p&gt;The html code for our view is in &lt;cite&gt;app/templates/index.html&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code html"&gt;&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-1"&gt;&lt;/a&gt;{%- extends "base.html" %}
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-2"&gt;&lt;/a&gt;{% import "bootstrap/wtf.html" as wtf %}
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-4"&gt;&lt;/a&gt;{% block main %}
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-5"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"panel panel-default"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-6"&gt;&lt;/a&gt;        &lt;span class="c"&gt;&amp;lt;!-- Default panel contents --&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-7"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"panel-heading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Select task to run&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-8"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"panel-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-9"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-10"&gt;&lt;/a&gt;            &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"taskForm"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-11"&gt;&lt;/a&gt;              {{ form.hidden_tag() }}
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-12"&gt;&lt;/a&gt;              {{ wtf.form_field(form.task) }}
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-13"&gt;&lt;/a&gt;              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-14"&gt;&lt;/a&gt;                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-default"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Run&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-15"&gt;&lt;/a&gt;              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-16"&gt;&lt;/a&gt;            &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-17"&gt;&lt;/a&gt;          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-18"&gt;&lt;/a&gt;        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-19"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_8f05c92515134d53b4373a29b0a72a8d-20"&gt;&lt;/a&gt;{% endblock %}
&lt;/pre&gt;&lt;p&gt;Let's run this first example. We could just create a virtual environment using &lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt;
or &lt;a class="reference external" href="http://conda.pydata.org/docs/intro.html"&gt;conda&lt;/a&gt;. As we'll soon need &lt;a class="reference external" href="http://redis.io"&gt;Redis&lt;/a&gt;, let's directly go for &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://github.com/beenje/flask-rq-example.git
$ cd flask-rq-example
$ git checkout faa61009dbe3bafe49aae473f0fa19ab05a3ab90
$ docker-compose build
$ docker-compose up
&lt;/pre&gt;
&lt;p&gt;Go to &lt;a class="reference external" href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;. You should see the following window:&lt;/p&gt;
&lt;img alt="/images/flask-rq-example.png" src="http://beenje.github.io/blog/images/flask-rq-example.png"&gt;
&lt;p&gt;Choose a task and press run. See how The UI is stuck while waiting for the server?
Not very nice...
Let' improve that a little by using some JavaScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="second-version-use-ajax-to-submit-the-form"&gt;
&lt;h2&gt;Second version: use Ajax to submit the form&lt;/h2&gt;
&lt;p&gt;Let's write some javascript. Here is the &lt;cite&gt;app/static/js/main.js&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-1"&gt;&lt;/a&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// flash an alert&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// remove previous alerts by default&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-5"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// set clean to false to keep old alerts&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-6"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;"undefined"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-9"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;remove_alerts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-10"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-11"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div class="alert alert-'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' alert-dismissible" role="alert"&amp;gt;'&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-12"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;htmlString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;button type="button" class="close" data-dismiss="alert" aria-label="Close"&amp;gt;'&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-13"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;htmlString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;span aria-hidden="true"&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/div&amp;gt;'&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-14"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;prependTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#mainContent"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;slideDown&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-15"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-17"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;remove_alerts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-18"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".alert"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slideUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-19"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-21"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-23"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// submit form&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-24"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#submit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-25"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Running "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#task"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-26"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-27"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$SCRIPT_ROOT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/_run_task"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-28"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#taskForm"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-29"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-30"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-31"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-32"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-33"&gt;&lt;/a&gt;      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-34"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorThrown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-35"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-36"&gt;&lt;/a&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-37"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-38"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-39"&gt;&lt;/a&gt;
&lt;a name="rest_code_b1174de64191406d824f3d63f2dbe5d7-40"&gt;&lt;/a&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;To include this file in our html, we add the following block to &lt;cite&gt;app/templates/base.html&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code html"&gt;&lt;a name="rest_code_a7aeddcb475e4b6a8648623dd2eec004-1"&gt;&lt;/a&gt;{% block scripts %}
&lt;a name="rest_code_a7aeddcb475e4b6a8648623dd2eec004-2"&gt;&lt;/a&gt;  {{super()}}
&lt;a name="rest_code_a7aeddcb475e4b6a8648623dd2eec004-3"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a7aeddcb475e4b6a8648623dd2eec004-4"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;$SCRIPT_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;script_root&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nx"&gt;tojson&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nx"&gt;safe&lt;/span&gt; &lt;span class="p"&gt;}};&lt;/span&gt;
&lt;a name="rest_code_a7aeddcb475e4b6a8648623dd2eec004-5"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_a7aeddcb475e4b6a8648623dd2eec004-6"&gt;&lt;/a&gt;  {% block app_scripts %}{% endblock %}
&lt;a name="rest_code_a7aeddcb475e4b6a8648623dd2eec004-7"&gt;&lt;/a&gt;{% endblock %}
&lt;/pre&gt;&lt;p&gt;And here is a diff for our &lt;cite&gt;app/templates/index.html&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-1"&gt;&lt;/a&gt;               {{ form.hidden_tag() }}
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-2"&gt;&lt;/a&gt;               {{ wtf.form_field(form.task) }}
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-3"&gt;&lt;/a&gt;               &amp;lt;div class="form-group"&amp;gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-4"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-                &amp;lt;button type="submit" class="btn btn-default" id="submit"&amp;gt;Run&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-5"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+                &amp;lt;button type="button" class="btn btn-default" id="submit"&amp;gt;Run&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-6"&gt;&lt;/a&gt;               &amp;lt;/div&amp;gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-7"&gt;&lt;/a&gt;             &amp;lt;/form&amp;gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-8"&gt;&lt;/a&gt;           &amp;lt;/div&amp;gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-9"&gt;&lt;/a&gt;         &amp;lt;/div&amp;gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-10"&gt;&lt;/a&gt;       &amp;lt;/div&amp;gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-11"&gt;&lt;/a&gt; {% endblock %}
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-12"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-13"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+{% block app_scripts %}&lt;/span&gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-14"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  &amp;lt;script src="{{ url_for('static', filename='js/main.js') }}"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_3c426416962143e0bcf72f40cbe86601-15"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+{% endblock %}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We change the &lt;cite&gt;button&lt;/cite&gt; type from &lt;cite&gt;submit&lt;/cite&gt; to &lt;cite&gt;button&lt;/cite&gt; so that it doesn't send a POST when clicked.
We send an Ajax query to &lt;cite&gt;$SCRIPT_ROOT/_run_task&lt;/cite&gt; instead.&lt;/p&gt;
&lt;p&gt;This is our new &lt;cite&gt;app/main/views.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'main'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/_run_task'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_task&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-14"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Task failed: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)}),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-18"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c1ffc99470d54516a4cb836190bbd83c-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let's run this new example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git checkout c1ccfe8b3a39079ab80f813b5733b324c8b65c6f
$ docker rm flaskrqexample_web
$ docker-compose up
&lt;/pre&gt;
&lt;p&gt;This time we immediately get some feedback when clicking on &lt;em&gt;Run&lt;/em&gt;. There is no reload.
That's better, but the server is still busy during the processing. If you try to open a new page, you won't get any answer until the task is done...&lt;/p&gt;
&lt;p&gt;To avoid blocking the server, we'll use a task queue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="third-version-setup-rq"&gt;
&lt;h2&gt;Third version: setup RQ&lt;/h2&gt;
&lt;p&gt;As its name indicates, &lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; (Redis Queue) is backed by &lt;a class="reference external" href="http://redis.io"&gt;Redis&lt;/a&gt;.
It is designed to have a low barrier entry.
What do we need to integrate &lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; in our &lt;a class="reference external" href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; web app?&lt;/p&gt;
&lt;p&gt;Let's first add some variables in &lt;cite&gt;app/settings.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9865db4d489f4a7ea111ec669602860e-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;# The Redis database to use&lt;/span&gt;
&lt;a name="rest_code_9865db4d489f4a7ea111ec669602860e-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;REDIS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'redis://redis:6379/0'&lt;/span&gt;
&lt;a name="rest_code_9865db4d489f4a7ea111ec669602860e-3"&gt;&lt;/a&gt;&lt;span class="c"&gt;# The queues to listen on&lt;/span&gt;
&lt;a name="rest_code_9865db4d489f4a7ea111ec669602860e-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;QUEUES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;To execute a background job, we need a worker.
&lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; comes with the &lt;cite&gt;rq worker&lt;/cite&gt; command to start a worker. To integrate it
better with our Flask app, we are going to write a simple &lt;a class="reference external" href="https://flask-script.readthedocs.io/en/latest/"&gt;Flask-Script&lt;/a&gt;
command. We add the following to our &lt;cite&gt;manage.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt;
&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-3"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@manager.command&lt;/span&gt;
&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;runworker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;redis_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'REDIS_URL'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;redis_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'QUEUES'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_fbac572feb81420c91c76d17a8cb3196-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The Manager runs the command inside a Flask test context, meaning we can
access the app config from within the worker.
This is nice because both our web application and
workers (and thus the jobs run on the worker) have access to the same
configuration variables. No separate config file. No discrepancy.
Everything is in &lt;cite&gt;app/settings.py&lt;/cite&gt; and can be overwritten by &lt;em&gt;LOCAL_SETTINGS&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To put a job in a Queue, you just create a &lt;em&gt;RQ Queue&lt;/em&gt; and enqueue it.
One way to do that is to pass the connection when creating the &lt;em&gt;Queue&lt;/em&gt;. This is a bit tedious.
&lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; has the notion of &lt;a class="reference external" href="http://python-rq.org/docs/connections/"&gt;connection context&lt;/a&gt;. We take advantage of that
and register a function to push the connection and pop it before and after a request (&lt;cite&gt;app/main/views.py&lt;/cite&gt;):&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;push_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pop_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_redis_connection&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;redis_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'_redis_connection'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;redis_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'REDIS_URL'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;redis_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_redis_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-14"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp.before_request&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-15"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push_rq_connection&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;push_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_redis_connection&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-19"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp.teardown_request&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-20"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop_rq_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_421630cff8134a96b6b6bb91762392f9-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pop_connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This makes it easy to create a &lt;em&gt;Queue&lt;/em&gt; in a request or application context.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;get_redis_connection&lt;/cite&gt; function gets the Redis connection and stores it in the &lt;em&gt;flask.g&lt;/em&gt; object.
This is the same as what is explained for SQLite &lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/patterns/sqlite3/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With that in place, it's easy to enqueue a job. Here are the changes to the &lt;em&gt;run_task&lt;/em&gt; function:&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-1"&gt;&lt;/a&gt; @bp.route('/_run_task', methods=['POST'])
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-2"&gt;&lt;/a&gt; def run_task():
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-3"&gt;&lt;/a&gt;     task = request.form.get('task')
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-4"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-    try:&lt;/span&gt;
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-5"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-        result = tasks.run(task)&lt;/span&gt;
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-6"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-    except Exception as e:&lt;/span&gt;
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-7"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-        return jsonify({'message': 'Task failed: {}'.format(e)}), 500&lt;/span&gt;
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-8"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-    return jsonify({'result': result})&lt;/span&gt;
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-9"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    q = Queue()&lt;/span&gt;
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-10"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    job = q.enqueue(tasks.run, task)&lt;/span&gt;
&lt;a name="rest_code_f4c3d55b47f3448e996acf57be7eb3fe-11"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    return jsonify({'job_id': job.get_id()})&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We enqeue our task and just return the job id for now.&lt;/p&gt;
&lt;p&gt;Docker and &lt;cite&gt;docker-compose&lt;/cite&gt; are now gonna come in handy to start eveything
(Redis, our web app and a worker). We just have to add the following to our
&lt;cite&gt;docker-compose.yml&lt;/cite&gt; file:&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-1"&gt;&lt;/a&gt; - "5000:5000"
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-2"&gt;&lt;/a&gt; volumes:
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-3"&gt;&lt;/a&gt; - .:/app
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-4"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    depends_on:&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-5"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    - redis&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-6"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  worker:&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-7"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    image: flaskrqexample&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-8"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    container_name: flaskrqexample_worker&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-9"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    environment:&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-10"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+      LOCAL_SETTINGS: /app/settings.cfg&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-11"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    command: python manage.py runworker&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-12"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    volumes:&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-13"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    - .:/app&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-14"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    depends_on:&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-15"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    - redis&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-16"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  redis:&lt;/span&gt;
&lt;a name="rest_code_4cb4fbd51594485fb8793287b1c1a09e-17"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    image: redis:3.2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Don't forget to add &lt;em&gt;redis&lt;/em&gt; and &lt;em&gt;rq&lt;/em&gt; to your &lt;cite&gt;environment.yml&lt;/cite&gt; file!&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_98587ef2bae149c2abb443d251a26903-1"&gt;&lt;/a&gt;   - dominate==2.2.1
&lt;a name="rest_code_98587ef2bae149c2abb443d251a26903-2"&gt;&lt;/a&gt;   - flask-bootstrap==3.3.6.0
&lt;a name="rest_code_98587ef2bae149c2abb443d251a26903-3"&gt;&lt;/a&gt;   - flask-script==2.0.5
&lt;a name="rest_code_98587ef2bae149c2abb443d251a26903-4"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  - redis==2.10.5&lt;/span&gt;
&lt;a name="rest_code_98587ef2bae149c2abb443d251a26903-5"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  - rq==0.6.0&lt;/span&gt;
&lt;a name="rest_code_98587ef2bae149c2abb443d251a26903-6"&gt;&lt;/a&gt;   - visitor==0.1.3
&lt;/pre&gt;&lt;p&gt;Rebuild the docker image and start the app:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git checkout 437e710df3df0dd4b153f20027f5f00270b2e1a3
$ docker rm flaskrqexample_web
$ docker-compose build
$ docker-compose up
&lt;/pre&gt;
&lt;p&gt;OK, nice, we started a job in the background! This is fine to run a task
and forget about it (like sending an e-mail). But how do we get the result back?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fourth-version-poll-job-status-and-get-the-result"&gt;
&lt;h2&gt;Fourth version: poll job status and get the result&lt;/h2&gt;
&lt;p&gt;This is the part I have been missing for some time. But, as often, it's not difficult when you have seen it.
When launching the job, we return an url to check the status of the job.
The trick is to periodically call back the same function until the job is finished or failed.&lt;/p&gt;
&lt;p&gt;On the server side, the &lt;cite&gt;job_status&lt;/cite&gt; endpoint uses the job_id to retrieve
the job and to get its status and result.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/status/&amp;lt;job_id&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;job_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-6"&gt;&lt;/a&gt;        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'unknown'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-9"&gt;&lt;/a&gt;            &lt;span class="s"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-10"&gt;&lt;/a&gt;            &lt;span class="s"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-11"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-12"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_failed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-17"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/_run_task'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-18"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_task&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3ffa05066a23423193fc66827e1334df-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({}),&lt;/span&gt; &lt;span class="mi"&gt;202&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Location'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'main.job_status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_id&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The &lt;cite&gt;run_task&lt;/cite&gt; function returns an empty response with the &lt;a class="reference external" href="https://httpstatuses.com/202"&gt;202&lt;/a&gt; status
code. We use the &lt;em&gt;Location&lt;/em&gt; response-header field to pass the &lt;cite&gt;job_status&lt;/cite&gt; URL to the
client.&lt;/p&gt;
&lt;p&gt;On the client side, we retrieve the URL from the header and call the new
&lt;cite&gt;check_job_status&lt;/cite&gt; function.&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-1"&gt;&lt;/a&gt;&lt;span class="gu"&gt;@@ -28,8 +53,11 @@ $(document).ready(function() {&lt;/span&gt;
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-2"&gt;&lt;/a&gt;       data: $("#taskForm").serialize(),
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-3"&gt;&lt;/a&gt;       method: "POST",
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-4"&gt;&lt;/a&gt;       dataType: "json",
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-5"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-      success: function(data) {&lt;/span&gt;
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-6"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-        flash_alert("Job " + data.job_id + " started...", "info", false);&lt;/span&gt;
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-7"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+      success: function(data, status, request) {&lt;/span&gt;
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-8"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+        $("#submit").attr("disabled", "disabled");&lt;/span&gt;
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-9"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+        flash_alert("Running " + task + "...", "info");&lt;/span&gt;
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-10"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+        var status_url = request.getResponseHeader('Location');&lt;/span&gt;
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-11"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+        check_job_status(status_url);&lt;/span&gt;
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-12"&gt;&lt;/a&gt;       },
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-13"&gt;&lt;/a&gt;       error: function(jqXHR, textStatus, errorThrown) {
&lt;a name="rest_code_41e5ebfa9b9640248584c110e124241c-14"&gt;&lt;/a&gt;         flash_alert("Failed to start " + task, "danger");
&lt;/pre&gt;&lt;p&gt;We use &lt;cite&gt;setTimeout&lt;/cite&gt; to call back the same function until the job is done (finished
or failed).&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;check_job_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-2"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-3"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-5"&gt;&lt;/a&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"unknown"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-6"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Unknown job id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-7"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#submit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"disabled"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-8"&gt;&lt;/a&gt;          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-9"&gt;&lt;/a&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"finished"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-10"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-11"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#submit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"disabled"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-12"&gt;&lt;/a&gt;          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-13"&gt;&lt;/a&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"failed"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-14"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Job failed: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-15"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#submit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"disabled"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-16"&gt;&lt;/a&gt;          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-17"&gt;&lt;/a&gt;      &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-18"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;// queued/started/deferred&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-19"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-20"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;check_job_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-21"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-22"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-23"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_c7b395efc6774b26972f681db9bd3ece-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let's checkout this commit and run our app again:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git checkout da8360aefb222afc17417a518ac25029566071d6
$ docker rm flaskrqexample_web
$ docker rm flaskrqexample_worker
$ docker-compose up
&lt;/pre&gt;
&lt;p&gt;Try submitting some tasks. This time you can open another window and the
server will answer even when a task is running :-)
You can open a console in your browser to see the polling and the response
from the &lt;cite&gt;job_status&lt;/cite&gt; function.
Note that we only have one worker, so if you start a second task, it will be enqueued
and run only when the first one is done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using &lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; with &lt;a class="reference external" href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; isn't that difficult. So no need to block the server to
get the result of a long task.
There are a few more things to say, but this post starts to be a bit long,
so I'll keep that for another time.&lt;/p&gt;
&lt;p&gt;Thanks again to &lt;a class="reference external" href="http://blog.miguelgrinberg.com/"&gt;Miguel Grinberg&lt;/a&gt;
and all his posts about Flask!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>ajax</category><category>flask</category><category>python</category><category>redis</category><category>rq</category><guid>http://beenje.github.io/blog/posts/running-background-tasks-with-flask-and-rq/</guid><pubDate>Sat, 20 Aug 2016 21:32:16 GMT</pubDate></item><item><title>Installing OpenVPN on a Raspberry Pi with Ansible</title><link>http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have to confess that I initially decided to install a VPN,
not to secure my connection when using a free Wireless Acces Point in an
airport or hotel, but to watch Netflix :-)&lt;/p&gt;
&lt;p&gt;I had a VPS in France where I installed sniproxy to access Netflix.
Not that I find the french catalogue so great, but as a French guy living
in Sweden, it was a good way for my kids to watch some french programs.
But Netflix started to block VPS providers...&lt;/p&gt;
&lt;p&gt;I have a brother in France who has a Fiber Optic Internet access.
That was a good opportunity to setup a private VPN and I bought him a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;There are many resources on the web about &lt;a class="reference external" href="https://openvpn.net/index.php/open-source/documentation/howto.html"&gt;OpenVPN&lt;/a&gt;.
A paper worth mentioning is: &lt;a class="reference external" href="https://www.sans.org/reading-room/whitepapers/networkdevs/soho-remote-access-vpn-easy-pie-raspberry-pi-34427"&gt;SOHO Remote Access VPN. Easy as Pie, Raspberry Pi...&lt;/a&gt;
It's from end of 2013 and describes Esay-RSA 2.0 (that used to be installed with
OpenVPN), but it's still an interesting read.&lt;/p&gt;
&lt;p&gt;Anyway, most resources describe all the commands to run.
I don't really like installing softwares by running a bunch of commands. Propably due
to my professional experience, I like things to be reproducible.
That's why I love to automate things. I wrote a lot of shell scripts over
the years. About two years ago, I discovered &lt;a class="reference external" href="http://docs.ansible.com/ansible/index.html"&gt;Ansible&lt;/a&gt; and it quickly became my
favorite tool to deploy software.&lt;/p&gt;
&lt;p&gt;So let's write a small Ansible playbook to install OpenVPN on a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;First the firewall configuration. I like to use &lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;ufw&lt;/a&gt; which is quite easy to
setup:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install dependencies
  apt: name=ufw state=present update_cache=yes cache_valid_time=3600

- name: update ufw default forward policy
  lineinfile: dest=/etc/default/ufw regexp=^DEFAULT_FORWARD_POLICY line=DEFAULT_FORWARD_POLICY="ACCEPT"
  notify: reload ufw

- name: enable ufw ip forward
  lineinfile: dest=/etc/ufw/sysctl.conf regexp=^net/ipv4/ip_forward line=net/ipv4/ip_forward=1
  notify: reload ufw

- name: add NAT rules to ufw
  blockinfile:
    dest: /etc/ufw/before.rules
    insertbefore: BOF
    block: |
      # Nat table
      *nat
      :POSTROUTING ACCEPT [0:0]

      # Nat rules
      -F
      -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j SNAT --to-source {{ansible_eth0.ipv4.address}}

      # don't delete the 'COMMIT' line or these nat rules won't be processed
      COMMIT
  notify: reload ufw

- name: allow ssh
  ufw: rule=limit port=ssh proto=tcp

- name: allow openvpn
  ufw: rule=allow port={{openvpn_port}} proto={{openvpn_protocol}}

- name: enable ufw
  ufw: logging=on state=enabled
&lt;/pre&gt;
&lt;p&gt;This enables IP forwarding, adds the required NAT rules and allows ssh and
openvpn.&lt;/p&gt;
&lt;p&gt;The rest of the playbook installs OpenVPN and generates all the keys automatically,
except the Diffie-Hellman one that should be generated locally.
This is just because it takes for ever on the Pi :-)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install openvpn
  apt: name=openvpn state=present

- name: create /etc/openvpn
  file: path=/etc/openvpn state=directory mode=0755 owner=root group=root

- name: create /etc/openvpn/keys
  file: path=/etc/openvpn/keys state=directory mode=0700 owner=root group=root

- name: create clientside and serverside directories
  file: path="{{item}}" state=directory mode=0755
  with_items:
      - "{{clientside}}/keys"
      - "{{serverside}}"
  become: true
  become_user: "{{user}}"

- name: create openvpn base client.conf
  template: src=client.conf.j2 dest={{clientside}}/client.conf owner=root group=root mode=0644

- name: download EasyRSA
  get_url: url={{easyrsa_url}} dest=/home/{{user}}/openvpn
  become: true
  become_user: "{{user}}"

- name: create scripts
  template: src={{item}}.j2 dest=/home/{{user}}/openvpn/{{item}} owner=root group=root mode=0755
  with_items:
    - create_serverside
    - create_clientside
  tags: client

- name: run serverside script
  command: ./create_serverside
  args:
    chdir: /home/{{user}}/openvpn
    creates: "{{easyrsa_server}}/ta.key"
  become: true
  become_user: "{{user}}"

- name: run clientside script
  command: ./create_clientside {{item}}
  args:
    chdir: /home/{{user}}/openvpn
    creates: "{{clientside}}/files/{{item}}.ovpn"
  become: true
  become_user: "{{user}}"
  with_items: "{{openvpn_clients}}"
  tags: client

- name: install all server keys
  command: install -o root -g root -m 600 {{item.name}} /etc/openvpn/keys/
  args:
    chdir: "{{item.path}}"
    creates: /etc/openvpn/keys/{{item.name}}
  with_items:
    - { name: 'ca.crt', path: "{{easyrsa_server}}/pki" }
    - { name: '{{ansible_hostname}}.crt', path: "{{easyrsa_server}}/pki/issued" }
    - { name: '{{ansible_hostname}}.key', path: "{{easyrsa_server}}/pki/private" }
    - { name: 'ta.key', path: "{{easyrsa_server}}" }

- name: copy Diffie-Hellman key
  copy: src="{{openvpn_dh}}" dest=/etc/openvpn/keys/dh.pem owner=root group=root mode=0600

- name: create openvpn server.conf
  template: src=server.conf.j2 dest=/etc/openvpn/server.conf owner=root group=root mode=0644
  notify: restart openvpn

- name: start openvpn
  service: name=openvpn state=started
&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;create_clientside&lt;/em&gt; script generates all the required client keys and creates an ovpn file
that includes them.  It makes it very easy to install on any device: just one file to
drop.&lt;/p&gt;
&lt;p&gt;One thing I stumbled upon is the &lt;em&gt;ns-cert-type server&lt;/em&gt; option that I
initially used in the server configuration. This prevented the client to
connect. As explained &lt;a class="reference external" href="https://community.openvpn.net/openvpn/wiki/EasyRSA3-OpenVPN-Howto"&gt;here&lt;/a&gt;,
this option is a deprecated "Netscape" cert attribute. It's not enabled by
default with Easy-RSA 3.&lt;/p&gt;
&lt;p&gt;Fortunately, the mentioned &lt;a class="reference external" href="https://community.openvpn.net/openvpn/wiki/EasyRSA3-OpenVPN-Howto"&gt;howto&lt;/a&gt; and
the &lt;a class="reference external" href="https://github.com/OpenVPN/easy-rsa"&gt;Easy-RSA github&lt;/a&gt; page are good references
for Easy-RSA 3.&lt;/p&gt;
&lt;p&gt;One important thing to note is that I create all the keys with no password.
That's obviously not the most secure and recommended way.
Anyone accessing the CA could sign new requests. But it can be stored offline on an USB stick.
I actually think that for my use case it's not even worth keeping the CA.
Sure it means I can't easily add a new client or revoke a certificate.
But with the playbook, it's super easy to throw all the keys and regenerate everything.
That forces to replace all clients configuration but with 2 or 3
clients, this is not a problem.&lt;/p&gt;
&lt;p&gt;For sure don't leave all the generated keys on the Pi!
After copying the clients ovpn files, remove the /home/pi/openvpn
directory (save it somewhere safe if you want to add new clients or revoke
a certificate without regenerating everything).&lt;/p&gt;
&lt;p&gt;The full playbook can be found on &lt;a class="reference external" href="https://github.com/beenje/pi_openvpn"&gt;github&lt;/a&gt;.
The README includes some quick instructions.&lt;/p&gt;
&lt;p&gt;I now have a private VPN in France and one at home that I can use to
securely access my NAS from anywhere!&lt;/p&gt;&lt;/div&gt;</description><category>Ansible</category><category>pi</category><category>VPN</category><guid>http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible/</guid><pubDate>Mon, 18 Jul 2016 20:26:28 GMT</pubDate></item><item><title>uWSGI, send_file and Python 3.5</title><link>http://beenje.github.io/blog/posts/uwsgi-send_file-and-python35/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have a Flask app that returns an in-memory bytes buffer (&lt;a class="reference external" href="https://docs.python.org/3/library/io.html#io.BytesIO"&gt;io.Bytesio&lt;/a&gt;) using Flask &lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/api/#flask.send_file"&gt;send_file&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;The app is deployed using &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; behind Nginx.
This was working fine with Python 3.4.&lt;/p&gt;
&lt;p&gt;When I updated Python to 3.5, I got the following exception when trying to download a file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
io.UnsupportedOperation: fileno

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1817, in wsgi_app
    response = self.full_dispatch_request()
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1477, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1381, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1475, in full_dispatch_request
    rv = self.dispatch_request()
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1461, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask_login.py", line 758, in decorated_view
    return func(*args, **kwargs)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask_security/decorators.py", line 194, in decorated_view
    return fn(*args, **kwargs)
  File "/webapps/bowser/bowser/app/bext/views.py", line 116, in download
    as_attachment=True)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/helpers.py", line 523, in send_file
    data = wrap_file(request.environ, file)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/werkzeug/wsgi.py", line 726, in wrap_file
    return environ.get('wsgi.file_wrapper', FileWrapper)(file, buffer_size)
SystemError: &amp;lt;built-in function uwsgi_sendfile&amp;gt; returned a result with an error set
&lt;/pre&gt;
&lt;p&gt;I quickly found the following &lt;a class="reference external" href="http://lists.unbit.it/pipermail/uwsgi/2015-September/008186.html"&gt;post&lt;/a&gt; with the same exception, but no answer...
A little more googling brought me to this github issue: &lt;a class="reference external" href="https://github.com/unbit/uwsgi/issues/1126"&gt;In python3, uwsgi fails to respond a
stream from BytesIO object&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As described, you should run uwsgi with the &lt;cite&gt;--wsgi-disable-file-wrapper&lt;/cite&gt; flag to avoid this problem.
As with all command line options, you can add the following entry in your
uwsgi.ini file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wsgi-disable-file-wrapper = true
&lt;/pre&gt;
&lt;p&gt;Note that &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; 2.0.12 is required.&lt;/p&gt;
&lt;p&gt;When searching in &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; documentation, I only found one match in &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/Changelog-2.0.12.html?highlight=wsgi-disable-file-wrapper"&gt;uWSGI 2.0.12 release notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A problem/option that should be better documented. Probably a pull request to open :-)&lt;/p&gt;
&lt;p&gt;UPDATE (2016-07-13): pull request &lt;a class="reference external" href="https://github.com/unbit/uwsgi-docs/pull/317"&gt;merged&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>flask</category><category>python</category><category>uwsgi</category><guid>http://beenje.github.io/blog/posts/uwsgi-send_file-and-python35/</guid><pubDate>Tue, 05 Jul 2016 18:39:29 GMT</pubDate></item><item><title>GitLab CI and conda</title><link>http://beenje.github.io/blog/posts/gitlab-ci-and-conda/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I setup GitLab to host several projects at work and I have been quite
pleased with it. I read that setting GitLab CI for test and deployment was
easy so I decided to try it to automatically run the test suite and the
sphinx documentation.&lt;/p&gt;
&lt;p&gt;I found the official &lt;a class="reference external" href="http://docs.gitlab.com/ce/ci/quick_start/README.html"&gt;documentation&lt;/a&gt; to be quite good
to setup a runner so I won't go into details here. I chose the &lt;a class="reference external" href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/executors/docker.md"&gt;Docker
executor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is my first &lt;cite&gt;.gitlab-ci.yml&lt;/cite&gt; test:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
image: python:3.4

before_script:
  - pip install -r requirements.txt

tests:
  stage: test
  script:
    - python -m unittest discover -v
&lt;/pre&gt;
&lt;p&gt;Success, it works! Nice. But... 8 minutes 33 seconds build time for a test suite that
runs in less than 1 second... that's a bit long.&lt;/p&gt;
&lt;p&gt;Let's try using some caching to avoid having to download all the pip
requirements every time. After googling, I found this &lt;a class="reference external" href="https://fleschenberg.net/gitlab-pip-cache/"&gt;post&lt;/a&gt; explaining that the cache
path must be inside the build directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
image: python:3.4

before_script:
  - export PIP_CACHE_DIR="pip-cache"
  - pip install -r requirements.txt

cache:
  paths:
    - pip-cache

tests:
  stage: test
  script:
    - python -m unittest discover -v
&lt;/pre&gt;
&lt;p&gt;With the pip cache, the build time went down to about 6 minutes. A bit
better, but far from acceptable.&lt;/p&gt;
&lt;p&gt;Of course I knew the problem was not the download, but the
installation of the pip requirements. I use &lt;a class="reference external" href="http://pandas.pydata.org"&gt;pandas&lt;/a&gt;
which explains why it takes a while to compile.&lt;/p&gt;
&lt;p&gt;So how do you install &lt;a class="reference external" href="http://pandas.pydata.org"&gt;pandas&lt;/a&gt; easily? With &lt;a class="reference external" href="http://conda.pydata.org/docs/"&gt;conda&lt;/a&gt; of course!
There are even some nice &lt;a class="reference external" href="https://github.com/ContinuumIO/docker-images"&gt;docker images&lt;/a&gt;  created by Continuum Analytics ready to be used.&lt;/p&gt;
&lt;p&gt;So let's try again:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
image: continuumio/miniconda3:latest

before_script:
  - conda env create -f environment.yml
  - source activate koopa

tests:
  stage: test
  script:
    - python -m unittest discover -v
&lt;/pre&gt;
&lt;p&gt;Build time: 2 minutes 55 seconds. Nice but we need some cache to avoid
downloading all the packages everytime.
The first problem is that the cache path has to be in the build directory.
Conda packages are saved in &lt;cite&gt;/opt/conda/pkgs&lt;/cite&gt; by default. A solution is to
replace that directory with a link to a local directory. It works but the
problem is that Gitlab makes a compressed archive to save and restore the
cache which takes quite some time in this case...&lt;/p&gt;
&lt;p&gt;How to get a fast cache? Let's use a docker volume!
I modified my &lt;cite&gt;/etc/gitlab-runner/config.toml&lt;/cite&gt; to add two volumes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[runners.docker]
  tls_verify = false
  image = "continuumio/miniconda3:latest"
  privileged = false
  disable_cache = false
  volumes = ["/cache", "/opt/cache/conda/pkgs:/opt/conda/pkgs:rw", "/opt/cache/pip:/opt/cache/pip:rw"]
&lt;/pre&gt;
&lt;p&gt;One volume for &lt;a class="reference external" href="http://conda.pydata.org/docs/"&gt;conda&lt;/a&gt; packages and one for &lt;cite&gt;pip&lt;/cite&gt;.
My new &lt;cite&gt;.gitlab-ci.yml&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
image: continuumio/miniconda3:latest

before_script:
  - export PIP_CACHE_DIR="/opt/cache/pip"
  - conda env create -f environment.yml
  - source activate koopa

tests:
  stage: test
  script:
    - python -m unittest discover -v
&lt;/pre&gt;
&lt;p&gt;The build time is about 10 seconds!&lt;/p&gt;
&lt;p&gt;Just a few days after my tests, GitLab announced &lt;a class="reference external" href="https://about.gitlab.com/2016/05/23/gitlab-container-registry/"&gt;GitLab Container
Registry&lt;/a&gt;.
I already thought about building my own docker image and this new feature
would make it even easier than before. But I would have to remember to update
my image if I change my requirements. Which I don't have to think about with the
current solution.&lt;/p&gt;&lt;/div&gt;</description><category>ci</category><category>conda</category><category>git</category><category>gitlab</category><category>python</category><guid>http://beenje.github.io/blog/posts/gitlab-ci-and-conda/</guid><pubDate>Tue, 31 May 2016 14:48:23 GMT</pubDate></item><item><title>Switching from git-bigfile to git-lfs</title><link>http://beenje.github.io/blog/posts/switching-from-git-bigfile-to-git-lfs/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;In 2012, I was looking for a way to store big files in git. &lt;a class="reference external" href="https://git-annex.branchable.com"&gt;git-annex&lt;/a&gt;
was already around, but I found it a bit too complex for my use case.
I discovered &lt;a class="reference external" href="https://github.com/schacon/git-media"&gt;git-media&lt;/a&gt; from Scott Chacon and it looked like what I was looking for.
It was in Ruby which made it not super easy to install on some machines at work.
I thought it was a good exercise to port it to Python. That's how &lt;a class="reference external" href="https://github.com/beenje/git-bigfile"&gt;git-bigfile&lt;/a&gt; was born.
It was simple and was doing the job.&lt;/p&gt;
&lt;p&gt;Last year, I was thinking about giving it some love: port it to Python 3,
add some unittests... That's about when I switched from &lt;a class="reference external" href="https://gogs.io"&gt;Gogs&lt;/a&gt;
to &lt;a class="reference external" href="https://about.gitlab.com"&gt;Gitlab&lt;/a&gt; and read that &lt;a class="reference external" href="https://about.gitlab.com"&gt;Gitlab&lt;/a&gt; was about to support &lt;a class="reference external" href="https://git-lfs.github.com"&gt;git-lfs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Being developed by GitHub and with &lt;a class="reference external" href="https://about.gitlab.com"&gt;Gitlab&lt;/a&gt; support, &lt;a class="reference external" href="https://git-lfs.github.com"&gt;git-lfs&lt;/a&gt; was an
obvious option to replace &lt;a class="reference external" href="https://github.com/beenje/git-bigfile"&gt;git-bigfile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is how to switch a project using &lt;a class="reference external" href="https://github.com/beenje/git-bigfile"&gt;git-bigfile&lt;/a&gt; to &lt;a class="reference external" href="https://git-lfs.github.com"&gt;git-lfs&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Make a list of all files tracked by git-bigfile:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git bigfile status | awk '/pushed/ {print $NF}' &amp;gt; /tmp/list
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit .gitattributes to replace the filter. Replace &lt;cite&gt;filter=bigfile -crlf&lt;/cite&gt; with &lt;cite&gt;filter=lfs diff=lfs merge=lfs -text&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat .gitattributes
*.tar.bz2 filter=lfs diff=lfs merge=lfs -text
*.iso filter=lfs diff=lfs merge=lfs -text
*.img filter=lfs diff=lfs merge=lfs -text
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Remove all big files from the staging area and add them back with git-lfs:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git rm --cached $(cat /tmp/list)
$ git add .
$ git commit -m "Switch to git-lfs"
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Check that the files were added using git-lfs. You should see something
like that:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git show HEAD
diff --git a/CentOS_6.4/images/install.img
b/CentOS_6.4/images/install.img
index 227ea55..a9cc6a8 100644
--- a/CentOS_6.4/images/install.img
+++ b/CentOS_6.4/images/install.img
@@ -1 +1,3 @@
-5d243948497ceb9f07b033da62498e52269f4b83
+version https://git-lfs.github.com/spec/v1
+oid
sha256:6fcaac620b82e38e2092a6353ca766a3b01fba7f3fd6a0397c57e979aa293db0
+size 133255168
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Remove git-bigfile cache directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ rm -rf .git/bigfile
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: to push files larger than 2.1GB to your gitlab server, wait for this
&lt;a class="reference external" href="https://gitlab.com/gitlab-org/gitlab-ce/issues/12745"&gt;fix&lt;/a&gt;. Hopefully
it will be in 8.4.3.&lt;/p&gt;&lt;/div&gt;</description><category>git</category><guid>http://beenje.github.io/blog/posts/switching-from-git-bigfile-to-git-lfs/</guid><pubDate>Sat, 30 Jan 2016 20:55:32 GMT</pubDate></item></channel></rss>