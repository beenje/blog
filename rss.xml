<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Tchut-Tchut Blog</title><link>http://beenje.github.io/blog/</link><description>Notes to myself</description><atom:link rel="self" href="http://beenje.github.io/blog/rss.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 21 Jul 2016 18:59:47 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Installing OpenVPN on a Raspberry Pi with Ansible</title><link>http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have to confess that I initially decided to install a VPN,
not to secure my connection when using a free Wireless Acces Point in an
airport or hotel, but to watch Netflix :-)&lt;/p&gt;
&lt;p&gt;I had a VPS in France where I installed sniproxy to access Netflix.
Not that I find the french catalogue so great, but as a French guy living
in Sweden, it was a good way for my kids to watch some french programs.
But Netflix started to block VPS providers...&lt;/p&gt;
&lt;p&gt;I have a brother in France who has a Fiber Optic Internet access.
That was a good opportunity to setup a private VPN and I bought him a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;There are many resources on the web about &lt;a class="reference external" href="https://openvpn.net/index.php/open-source/documentation/howto.html"&gt;OpenVPN&lt;/a&gt;.
A paper worth mentioning is: &lt;a class="reference external" href="https://www.sans.org/reading-room/whitepapers/networkdevs/soho-remote-access-vpn-easy-pie-raspberry-pi-34427"&gt;SOHO Remote Access VPN. Easy as Pie, Raspberry Pi...&lt;/a&gt;
It's from end of 2013 and describes Esay-RSA 2.0 (that used to be installed with
OpenVPN), but it's still an interesting read.&lt;/p&gt;
&lt;p&gt;Anyway, most resources describe all the commands to run.
I don't really like installing softwares by running a bunch of commands. Propably due
to my professional experience, I like things to be reproducible.
That's why I love to automate things. I wrote a lot of shell scripts over
the years. About two years ago, I discovered &lt;a class="reference external" href="http://docs.ansible.com/ansible/index.html"&gt;Ansible&lt;/a&gt; and it quickly became my
favorite tool to deploy software.&lt;/p&gt;
&lt;p&gt;So let's write a small Ansible playbook to install OpenVPN on a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;First the firewall configuration. I like to use &lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;ufw&lt;/a&gt; which is quite easy to
setup:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install dependencies
  apt: name=ufw state=present update_cache=yes cache_valid_time=3600

- name: update ufw default forward policy
  lineinfile: dest=/etc/default/ufw regexp=^DEFAULT_FORWARD_POLICY line=DEFAULT_FORWARD_POLICY="ACCEPT"
  notify: reload ufw

- name: enable ufw ip forward
  lineinfile: dest=/etc/ufw/sysctl.conf regexp=^net/ipv4/ip_forward line=net/ipv4/ip_forward=1
  notify: reload ufw

- name: add NAT rules to ufw
  blockinfile:
    dest: /etc/ufw/before.rules
    insertbefore: BOF
    block: |
      # Nat table
      *nat
      :POSTROUTING ACCEPT [0:0]

      # Nat rules
      -F
      -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j SNAT --to-source {{ansible_eth0.ipv4.address}}

      # don't delete the 'COMMIT' line or these nat rules won't be processed
      COMMIT
  notify: reload ufw

- name: allow ssh
  ufw: rule=limit port=ssh proto=tcp

- name: allow openvpn
  ufw: rule=allow port={{openvpn_port}} proto={{openvpn_protocol}}

- name: enable ufw
  ufw: logging=on state=enabled
&lt;/pre&gt;
&lt;p&gt;This enables IP forwarding, adds the required NAT rules and allows ssh and
openvpn.&lt;/p&gt;
&lt;p&gt;The rest of the playbook installs OpenVPN and generates all the keys automatically,
except the Diffie-Hellman one that should be generated locally.
This is just because it takes for ever on the Pi :-)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install openvpn
  apt: name=openvpn state=present

- name: create /etc/openvpn
  file: path=/etc/openvpn state=directory mode=0755 owner=root group=root

- name: create /etc/openvpn/keys
  file: path=/etc/openvpn/keys state=directory mode=0700 owner=root group=root

- name: create clientside and serverside directories
  file: path="{{item}}" state=directory mode=0755
  with_items:
      - "{{clientside}}/keys"
      - "{{serverside}}"
  become: true
  become_user: "{{user}}"

- name: create openvpn base client.conf
  template: src=client.conf.j2 dest={{clientside}}/client.conf owner=root group=root mode=0644

- name: download EasyRSA
  get_url: url={{easyrsa_url}} dest=/home/{{user}}/openvpn
  become: true
  become_user: "{{user}}"

- name: create scripts
  template: src={{item}}.j2 dest=/home/{{user}}/openvpn/{{item}} owner=root group=root mode=0755
  with_items:
    - create_serverside
    - create_clientside
  tags: client

- name: run serverside script
  command: ./create_serverside
  args:
    chdir: /home/{{user}}/openvpn
    creates: "{{easyrsa_server}}/ta.key"
  become: true
  become_user: "{{user}}"

- name: run clientside script
  command: ./create_clientside {{item}}
  args:
    chdir: /home/{{user}}/openvpn
    creates: "{{clientside}}/files/{{item}}.ovpn"
  become: true
  become_user: "{{user}}"
  with_items: "{{openvpn_clients}}"
  tags: client

- name: install all server keys
  command: install -o root -g root -m 600 {{item.name}} /etc/openvpn/keys/
  args:
    chdir: "{{item.path}}"
    creates: /etc/openvpn/keys/{{item.name}}
  with_items:
    - { name: 'ca.crt', path: "{{easyrsa_server}}/pki" }
    - { name: '{{ansible_hostname}}.crt', path: "{{easyrsa_server}}/pki/issued" }
    - { name: '{{ansible_hostname}}.key', path: "{{easyrsa_server}}/pki/private" }
    - { name: 'ta.key', path: "{{easyrsa_server}}" }

- name: copy Diffie-Hellman key
  copy: src="{{openvpn_dh}}" dest=/etc/openvpn/keys/dh.pem owner=root group=root mode=0600

- name: create openvpn server.conf
  template: src=server.conf.j2 dest=/etc/openvpn/server.conf owner=root group=root mode=0644
  notify: restart openvpn

- name: start openvpn
  service: name=openvpn state=started
&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;create_clientside&lt;/em&gt; script generates all the required client keys and creates an ovpn file
that includes them.  It makes it very easy to install on any device: just one file to
drop.&lt;/p&gt;
&lt;p&gt;One thing I stumbled upon is the &lt;em&gt;ns-cert-type server&lt;/em&gt; option that I
initially used in the server configuration. This prevented the client to
connect. As explained &lt;a class="reference external" href="https://community.openvpn.net/openvpn/wiki/EasyRSA3-OpenVPN-Howto"&gt;here&lt;/a&gt;,
this option is a deprecated "Netscape" cert attribute. It's not enabled by
default with Easy-RSA 3.&lt;/p&gt;
&lt;p&gt;Fortunately, the mentioned &lt;a class="reference external" href="https://community.openvpn.net/openvpn/wiki/EasyRSA3-OpenVPN-Howto"&gt;howto&lt;/a&gt; and
the &lt;a class="reference external" href="https://github.com/OpenVPN/easy-rsa"&gt;Easy-RSA github&lt;/a&gt; page are good references
for Easy-RSA 3.&lt;/p&gt;
&lt;p&gt;One important thing to note is that I create all the keys with no password.
That's obviously not the most secure and recommended way.
Anyone accessing the CA could sign new requests. But it can be stored offline on an USB stick.
I actually think that for my use case it's not even worth keeping the CA.
Sure it means I can't easily add a new client or revoke a certificate.
But with the playbook, it's super easy to throw all the keys and regenerate everything.
That forces to replace all clients configuration but with 2 or 3
clients, this is not a problem.&lt;/p&gt;
&lt;p&gt;For sure don't leave all the generated keys on the Pi!
After copying the clients ovpn files, remove the /home/pi/openvpn
directory (save it somewhere safe if you want to add new clients or revoke
a certificate without regenerating everything).&lt;/p&gt;
&lt;p&gt;The full playbook can be found on &lt;a class="reference external" href="https://github.com/beenje/pi_openvpn"&gt;github&lt;/a&gt;.
The README includes some quick instructions.&lt;/p&gt;
&lt;p&gt;I now have a private VPN in France and one at home that I can use to
securely access my NAS from anywhere!&lt;/p&gt;&lt;/div&gt;</description><category>Ansible</category><category>pi</category><category>VPN</category><guid>http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible/</guid><pubDate>Mon, 18 Jul 2016 20:26:28 GMT</pubDate></item><item><title>uWSGI, send_file and Python 3.5</title><link>http://beenje.github.io/blog/posts/uwsgi-send_file-and-python35/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have a Flask app that returns an in-memory bytes buffer (&lt;a class="reference external" href="https://docs.python.org/3/library/io.html#io.BytesIO"&gt;io.Bytesio&lt;/a&gt;) using Flask &lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/api/#flask.send_file"&gt;send_file&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;The app is deployed using &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; behind Nginx.
This was working fine with Python 3.4.&lt;/p&gt;
&lt;p&gt;When I updated Python to 3.5, I got the following exception when trying to download a file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
io.UnsupportedOperation: fileno

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1817, in wsgi_app
    response = self.full_dispatch_request()
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1477, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1381, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1475, in full_dispatch_request
    rv = self.dispatch_request()
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1461, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask_login.py", line 758, in decorated_view
    return func(*args, **kwargs)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask_security/decorators.py", line 194, in decorated_view
    return fn(*args, **kwargs)
  File "/webapps/bowser/bowser/app/bext/views.py", line 116, in download
    as_attachment=True)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/helpers.py", line 523, in send_file
    data = wrap_file(request.environ, file)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/werkzeug/wsgi.py", line 726, in wrap_file
    return environ.get('wsgi.file_wrapper', FileWrapper)(file, buffer_size)
SystemError: &amp;lt;built-in function uwsgi_sendfile&amp;gt; returned a result with an error set
&lt;/pre&gt;
&lt;p&gt;I quickly found the following &lt;a class="reference external" href="http://lists.unbit.it/pipermail/uwsgi/2015-September/008186.html"&gt;post&lt;/a&gt; with the same exception, but no answer...
A little more googling brought me to this github issue: &lt;a class="reference external" href="https://github.com/unbit/uwsgi/issues/1126"&gt;In python3, uwsgi fails to respond a
stream from BytesIO object&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As described, you should run uwsgi with the &lt;cite&gt;--wsgi-disable-file-wrapper&lt;/cite&gt; flag to avoid this problem.
As with all command line options, you can add the following entry in your
uwsgi.ini file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wsgi-disable-file-wrapper = true
&lt;/pre&gt;
&lt;p&gt;Note that &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; 2.0.12 is required.&lt;/p&gt;
&lt;p&gt;When searching in &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; documentation, I only found one match in &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/Changelog-2.0.12.html?highlight=wsgi-disable-file-wrapper"&gt;uWSGI 2.0.12 release notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A problem/option that should be better documented. Probably a pull request to open :-)&lt;/p&gt;
&lt;p&gt;UPDATE (2016-07-13): pull request &lt;a class="reference external" href="https://github.com/unbit/uwsgi-docs/pull/317"&gt;merged&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>flask</category><category>python</category><category>uwsgi</category><guid>http://beenje.github.io/blog/posts/uwsgi-send_file-and-python35/</guid><pubDate>Tue, 05 Jul 2016 18:39:29 GMT</pubDate></item><item><title>GitLab CI and conda</title><link>http://beenje.github.io/blog/posts/gitlab-ci-and-conda/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I setup GitLab to host several projects at work and I have been quite
pleased with it. I read that setting GitLab CI for test and deployment was
easy so I decided to try it to automatically run the test suite and the
sphinx documentation.&lt;/p&gt;
&lt;p&gt;I found the official &lt;a class="reference external" href="http://docs.gitlab.com/ce/ci/quick_start/README.html"&gt;documentation&lt;/a&gt; to be quite good
to setup a runner so I won't go into details here. I chose the &lt;a class="reference external" href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/executors/docker.md"&gt;Docker
executor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is my first &lt;cite&gt;.gitlab-ci.yml&lt;/cite&gt; test:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
image: python:3.4

before_script:
  - pip install -r requirements.txt

tests:
  stage: test
  script:
    - python -m unittest discover -v
&lt;/pre&gt;
&lt;p&gt;Success, it works! Nice. But... 8 minutes 33 seconds build time for a test suite that
runs in less than 1 second... that's a bit long.&lt;/p&gt;
&lt;p&gt;Let's try using some caching to avoid having to download all the pip
requirements every time. After googling, I found this &lt;a class="reference external" href="https://fleschenberg.net/gitlab-pip-cache/"&gt;post&lt;/a&gt; explaining that the cache
path must be inside the build directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
image: python:3.4

before_script:
  - export PIP_CACHE_DIR="pip-cache"
  - pip install -r requirements.txt

cache:
  paths:
    - pip-cache

tests:
  stage: test
  script:
    - python -m unittest discover -v
&lt;/pre&gt;
&lt;p&gt;With the pip cache, the build time went down to about 6 minutes. A bit
better, but far from acceptable.&lt;/p&gt;
&lt;p&gt;Of course I knew the problem was not the download, but the
installation of the pip requirements. I use &lt;a class="reference external" href="http://pandas.pydata.org"&gt;pandas&lt;/a&gt;
which explains why it takes a while to compile.&lt;/p&gt;
&lt;p&gt;So how do you install &lt;a class="reference external" href="http://pandas.pydata.org"&gt;pandas&lt;/a&gt; easily? With &lt;a class="reference external" href="http://conda.pydata.org/docs/"&gt;conda&lt;/a&gt; of course!
There are even some nice &lt;a class="reference external" href="https://github.com/ContinuumIO/docker-images"&gt;docker images&lt;/a&gt;  created by Continuum Analytics ready to be used.&lt;/p&gt;
&lt;p&gt;So let's try again:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
image: continuumio/miniconda3:latest

before_script:
  - conda env create -f environment.yml
  - source activate koopa

tests:
  stage: test
  script:
    - python -m unittest discover -v
&lt;/pre&gt;
&lt;p&gt;Build time: 2 minutes 55 seconds. Nice but we need some cache to avoid
downloading all the packages everytime.
The first problem is that the cache path has to be in the build directory.
Conda packages are saved in &lt;cite&gt;/opt/conda/pkgs&lt;/cite&gt; by default. A solution is to
replace that directory with a link to a local directory. It works but the
problem is that Gitlab makes a compressed archive to save and restore the
cache which takes quite some time in this case...&lt;/p&gt;
&lt;p&gt;How to get a fast cache? Let's use a docker volume!
I modified my &lt;cite&gt;/etc/gitlab-runner/config.toml&lt;/cite&gt; to add two volumes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[runners.docker]
  tls_verify = false
  image = "continuumio/miniconda3:latest"
  privileged = false
  disable_cache = false
  volumes = ["/cache", "/opt/cache/conda/pkgs:/opt/conda/pkgs:rw", "/opt/cache/pip:/opt/cache/pip:rw"]
&lt;/pre&gt;
&lt;p&gt;One volume for &lt;a class="reference external" href="http://conda.pydata.org/docs/"&gt;conda&lt;/a&gt; packages and one for &lt;cite&gt;pip&lt;/cite&gt;.
My new &lt;cite&gt;.gitlab-ci.yml&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
image: continuumio/miniconda3:latest

before_script:
  - export PIP_CACHE_DIR="/opt/cache/pip"
  - conda env create -f environment.yml
  - source activate koopa

tests:
  stage: test
  script:
    - python -m unittest discover -v
&lt;/pre&gt;
&lt;p&gt;The build time is about 10 seconds!&lt;/p&gt;
&lt;p&gt;Just a few days after my tests, GitLab announced &lt;a class="reference external" href="https://about.gitlab.com/2016/05/23/gitlab-container-registry/"&gt;GitLab Container
Registry&lt;/a&gt;.
I already thought about building my own docker image and this new feature
would make it even easier than before. But I would have to remember to update
my image if I change my requirements. Which I don't have to think about with the
current solution.&lt;/p&gt;&lt;/div&gt;</description><category>ci</category><category>conda</category><category>git</category><category>gitlab</category><category>python</category><guid>http://beenje.github.io/blog/posts/gitlab-ci-and-conda/</guid><pubDate>Tue, 31 May 2016 14:48:23 GMT</pubDate></item><item><title>Switching from git-bigfile to git-lfs</title><link>http://beenje.github.io/blog/posts/switching-from-git-bigfile-to-git-lfs/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;In 2012, I was looking for a way to store big files in git. &lt;a class="reference external" href="https://git-annex.branchable.com"&gt;git-annex&lt;/a&gt;
was already around, but I found it a bit too complex for my use case.
I discovered &lt;a class="reference external" href="https://github.com/schacon/git-media"&gt;git-media&lt;/a&gt; from Scott Chacon and it looked like what I was looking for.
It was in Ruby which made it not super easy to install on some machines at work.
I thought it was a good exercise to port it to Python. That's how &lt;a class="reference external" href="https://github.com/beenje/git-bigfile"&gt;git-bigfile&lt;/a&gt; was born.
It was simple and was doing the job.&lt;/p&gt;
&lt;p&gt;Last year, I was thinking about giving it some love: port it to Python 3,
add some unittests... That's about when I switched from &lt;a class="reference external" href="https://gogs.io"&gt;Gogs&lt;/a&gt;
to &lt;a class="reference external" href="https://about.gitlab.com"&gt;Gitlab&lt;/a&gt; and read that &lt;a class="reference external" href="https://about.gitlab.com"&gt;Gitlab&lt;/a&gt; was about to support &lt;a class="reference external" href="https://git-lfs.github.com"&gt;git-lfs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Being developed by GitHub and with &lt;a class="reference external" href="https://about.gitlab.com"&gt;Gitlab&lt;/a&gt; support, &lt;a class="reference external" href="https://git-lfs.github.com"&gt;git-lfs&lt;/a&gt; was an
obvious option to replace &lt;a class="reference external" href="https://github.com/beenje/git-bigfile"&gt;git-bigfile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is how to switch a project using &lt;a class="reference external" href="https://github.com/beenje/git-bigfile"&gt;git-bigfile&lt;/a&gt; to &lt;a class="reference external" href="https://git-lfs.github.com"&gt;git-lfs&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Make a list of all files tracked by git-bigfile:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git bigfile status | awk '/pushed/ {print $NF}' &amp;gt; /tmp/list
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit .gitattributes to replace the filter. Replace &lt;cite&gt;filter=bigfile -crlf&lt;/cite&gt; with &lt;cite&gt;filter=lfs diff=lfs merge=lfs -text&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat .gitattributes
*.tar.bz2 filter=lfs diff=lfs merge=lfs -text
*.iso filter=lfs diff=lfs merge=lfs -text
*.img filter=lfs diff=lfs merge=lfs -text
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Remove all big files from the staging area and add them back with git-lfs:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git rm --cached $(cat /tmp/list)
$ git add .
$ git commit -m "Switch to git-lfs"
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Check that the files were added using git-lfs. You should see something
like that:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git show HEAD
diff --git a/CentOS_6.4/images/install.img
b/CentOS_6.4/images/install.img
index 227ea55..a9cc6a8 100644
--- a/CentOS_6.4/images/install.img
+++ b/CentOS_6.4/images/install.img
@@ -1 +1,3 @@
-5d243948497ceb9f07b033da62498e52269f4b83
+version https://git-lfs.github.com/spec/v1
+oid
sha256:6fcaac620b82e38e2092a6353ca766a3b01fba7f3fd6a0397c57e979aa293db0
+size 133255168
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Remove git-bigfile cache directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ rm -rf .git/bigfile
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: to push files larger than 2.1GB to your gitlab server, wait for this
&lt;a class="reference external" href="https://gitlab.com/gitlab-org/gitlab-ce/issues/12745"&gt;fix&lt;/a&gt;. Hopefully
it will be in 8.4.3.&lt;/p&gt;&lt;/div&gt;</description><category>git</category><guid>http://beenje.github.io/blog/posts/switching-from-git-bigfile-to-git-lfs/</guid><pubDate>Sat, 30 Jan 2016 20:55:32 GMT</pubDate></item><item><title>crontab and date</title><link>http://beenje.github.io/blog/posts/crontab-and-date/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;The other day, I wanted to add a script to the crontab and to redirect the
output to a file including the current date. Easy. I have used the
&lt;cite&gt;date&lt;/cite&gt; command many times in bash script like that:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
current_date=$(date +"%Y%m%dT%H%M")
&lt;/pre&gt;
&lt;p&gt;So I added the following to my crontab:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
0 1 * * * /usr/local/bin/foo &amp;gt; /tmp/foo.$(date +%Y%m%dT%H%M).log 2&amp;gt;&amp;amp;1
&lt;/pre&gt;
&lt;p&gt;And... it didn't work...&lt;/p&gt;
&lt;p&gt;I quickly identified that the script was working properly when run from the
crontab (it's easy to get a script working from the prompt, not running
from the crontab due to incorrect PATH). The problem was the redirection
but I couldn't see why.&lt;/p&gt;
&lt;p&gt;I googled a bit but didn't find anything...&lt;/p&gt;
&lt;p&gt;I finally looked at the man pages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$  man 5 crontab

     ...
     The  ``sixth''  field  (the  rest of the line) specifies the command to be run.  The entire command portion of the line, up to a
     newline or % character...
&lt;/pre&gt;
&lt;p&gt;Here it was of course! &lt;cite&gt;%&lt;/cite&gt; is a special character. It needs to be escaped:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
0 1 * * * /usr/local/bin/foo &amp;gt; /tmp/foo.$(date +\%Y\%m\%dT\%H\%M).log 2&amp;gt;&amp;amp;1
&lt;/pre&gt;
&lt;p&gt;Lesson to remember: check the man pages before to google!&lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>cron</category><category>linux</category><guid>http://beenje.github.io/blog/posts/crontab-and-date/</guid><pubDate>Mon, 18 Jan 2016 21:42:39 GMT</pubDate></item><item><title>Compile and install Kodi on iPad without jailbreak</title><link>http://beenje.github.io/blog/posts/compile-and-install-kodi-on-ipad-without-jailbreak/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;With iOS 9 and Xcode 7 it's finally possible to compile and deploy apps on
your iPhone/iPad with a free Apple developer account (no paid membership
required).&lt;/p&gt;
&lt;p&gt;I compiled XBMC/Kodi many times on my mac but had never signed an app with
Xcode before and it took me some time to get it right.
So here are my notes:&lt;/p&gt;
&lt;p&gt;First thanks to memphiz for the &lt;a class="reference external" href="http://forum.kodi.tv/showthread.php?tid=239610"&gt;iOS9 support&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I compiled from his ios9_workaround branch, but it has been &lt;a class="reference external" href="https://github.com/xbmc/xbmc/pull/8250"&gt;merged&lt;/a&gt; to
master since:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://github.com/xbmc/xbmc.git Kodi
$ cd Kodi
$ git remote add memphiz https://github.com/Memphiz/xbmc.git
$ git fetch memphiz
$ git checkout -b ios9_workaround memphiz/ios9_workaround
&lt;/pre&gt;
&lt;p&gt;Follow the instructions from the README.ios file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git submodule update --init addons/skin.re-touched
$ cd tools/depends
$ ./bootstrap
$ ./configure --host=arm-apple-darwin
$ make -j4
$ make -j4 -C target/binary-addons
$ cd ../..
$ make -j4 -C tools/depends/target/xbmc
$ make clean
$ make -j4 xcode_depends
&lt;/pre&gt;
&lt;p&gt;Start Xcode and open the Kodi project.
Open the Preferences, and add your Apple ID if not already
done:&lt;/p&gt;
&lt;img alt="/images/add_account.png" src="http://beenje.github.io/blog/images/add_account.png"&gt;
&lt;p&gt;Select the Kodi-iOS target:&lt;/p&gt;
&lt;img alt="/images/kodi_ios_target.png" src="http://beenje.github.io/blog/images/kodi_ios_target.png"&gt;
&lt;p&gt;Change the bundle identifier to something unique and click on &lt;em&gt;Fix Issue&lt;/em&gt;
to create a provisioning profile.&lt;/p&gt;
&lt;img alt="/images/bundle_identifier.png" src="http://beenje.github.io/blog/images/bundle_identifier.png"&gt;
&lt;p&gt;Connect your device to your mac and select it:&lt;/p&gt;
&lt;img alt="/images/device.png" src="http://beenje.github.io/blog/images/device.png"&gt;
&lt;p&gt;Click on &lt;em&gt;Run&lt;/em&gt; to compile and install Kodi on your device!&lt;/p&gt;&lt;/div&gt;</description><category>iOS</category><category>iPad</category><category>iPhone</category><category>kodi</category><category>Mac</category><category>OSX</category><category>Xcode</category><guid>http://beenje.github.io/blog/posts/compile-and-install-kodi-on-ipad-without-jailbreak/</guid><pubDate>Sun, 10 Jan 2016 21:10:42 GMT</pubDate></item></channel></rss>