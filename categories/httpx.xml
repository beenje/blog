<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tchut-Tchut Blog (Posts about httpx)</title><link>http://beenje.github.io/blog/</link><description></description><atom:link href="http://beenje.github.io/blog/categories/httpx.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:beenje@gmail.com"&gt;Benjamin Bertrand&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Wed, 06 Jan 2021 08:21:41 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Building a GitLab bot using gidgetlab, Starlette and HTTPX</title><link>http://beenje.github.io/blog/posts/building-a-gitlab-bot-using-gidgetlab-starlette-and-httpx/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I previously described how to create a &lt;a class="reference external" href="http://beenje.github.io/blog/posts/building-a-gitlab-bot-using-gidgetlab-and-aiohttp"&gt;GitLab bot using gidgetlab and aiohttp&lt;/a&gt;.
I recently read and became curious about &lt;a class="reference external" href="https://fastapi.tiangolo.com"&gt;FastAPI&lt;/a&gt; and &lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt;. The latter seemed
like a good fit for a GitLab bot and a nice way to experiment with it for me.&lt;/p&gt;
&lt;p&gt;If you haven't heard about &lt;a class="reference external" href="https://gidgetlab.readthedocs.io/en/latest/"&gt;gidgetlab&lt;/a&gt;, I recommend starting with my &lt;a class="reference external" href="http://beenje.github.io/blog/posts/building-a-gitlab-bot-using-gidgetlab-and-aiohttp"&gt;previous post&lt;/a&gt;.
I won't explain again how to create an access token or configure a webhook.&lt;/p&gt;
&lt;p&gt;To build a bot, we need both an HTTP client and server. &lt;a class="reference external" href="https://docs.aiohttp.org/en/stable/"&gt;aiohttp&lt;/a&gt; provides both.
&lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt; is a lightweight &lt;a class="reference external" href="https://asgi.readthedocs.io/en/latest/"&gt;ASGI&lt;/a&gt; framework. It doesn't include an HTTP client.
&lt;a class="reference external" href="https://gidgetlab.readthedocs.io/en/latest/"&gt;gidgetlab&lt;/a&gt; supports several HTTP clients. I recently added &lt;a class="reference external" href="https://www.python-httpx.org"&gt;HTTPX&lt;/a&gt;, thanks to &lt;a class="reference external" href="https://gidgethub.readthedocs.io/en/latest/"&gt;gidgethub&lt;/a&gt; once again.
It's described as the next-generation HTTP client for Python and will play well with &lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's start by a small example on how to use &lt;a class="reference external" href="https://gidgetlab.readthedocs.io/en/latest/"&gt;gidgetlab&lt;/a&gt; with &lt;a class="reference external" href="https://www.python-httpx.org"&gt;HTTPX&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="using-gidgetlab-with-httpx-on-the-command-line"&gt;
&lt;h2&gt;Using gidgetlab with HTTPX on the command line&lt;/h2&gt;
&lt;div class="section" id="install-gidgetlab-and-httpx"&gt;
&lt;h3&gt;Install gidgetlab and httpx&lt;/h3&gt;
&lt;p&gt;Install &lt;code class="docutils literal"&gt;gidgetlab&lt;/code&gt; and &lt;code class="docutils literal"&gt;httpx&lt;/code&gt; if you have not already. Using a virtual environment
is recommended.&lt;/p&gt;
&lt;pre class="literal-block"&gt;python3 -m pip install gidgetlab[httpx]&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-issue"&gt;
&lt;h3&gt;Create an issue&lt;/h3&gt;
&lt;p&gt;We'll use the same example as in the &lt;a class="reference external" href="http://beenje.github.io/blog/posts/building-a-gitlab-bot-using-gidgetlab-and-aiohttp"&gt;previous post&lt;/a&gt; but replace &lt;a class="reference external" href="https://docs.aiohttp.org/en/stable/"&gt;aiohttp&lt;/a&gt; with &lt;a class="reference external" href="https://www.python-httpx.org"&gt;httpx&lt;/a&gt;.
Copy the following into the file &lt;code class="docutils literal"&gt;create_issue.py&lt;/code&gt; using your favorite editor:&lt;/p&gt;
&lt;pre class="literal-block"&gt;import asyncio
import os
import httpx
import gidgetlab.httpx


async def main():
    async with httpx.AsyncClient() as client:
        gl = gidgetlab.httpx.GitLabAPI(
            client, "gidgetlab", access_token=os.environ.get("GL_ACCESS_TOKEN")
        )
        await gl.post(
            "/projects/beenje%2Fstrange-relationship/issues",
            data={
                "title": "We got a problem",
                "description": "You should use HTTPX!",
            })


asyncio.run(main())&lt;/pre&gt;
&lt;p&gt;If you check the example with &lt;a class="reference external" href="https://docs.aiohttp.org/en/stable/"&gt;aiohttp&lt;/a&gt; from my previous post, you can see it's pretty similar.&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ diff -u aiohttp_create_issue.py create_issue.py
--- aiohttp_create_issue.py 2020-05-31 21:31:52.000000000 +0200
+++ create_issue.py 2020-05-31 21:26:19.000000000 +0200
@@ -1,12 +1,14 @@
 import asyncio
 import os
-import aiohttp
-from gidgetlab.aiohttp import GitLabAPI
+import httpx
+import gidgetlab.httpx


 async def main():
-    async with aiohttp.ClientSession() as session:
-        gl = GitLabAPI(session, "beenje", access_token=os.getenv("GL_ACCESS_TOKEN"))
+    async with httpx.AsyncClient() as client:
+        gl = gidgetlab.httpx.GitLabAPI(
+            client, "gidgetlab", access_token=os.environ.get("GL_ACCESS_TOKEN")
+        )
         await gl.post(
             "/projects/beenje%2Fstrange-relationship/issues",
             data={
@@ -15,5 +17,4 @@
             })


-loop = asyncio.get_event_loop()
-loop.run_until_complete(main()
+asyncio.run(main())&lt;/pre&gt;
&lt;p&gt;The only real difference is the use of &lt;code class="docutils literal"&gt;async with httpx.AsyncClient() as client&lt;/code&gt; instead of
&lt;code class="docutils literal"&gt;async with aiohttp.ClientSession() as session&lt;/code&gt;.
&lt;code class="docutils literal"&gt;asyncio.run()&lt;/code&gt; was introduced in Python 3.7 and is the new way to run an async function.&lt;/p&gt;
&lt;p&gt;Save the file and run it in the command line after exporting your GitLab access token.&lt;/p&gt;
&lt;p&gt;In Unix / Mac OS:&lt;/p&gt;
&lt;pre class="literal-block"&gt;export GL_ACCESS_TOKEN=&amp;lt;your token&amp;gt;&lt;/pre&gt;
&lt;p&gt;In Windows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;set GL_ACCESS_TOKEN=&amp;lt;your token&amp;gt;&lt;/pre&gt;
&lt;pre class="literal-block"&gt;python3 -m create_issue&lt;/pre&gt;
&lt;p&gt;There should be a new issue created in the strange-relationship project. Check it out:
&lt;a class="reference external" href="https://gitlab.com/beenje/strange-relationship/issues"&gt;https://gitlab.com/beenje/strange-relationship/issues&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="using-starlette-to-build-a-gitlab-bot"&gt;
&lt;h2&gt;Using Starlette to build a GitLab bot&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gidgetlab.readthedocs.io/en/latest/"&gt;gidgetlab&lt;/a&gt; provides a &lt;a class="reference external" href="https://gidgetlab.readthedocs.io/en/latest/aiohttp.html"&gt;GitLabBot class&lt;/a&gt; to create an aiohttp
web server that reponds to GitLab webhooks.
Let's build the equivalent of the following aiohttp based bot with &lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;from gidgetlab.aiohttp import GitLabBot

bot = GitLabBot("beenje")


@bot.router.register("Issue Hook", action="open")
async def issue_opened_event(event, gl, *args, **kwargs):
    """Whenever an issue is opened, greet the author and say thanks."""
    url = f"/projects/{event.project_id}/issues/{event.object_attributes['iid']}/notes"
    message = f"Thanks for the report @{event.data['user']['username']}! I will look into it ASAP! (I'm a bot)."
    await gl.post(url, data={"body": message})


if __name__ == "__main__":
    bot.run()&lt;/pre&gt;
&lt;div class="section" id="starlette-bot"&gt;
&lt;h3&gt;Starlette bot&lt;/h3&gt;
&lt;p&gt;In the same virtual environment as before install &lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt; and uvicorn:&lt;/p&gt;
&lt;pre class="literal-block"&gt;python3 -m pip install starlette uvicorn&lt;/pre&gt;
&lt;p&gt;Save the following in a file named &lt;code class="docutils literal"&gt;bot.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;import os
import httpx
import gidgetlab.routing
import gidgetlab.sansio
import gidgetlab.httpx
from starlette.applications import Starlette
from starlette.requests import Request
from starlette.responses import Response
from starlette.routing import Route

router = gidgetlab.routing.Router()


@router.register("Issue Hook", action="open")
async def issue_opened_event(event, gl, *args, **kwargs):
    """Whenever an issue is opened, greet the author and say thanks."""
    url = f"/projects/{event.project_id}/issues/{event.object_attributes['iid']}/notes"
    message = f"Thanks for the report @{event.data['user']['username']}! I will look into it ASAP! (I'm a bot)."
    await gl.post(url, data={"body": message})


async def webhook(request: Request) -&amp;gt; Response:
    """Handler that processes GitLab webhook requests"""
    body = await request.body()
    secret = os.environ.get("GL_SECRET")
    event = gidgetlab.sansio.Event.from_http(request.headers, body, secret=secret)
    async with httpx.AsyncClient() as client:
        gl = gidgetlab.httpx.GitLabAPI(
            client, "gidgetlab", access_token=os.environ.get("GL_ACCESS_TOKEN")
        )
        await router.dispatch(event, gl)
    return Response(status_code=200)


app = Starlette(routes=[Route("/", webhook, methods=["POST"])])&lt;/pre&gt;
&lt;p&gt;The Issue Hook handler is exactly the same as when using aiohttp.
gidgetlab abstracts away the HTTP client used.
To implement the bot, the only thing needed is an endpoint to handle webhook POST requests.&lt;/p&gt;
&lt;p&gt;Run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;uvicorn --reload bot:app
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [40232] using statreload
INFO:     Started server process [40234]
INFO:     Waiting for application startup.
INFO:     Application startup complete.&lt;/pre&gt;
&lt;p&gt;That's it. We have an ASGI server running on port 8000 that can receive events from GitLab.
We could test it by using ngrok as in the previous post.
This time we'll just fake some events using &lt;a class="reference external" href="https://httpie.org"&gt;httpie&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-with-httpie"&gt;
&lt;h3&gt;Testing with httpie&lt;/h3&gt;
&lt;p&gt;For testing purpose, let's add a dummy event handler that is easy to trigger.&lt;/p&gt;
&lt;pre class="literal-block"&gt;@router.register("Push Hook")
async def dummy_action_on_push(event, gl, *args, **kwargs):
    print(f"Received {event.event}")
    print("Triggering some action...")
    await gl.sleep(1)
    print("Action done")&lt;/pre&gt;
&lt;p&gt;In one terminal, run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;uvicorn --reload bot:app&lt;/pre&gt;
&lt;p&gt;In another one:&lt;/p&gt;
&lt;pre class="literal-block"&gt;http POST 127.0.0.1:8000  "X-Gitlab-Event:Push Hook" Content-Type:application/json&lt;/pre&gt;
&lt;p&gt;You should see the following output in each respective terminal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;Received Push Hook
Triggering some action...
Action done
INFO:     127.0.0.1:58814 - "POST / HTTP/1.1" 200 OK

HTTP/1.1 200 OK
date: Wed, 27 May 2020 20:39:02 GMT
server: uvicorn
transfer-encoding: chunked&lt;/pre&gt;
&lt;p&gt;If you want to use a secret you should pass it on both sides:&lt;/p&gt;
&lt;pre class="literal-block"&gt;export GL_SECRET=12345
uvicorn --reload bot:app


http POST 127.0.0.1:8000 x-gitlab-token:12345 "X-Gitlab-Event:Push Hook" Content-Type:application/json&lt;/pre&gt;
&lt;p&gt;You can see both examples on the following screenshot.&lt;/p&gt;
&lt;img alt="/images/gitlab-bot-starlette/httpie-push-hook.png" src="http://beenje.github.io/blog/images/gitlab-bot-starlette/httpie-push-hook.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="starlette-startup-and-shutdown-events"&gt;
&lt;h3&gt;Starlette startup and shutdown events&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt; can register event handlers to run on startup and shutdown.
Instead of creating a new httpx client on every new request, we could re-use the same.&lt;/p&gt;
&lt;pre class="literal-block"&gt;async def create_client() -&amp;gt; None:
    """Startup handler that creates the GitLabAPI instance"""
    client = httpx.AsyncClient()
    app.state.gl = gidgetlab.httpx.GitLabAPI(
        client, "gidgetlab", access_token=os.environ.get("GL_ACCESS_TOKEN")
    )


async def close_client() -&amp;gt; None:
    """Shutdown handler that closes the httpx client"""
    await app.state.gl._client.aclose()


async def webhook(request: Request) -&amp;gt; Response:
    """Handler that processes GitLab webhook requests"""
    body = await request.body()
    secret = os.environ.get("GL_SECRET")
    event = gidgetlab.sansio.Event.from_http(request.headers, body, secret=secret)
    await router.dispatch(event, request.app.state.gl)
    return Response(status_code=200)


app = Starlette(
    routes=[Route("/", webhook, methods=["POST"])],
    on_startup=[create_client],
    on_shutdown=[close_client],
)&lt;/pre&gt;
&lt;p&gt;In the &lt;code class="docutils literal"&gt;create_client&lt;/code&gt; function, we also store the GitLabAPI instance on the &lt;code class="docutils literal"&gt;app.state&lt;/code&gt;.
This allows us to access it using &lt;code class="docutils literal"&gt;request.app&lt;/code&gt; in the request and to close the httpx client on application shutdown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background-tasks"&gt;
&lt;h3&gt;Background tasks&lt;/h3&gt;
&lt;p&gt;In the above code, the &lt;code class="docutils literal"&gt;Response&lt;/code&gt; is only sent when all the dispatched event handlers have been executed.
Some event handlers might take some time to run if you trigger many actions or you might want to sleep
(&lt;code class="docutils literal"&gt;asyncio.sleep&lt;/code&gt; of course not to block the event loop) between different actions.
You probably noticed that's actually exactly what I did in my dummy push hook handler.&lt;/p&gt;
&lt;p&gt;To illustrate that let's increase the sleep and print the date in our handler:&lt;/p&gt;
&lt;pre class="literal-block"&gt;import datetime


@router.register("Push Hook")
async def dummy_action_on_push(event, gl, *args, **kwargs):
    print(f"Received {event.event}")
    print(f"Triggering some action at {datetime.datetime.utcnow()}...")
    await gl.sleep(5)
    print(f"Action done at {datetime.datetime.utcnow()}")&lt;/pre&gt;
&lt;p&gt;If we send a Push Hook event, we'll only get a response after 5 seconds. Not great...
We can see that the server isn't blocked. We can send several requests and they are
all processed in parallel. But the response is only sent after the event handler is done.&lt;/p&gt;
&lt;img alt="/images/gitlab-bot-starlette/event-blocking-response.png" src="http://beenje.github.io/blog/images/gitlab-bot-starlette/event-blocking-response.png"&gt;
&lt;p&gt;&lt;em&gt;Action done&lt;/em&gt; is printed before the 200 is sent.&lt;/p&gt;
&lt;p&gt;When receiving a webhook, you should send the HTTP response as fast as possible.
This is stated in GitLab's &lt;a class="reference external" href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#webhook-endpoint-tips"&gt;documentation&lt;/a&gt;:
Your endpoint should &lt;strong&gt;send its HTTP response as fast as possible&lt;/strong&gt;.
If you wait too long, GitLab may decide the hook failed and retry it.&lt;/p&gt;
&lt;p&gt;One way to achieve that would be to use a task queue like &lt;a class="reference external" href="http://celeryproject.org"&gt;Celery&lt;/a&gt; or &lt;a class="reference external" href="https://python-rq.org"&gt;RQ&lt;/a&gt; to run the event handlers.
I'm actually using &lt;a class="reference external" href="https://python-rq.org"&gt;RQ&lt;/a&gt; in an aiohttp bot I created.&lt;/p&gt;
&lt;p&gt;A nice feature of &lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt; is that you can attach a &lt;a class="reference external" href="https://www.starlette.io/background/"&gt;background task&lt;/a&gt; to a response.
We can thus run the &lt;code class="docutils literal"&gt;dispatch&lt;/code&gt; function as a &lt;code class="docutils literal"&gt;BackgroundTask&lt;/code&gt;. This will ensure that the response is sent
as soon as the event has been received and parsed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;from starlette.background import BackgroundTask


async def webhook(request: Request) -&amp;gt; Response:
    """Handler that processes GitLab webhook requests"""
    body = await request.body()
    secret = os.environ.get("GL_SECRET")
    event = gidgetlab.sansio.Event.from_http(request.headers, body, secret=secret)
    task = BackgroundTask(router.dispatch, event, request.app.state.gl)
    return Response(status_code=200, background=task)&lt;/pre&gt;
&lt;p&gt;If we perform the same test as before we see that the event is dispatched only after the response was sent.
It doesn't matter how long each handler takes.&lt;/p&gt;
&lt;img alt="/images/gitlab-bot-starlette/event-background-task.png" src="http://beenje.github.io/blog/images/gitlab-bot-starlette/event-background-task.png"&gt;
&lt;p&gt;&lt;em&gt;Received Push Hook&lt;/em&gt; is printed after the 200 is sent.&lt;/p&gt;
&lt;p&gt;Of course handlers shouldn't block the event loop!
As &lt;code class="docutils literal"&gt;router.dispatch&lt;/code&gt; is an async function, &lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt; will just await on it.
If an event handler is performing some blocking action, it should be run in a thread or process pool.
Otherwise the above code is all that is required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="better-error-handling"&gt;
&lt;h3&gt;Better error handling&lt;/h3&gt;
&lt;p&gt;One thing we didn't pay attention to is error handling.
What happens if &lt;code class="docutils literal"&gt;gidgetlab.sansio.Event.from_http&lt;/code&gt; raises an Exception?
&lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt; will return a 500 (Internal Server Error) HTTP response.
That's the proper thing to do.
&lt;strong&gt;Your endpoint should ALWAYS return a valid HTTP response&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But in the bot logs, we can see that exception. Not very clean.&lt;/p&gt;
&lt;img alt="/images/gitlab-bot-starlette/unhandled-exception.png" src="http://beenje.github.io/blog/images/gitlab-bot-starlette/unhandled-exception.png"&gt;
&lt;p&gt;We should catch those exceptions and handle them properly.&lt;/p&gt;
&lt;pre class="literal-block"&gt;from starlette.responses import Response, PlainTextResponse


async def webhook(request: Request) -&amp;gt; Response:
    """Handler that processes GitLab webhook requests"""
    body = await request.body()
    secret = os.environ.get("GL_SECRET")
    try:
        event = gidgetlab.sansio.Event.from_http(request.headers, body, secret=secret)
    except gidgetlab.HTTPException as e:
        return PlainTextResponse(status_code=e.status_code, content=str(e))
    except gidgetlab.GitLabException as e:
        return PlainTextResponse(status_code=500, content=str(e))
    task = BackgroundTask(router.dispatch, event, request.app.state.gl)
    return Response(status_code=200, background=task)&lt;/pre&gt;
&lt;img alt="/images/gitlab-bot-starlette/handle-exceptions.png" src="http://beenje.github.io/blog/images/gitlab-bot-starlette/handle-exceptions.png"&gt;
&lt;p&gt;Much nicer now! Everything is in place for a production ready bot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really enjoyed working with &lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt;. It made building a GitLab bot with &lt;a class="reference external" href="https://gidgetlab.readthedocs.io/en/latest/"&gt;gidgetlab&lt;/a&gt; very easy.
We saw how to use &lt;a class="reference external" href="https://www.starlette.io/events/"&gt;Events&lt;/a&gt; and
&lt;a class="reference external" href="https://www.starlette.io/background/"&gt;Backroung Tasks&lt;/a&gt;. Being able to run the &lt;code class="docutils literal"&gt;dispatch&lt;/code&gt; function
in the background is really perfect for our bot.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python-httpx.org"&gt;HTTPX&lt;/a&gt; and &lt;a class="reference external" href="https://www.starlette.io"&gt;Starlette&lt;/a&gt; are definitvely my go-to frameworks for my next bot!&lt;/p&gt;
&lt;p&gt;You can find the full source code used in this post on both GitLab and GitHub:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gitlab.com/beenje/gitlab-bot-starlette"&gt;https://gitlab.com/beenje/gitlab-bot-starlette&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/beenje/gitlab-bot-starlette"&gt;https://github.com/beenje/gitlab-bot-starlette&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>asyncio</category><category>bot</category><category>gidgetlab</category><category>gitlab</category><category>httpie</category><category>httpx</category><category>python</category><category>starlette</category><guid>http://beenje.github.io/blog/posts/building-a-gitlab-bot-using-gidgetlab-starlette-and-httpx/</guid><pubDate>Sun, 31 May 2020 19:51:53 GMT</pubDate></item></channel></rss>