<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tchut-Tchut Blog (Posts about Mac)</title><link>http://beenje.github.io/blog/</link><description></description><atom:link href="http://beenje.github.io/blog/categories/mac.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:beenje@gmail.com"&gt;Benjamin Bertrand&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Wed, 06 Jan 2021 06:44:04 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using epics-base with conda on Linux, macOS and Windows</title><link>http://beenje.github.io/blog/posts/using-epics-base-with-conda-on-linux-macos-and-windows/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I previously described how to create a &lt;a class="reference external" href="http://beenje.github.io/blog/posts/how-to-setup-a-windows-vm-to-build-conda-packages"&gt;Windows VM to build conda packages&lt;/a&gt;.
I mentioned this was to update the conda-forge &lt;a class="reference external" href="https://github.com/conda-forge/epics-base-feedstock"&gt;epics-base feedstock&lt;/a&gt;.
In this post, I want to share how to use &lt;a class="reference external" href="https://github.com/epics-base/epics-base"&gt;EPICS Base&lt;/a&gt; with &lt;a class="reference external" href="https://docs.conda.io/en/latest/"&gt;conda&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="acknowledgement"&gt;
&lt;h2&gt;Acknowledgement&lt;/h2&gt;
&lt;p&gt;I'm not the original author of the &lt;a class="reference external" href="https://github.com/conda-forge/epics-base-feedstock"&gt;epics-base feedstock&lt;/a&gt;.
I want to thank all the people who contributed to that conda recipe.&lt;/p&gt;
&lt;p&gt;All the examples of &lt;a class="reference external" href="https://epics.anl.gov"&gt;EPICS&lt;/a&gt; usage below come directly from the official website
&lt;a class="reference external" href="https://epics-controls.org/resources-and-support/documents/getting-started/"&gt;Getting Started page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="miniconda"&gt;
&lt;h2&gt;Miniconda&lt;/h2&gt;
&lt;p&gt;This post assumes some basic knowledge of &lt;a class="reference external" href="https://docs.conda.io/en/latest/"&gt;conda&lt;/a&gt;.
If you never used it before, I recommend starting by checking the &lt;a class="reference external" href="https://docs.conda.io/en/latest/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you don't have &lt;cite&gt;conda&lt;/cite&gt; already installed, here are some quick instructions.
Refer to the &lt;a class="reference external" href="https://conda.io/projects/conda/en/latest/user-guide/install/index.html"&gt;official documentation&lt;/a&gt;
for more detailed information.&lt;/p&gt;
&lt;div class="section" id="linux"&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;Note that &lt;cite&gt;bzip2&lt;/cite&gt; is required to run the installation.&lt;/p&gt;
&lt;pre class="literal-block"&gt;curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash Miniconda3-latest-Linux-x86_64.sh -bp $HOME/miniconda
rm -f Miniconda3-latest-Linux-x86_64.sh
# Let conda update your ~/.bashrc
source $HOME/miniconda/bin/activate
conda init&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="macos"&gt;
&lt;h3&gt;macOS&lt;/h3&gt;
&lt;pre class="literal-block"&gt;curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
bash Miniconda3-latest-MacOSX-x86_64.sh -bp $HOME/miniconda
rm -f Miniconda3-latest-MacOSX-x86_64.sh
# Let conda update your ~/.bash_profile
source $HOME/miniconda/bin/activate
conda init&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="windows"&gt;
&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;Download and run the Miniconda3 installer from &lt;a class="reference external" href="https://docs.conda.io/en/latest/miniconda.html#windows-installers"&gt;https://docs.conda.io/en/latest/miniconda.html#windows-installers&lt;/a&gt;.
To use conda, open the Anaconda Prompt from the start menu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;On Linux and macOS, if you don't want conda to activate the base environment by default (and modify your PATH),
you should run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;conda config --set auto_activate_base false&lt;/pre&gt;
&lt;p&gt;This doesn't really apply to Windows as you have to start the Anaconda Prompt to use conda.&lt;/p&gt;
&lt;p&gt;To be able to install package from &lt;a class="reference external" href="https://conda-forge.org"&gt;conda-forge&lt;/a&gt;,
add the &lt;cite&gt;conda-forge&lt;/cite&gt; channel to your configuration. This applies to all platforms.&lt;/p&gt;
&lt;pre class="literal-block"&gt;conda config --add channels conda-forge&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-epics-base"&gt;
&lt;h2&gt;Installing epics-base&lt;/h2&gt;
&lt;div class="section" id="environment-creation"&gt;
&lt;h3&gt;Environment creation&lt;/h3&gt;
&lt;p&gt;Now that we have conda installed and configured, getting &lt;cite&gt;epics-base&lt;/cite&gt; is as easy
as running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;conda create -y -n epics epics-base&lt;/pre&gt;
&lt;p&gt;Note that you don't need any compiler or to install any other packages.
The only requirement is conda.
As of may 2020, the version installed should be 7.0.3.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="environment-activation"&gt;
&lt;h3&gt;Environment activation&lt;/h3&gt;
&lt;p&gt;To start using &lt;a class="reference external" href="https://epics.anl.gov"&gt;EPICS&lt;/a&gt;, activate the environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;conda activate epics&lt;/pre&gt;
&lt;p&gt;You now have access to all the binaries provided by epics-base:&lt;/p&gt;
&lt;pre class="literal-block"&gt;caget -h
pvget -h
softIocPVA
epics&amp;gt; exit&lt;/pre&gt;
&lt;p&gt;On Windows, there is currently a small issue. If you run &lt;code class="docutils literal"&gt;softIocPVA &lt;span class="pre"&gt;-h&lt;/span&gt;&lt;/code&gt;,
you will see that the compiled-in path to softIocPVA.dbd is incorrect:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(epics) C:\Users\IEUser&amp;gt;softIocPVA -h
Usage: softIocPVA [-D softIoc.dbd] [-h] [-S] [-a ascf]
        [-m macro=value,macro2=value2] [-d file.db]
        [-x prefix] [st.cmd]
Compiled-in path to softIocPVA.dbd is:
        D:/bld/epics-base_1588657178544/_h_env/epics/dbd/softIocPVA.dbd&lt;/pre&gt;
&lt;p&gt;The path is the one that was used when the epics-base conda package was created.
Conda usually automatically replaces this &lt;code class="docutils literal"&gt;$PREFIX&lt;/code&gt; variable when creating an environment.
It works on Linux and macOS but not on Windows in this case.
You have to give the explicit path to the dbd manually. You can use the &lt;code class="docutils literal"&gt;%EPICS_BASE%&lt;/code&gt;
environment variable that is automatically set during the activation of the epics environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(epics) C:\Users\IEUser&amp;gt;softIocPVA -D %EPICS_BASE%\dbd\softIocPVA.dbd
epics&amp;gt;&lt;/pre&gt;
&lt;p&gt;Note that if I understand correctly this &lt;a class="reference external" href="https://epics.anl.gov/tech-talk/2020/msg00900.php"&gt;tech-talk message&lt;/a&gt;,
next release should use a relative path and remove this issue.&lt;/p&gt;
&lt;p&gt;After activation, you can see that several EPICS environment variables have been
set. The PATH was also updated. It includes both &lt;code class="docutils literal"&gt;$CONDA_PREFIX/bin&lt;/code&gt; as well
as &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$EPICS_BASE/bin/$EPICS_HOST_ARCH&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(epics) [tux@964ef40cabbb ~]$ env | grep EPICS
EPICS_BASE_HOST_BIN=/home/tux/miniconda/envs/epics/epics/bin/linux-x86_64
EPICS_BASE_VERSION=7.0.3.1
EPICS_BASE=/home/tux/miniconda/envs/epics/epics
EPICS_HOST_ARCH=linux-x86_64
(epics) [tux@964ef40cabbb ~]$ echo $PATH
/home/tux/miniconda/envs/epics/epics/bin/linux-x86_64:/home/tux/miniconda/envs/epics/bin:/home/tux/miniconda/condabin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/tux/.local/bin:/home/tux/bin
(epics) [tux@964ef40cabbb ~]$&lt;/pre&gt;
&lt;p&gt;Those variables are set by the activation script part of the &lt;cite&gt;epics-base&lt;/cite&gt; package.
Running &lt;code class="docutils literal"&gt;conda deactivate&lt;/code&gt; will unset those variables:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(epics) [tux@964ef40cabbb ~]$ conda deactivate
(base) [tux@964ef40cabbb ~]$ env | grep EPICS
(base) [tux@964ef40cabbb ~]$ echo $PATH
/home/tux/miniconda/bin:/home/tux/miniconda/condabin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/tux/.local/bin:/home/tux/bin
(base) [tux@964ef40cabbb ~]$&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="simple-test"&gt;
&lt;h3&gt;Simple test&lt;/h3&gt;
&lt;p&gt;With your editor of choice, create the &lt;cite&gt;test.db&lt;/cite&gt; file that contains:&lt;/p&gt;
&lt;pre class="literal-block"&gt;record(ai, "temperature:water")
{
    field(DESC, "Water temperature in the fish tank")
}&lt;/pre&gt;
&lt;p&gt;Open a terminal and activate the &lt;cite&gt;epics&lt;/cite&gt; environment.&lt;/p&gt;
&lt;p&gt;On Linux and macOS, run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;softIocPVA -d test.db&lt;/pre&gt;
&lt;p&gt;On Windows, run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;softIocPVA -D %EPICS_BASE%\dbd\softIocPVA.dbd -d test.db&lt;/pre&gt;
&lt;p&gt;Open another terminal and run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;CI0011906:~ $ conda activate epics
(epics) CI0011906:~ $ caget temperature:water
temperature:water              0
(epics) CI0011906:~ $ caget temperature:water.DESC
temperature:water.DESC         Water temperature in the fish tank
(epics) CI0011906:~ $ caput temperature:water 21
Old : temperature:water              0
New : temperature:water              21
(epics) CI0011906:~ $ caget temperature:water
temperature:water              21
(epics) CI0011906:~ $&lt;/pre&gt;
&lt;p&gt;The following screenshots show the result on macOS and Windows.&lt;/p&gt;
&lt;img alt="/images/using-epics-base-with-conda/simple-test-macos.png" src="http://beenje.github.io/blog/images/using-epics-base-with-conda/simple-test-macos.png"&gt;
&lt;img alt="/images/using-epics-base-with-conda/simple-test-windows.png" src="http://beenje.github.io/blog/images/using-epics-base-with-conda/simple-test-windows.png"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="compiling-a-demo-ioc"&gt;
&lt;h2&gt;Compiling a demo IOC&lt;/h2&gt;
&lt;p&gt;We saw how to use the binaries that come with epics-base. It's worth mentioning
that you can also compile code using the installed conda package.&lt;/p&gt;
&lt;div class="section" id="pre-requisites"&gt;
&lt;h3&gt;Pre-requisites&lt;/h3&gt;
&lt;p&gt;The pre-requisites are different depending on the platform.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;Linux&lt;/h4&gt;
&lt;p&gt;There is no distribution specific dependencies to install.
All requirements will be installed with conda.&lt;/p&gt;
&lt;p&gt;We could use the existing &lt;cite&gt;epics&lt;/cite&gt; environment but we'll create a new one
to demonstrate that several environments can coexist in parallel.&lt;/p&gt;
&lt;p&gt;Create and activate the &lt;cite&gt;epics-dev&lt;/cite&gt; environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;conda create -y -n epics-dev epics-base make compilers
conda activate epics-dev&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;macOS&lt;/h4&gt;
&lt;p&gt;Conda provides the clang compilers for macOS. But the macOS SDK is still required.
The SDK license prevents it from being bundled in the conda package.
The SDK has to be installed manually. For compatibility issue, conda packages
are built with the 10.9 SDK. To compile code locally that you don't plan
to share, using a more recent version should be fine.&lt;/p&gt;
&lt;div class="section" id="solution-1-current-sdk"&gt;
&lt;h5&gt;Solution 1: current SDK&lt;/h5&gt;
&lt;p&gt;Install Xcode Command Line Tools by running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;xcode-select --install&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-2-10-9-sdk"&gt;
&lt;h5&gt;Solution 2: 10.9 SDK&lt;/h5&gt;
&lt;p&gt;As mentioned in &lt;a class="reference external" href="https://docs.conda.io/projects/conda-build/en/latest/resources/compiler-tools.html#macos-sdk"&gt;conda-build documentation&lt;/a&gt;,
the 10.9 SDK can be downloaded from:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/devernay/xcodelegacy"&gt;https://github.com/devernay/xcodelegacy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/phracker/MacOSX-SDKs"&gt;https://github.com/phracker/MacOSX-SDKs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download &lt;a class="reference external" href="https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.9.sdk.tar.xz"&gt;MacOSX10.9.sdk.tar.xz&lt;/a&gt;
and untar it under &lt;code class="docutils literal"&gt;/opt/MacOSX10.9.sdk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Create and activate the &lt;cite&gt;epics-dev&lt;/cite&gt; environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;conda create -y -n epics-dev epics-base make compilers
conda activate epics-dev&lt;/pre&gt;
&lt;p&gt;Before to be able to compile, two variables have to be set on macOS: &lt;code class="docutils literal"&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt; and
&lt;code class="docutils literal"&gt;CONDA_BUILD_SYSROOT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Those variables are usually set automatically by &lt;cite&gt;conda-build&lt;/cite&gt;. When compiling locally,
you have to set them manually.
&lt;code class="docutils literal"&gt;CONDA_BUILD_SYSROOT&lt;/code&gt; is actually automatically set when activating an environment with
the &lt;cite&gt;compilers&lt;/cite&gt; package. It should detect your Xcode installation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(epics-dev) CI0011906:~ $ echo $CONDA_BUILD_SYSROOT
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk&lt;/pre&gt;
&lt;p&gt;If you installed the 10.9 SDK, you might want to point to that instead:&lt;/p&gt;
&lt;pre class="literal-block"&gt;export CONDA_BUILD_SYSROOT=/opt/MacOSX10.9.sdk&lt;/pre&gt;
&lt;p&gt;The variable &lt;code class="docutils literal"&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt;, you have to set manually:&lt;/p&gt;
&lt;pre class="literal-block"&gt;export MACOSX_DEPLOYMENT_TARGET=10.9&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;Windows&lt;/h4&gt;
&lt;p&gt;On Windows, you need to install the Visual C++ compilers.
You only need to download the &lt;strong&gt;Build Tools for Visual Studio 2017&lt;/strong&gt;. Refer
to the post on &lt;a class="reference external" href="http://beenje.github.io/blog/posts/how-to-setup-a-windows-vm-to-build-conda-packages"&gt;how to setup a Windows VM to build conda packages&lt;/a&gt; for
the instructions on how to install them.&lt;/p&gt;
&lt;p&gt;Create and activate the &lt;cite&gt;epics-dev&lt;/cite&gt; environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;conda create -n epics-dev epics-base epics-base-static-libs make vs2017_win-64
conda activate epics-dev&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;vs2017_win-64&lt;/cite&gt; is a package that contains an activation script to setup VS 2017.
Note that we also need to install the &lt;cite&gt;epics-base-static-libs&lt;/cite&gt; to compile on Windows.
The static libraries were moved to a subpackage to make &lt;cite&gt;epics-base&lt;/cite&gt; package smaller.
They are not needed most of the time on Linux and macOS. Maybe they should be part of
the default package on Windows?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ioc-creation"&gt;
&lt;h3&gt;IOC creation&lt;/h3&gt;
&lt;p&gt;Make sure you activated the &lt;cite&gt;epics-dev&lt;/cite&gt; environment you created.
Note that we didn't have to specify &lt;cite&gt;perl&lt;/cite&gt; when creating the environment.
It's installed with &lt;cite&gt;epics-base&lt;/cite&gt; as run dependency.&lt;/p&gt;
&lt;p&gt;On Linux and macOS:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(epics-dev) CI0011906:~ $ mkdir -p $HOME/EPICS/testIoc
(epics-dev) CI0011906:~ $ cd $HOME/EPICS/testIoc
(epics-dev) CI0011906:~/EPICS/testIoc $ makeBaseApp.pl -t example testIoc
(epics-dev) CI0011906:~/EPICS/testIoc $ makeBaseApp.pl -i -t example testIoc
Using target architecture darwin-x86 (only one available)
The following applications are available:
    testIoc
What application should the IOC(s) boot?
The default uses the IOC's name, even if not listed above.
Application name?
(epics-dev) CI0011906:~/EPICS/testIoc $ make
...
(epics-dev) CI0011906:~/EPICS/testIoc $ cd iocBoot/ioctestIoc
(epics-dev) CI0011906:~/EPICS/testIoc/iocBoot/ioctestIoc $ chmod a+x st.cmd
(epics-dev) CI0011906:~/EPICS/testIoc/iocBoot/ioctestIoc $ ./st.cmd
#!../../bin/darwin-x86/testIoc
&amp;lt; envPaths
epicsEnvSet("IOC","ioctestIoc")
epicsEnvSet("TOP","/Users/benjaminbertrand/EPICS/testIoc")
epicsEnvSet("EPICS_BASE","/Users/benjaminbertrand/miniconda3/envs/epics-dev/epics")
cd "/Users/benjaminbertrand/EPICS/testIoc"
## Register all support components
dbLoadDatabase "dbd/testIoc.dbd"
testIoc_registerRecordDeviceDriver pdbbase
## Load record instances
dbLoadTemplate "db/user.substitutions"
dbLoadRecords "db/testIocVersion.db", "user=benjaminbertrand"
dbLoadRecords "db/dbSubExample.db", "user=benjaminbertrand"
#var mySubDebug 1
#traceIocInit
cd "/Users/benjaminbertrand/EPICS/testIoc/iocBoot/ioctestIoc"
iocInit
Starting iocInit
############################################################################
## EPICS R7.0.3.1
## EPICS Base built May  5 2020
############################################################################
iocRun: All initialization complete
## Start any sequence programs
#seq sncExample, "user=benjaminbertrand"
epics&amp;gt; dbl
benjaminbertrand:testIoc:version
benjaminbertrand:xxxExample
benjaminbertrand:circle:step
benjaminbertrand:circle:period
benjaminbertrand:line:b
benjaminbertrand:aiExample
...&lt;/pre&gt;
&lt;p&gt;On Windows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(epics-dev) C:\Users\IEUser&amp;gt; mkdir EPICS\testIoc
(epics-dev) C:\Users\IEUser&amp;gt; cd EPICS\testIoc
(epics-dev) C:\Users\IEUser\EPICS\testIoc&amp;gt; perl %EPICS_BASE_HOST_BIN%\makeBaseApp.pl -t example testIoc
(epics-dev) C:\Users\IEUser\EPICS\testIoc&amp;gt; perl %EPICS_BASE_HOST_BIN%\makeBaseApp.pl -i -t example testIoc
Using target architecture windows-x64 (only one available)
The following applications are available:
    testIoc
What application should the IOC(s) boot?
The default uses the IOC's name, even if not listed above.
Application name?
(epics-dev) C:\Users\IEUser\EPICS\testIoc&amp;gt; make
...
(epics-dev) C:\Users\IEUser\EPICS\testIoc&amp;gt; cd iocBoot\ioctestIoc
(epics-dev) C:\Users\IEUser\EPICS\testIoc\iocBoot\ioctestIoc&amp;gt; ..\..\bin\windows-x64\testIoc.exe st.cmd
#!../../bin/windows-x64/testIoc
&amp;lt; envPaths
epicsEnvSet("IOC","ioctestIoc")
epicsEnvSet("TOP","C:/Users/IEUser/EPICS/testIoc")
epicsEnvSet("EPICS_BASE","C:/Users/IEUser/miniconda3/envs/epics-dev/epics")
cd "C:/Users/IEUser/EPICS/testIoc"
## Register all support components
dbLoadDatabase "dbd/testIoc.dbd"
testIoc_registerRecordDeviceDriver pdbbase
## Load record instances
dbLoadTemplate "db/user.substitutions"
dbLoadRecords "db/testIocVersion.db", "user=IEUser"
dbLoadRecords "db/dbSubExample.db", "user=IEUser"
#var mySubDebug 1
#traceIocInit
cd "C:/Users/IEUser/EPICS/testIoc/iocBoot/ioctestIoc"
iocInit
Starting iocInit
############################################################################
## EPICS R7.0.3.1
## EPICS Base built May  5 2020
############################################################################
iocRun: All initialization complete
## Start any sequence programs
#seq sncExample, "user=IEUser"
epics&amp;gt; dbl
IEUser:xxxExample
IEUser:circle:angle
IEUser:line:a
IEUser:circle:x
IEUser:circle:y
IEUser:calcExample
...&lt;/pre&gt;
&lt;p&gt;We have a running IOC on all 3 platforms!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I hope this post showed you how easy conda make it to install &lt;a class="reference external" href="https://github.com/epics-base/epics-base"&gt;EPICS Base&lt;/a&gt; on Linux, macOS and Windows.
We saw that this package can also be used to compile an IOC. That being said, if you want to use
various EPICS modules, this is probably not the best solution today. As long as those modules
aren't available as conda packages at least.
But if all you need is &lt;a class="reference external" href="https://github.com/epics-base/epics-base"&gt;EPICS Base&lt;/a&gt;, to interact with IOCs on other machines for example, then I'd
really recommend &lt;a class="reference external" href="https://docs.conda.io/en/latest/"&gt;conda&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>conda</category><category>epics</category><category>linux</category><category>Mac</category><category>python</category><category>windows</category><guid>http://beenje.github.io/blog/posts/using-epics-base-with-conda-on-linux-macos-and-windows/</guid><pubDate>Thu, 07 May 2020 20:33:55 GMT</pubDate></item><item><title>My LEGO Macintosh Classic with Raspberry Pi and e-paper display</title><link>http://beenje.github.io/blog/posts/my-lego-macintosh-classic-with-raspberry-pi-and-e-paper-display/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;UPDATED 2019-11-24&lt;/p&gt;
&lt;p&gt;Beginning of April I read an inspiring blog post from Jannis Hermanns
about a &lt;a class="reference external" href="https://jann.is/lego-macintosh-classic/"&gt;LEGO Machintosh Classic with e-paper display&lt;/a&gt;.  It was a really nice and cool article.&lt;/p&gt;
&lt;p&gt;I've been playing with some Raspberry Pis before but only with
&lt;a class="reference external" href="http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible"&gt;software&lt;/a&gt;.
I have been willing to fiddle with hardware for some time.
This was the perfect opportunity!&lt;/p&gt;
&lt;div class="section" id="lego-digital-designer"&gt;
&lt;h2&gt;LEGO Digital Designer&lt;/h2&gt;
&lt;p&gt;I decided to try to make my own LEGO Macintosh based on Jannis work.
His blog post is quite detailed with even a list of links with all the
required components.&lt;/p&gt;
&lt;p&gt;But I quickly realized there were no LEGO building instructions...
I thus created my own using LEGO Digital Designer, which was fun.
Looking at the pictures on &lt;a class="reference external" href="https://www.flickr.com/photos/_-_/33583084842"&gt;Jannis flickr album&lt;/a&gt;
helped a lot. But having an exact idea of the screen size wasn't easy on
the computer. So I also built a small prototype of the front part to get a
better idea. For that I had to wait for my e-paper display.&lt;/p&gt;
&lt;p&gt;One modification I wanted to do was to use 1U width lego on the side of
the display to require less drilling.
I also wanted to check if it was possible to use the button located on top
of the display.&lt;/p&gt;
&lt;p&gt;My .lxf file is on &lt;a class="reference external" href="https://github.com/beenje/legomac/tree/master/ldd"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/legomac_ldd.png"&gt;&lt;img alt="/images/legomac/legomac_ldd.thumbnail.png" src="http://beenje.github.io/blog/images/legomac/legomac_ldd.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="e-paper-display"&gt;
&lt;h2&gt;E-paper display&lt;/h2&gt;
&lt;p&gt;When I was about to order the &lt;a class="reference external" href="http://www.embeddedartists.com/products/displays/lcd_27_epaper.php"&gt;2.7 inch e-paper display from Embedded Artists&lt;/a&gt;, I
noticed that Embedded Artists was located in MalmÃ¶, where I live :-).&lt;/p&gt;
&lt;p&gt;I e-mailed them and I was granted to pick up my order at their office!
A big thanks to them!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspbery-pi-zero-w"&gt;
&lt;h2&gt;Raspbery Pi Zero W&lt;/h2&gt;
&lt;p&gt;The Raspberry Pi Zero W comes with Wifi which is really nice.
It does not come with the soldered GPIO header. I was starting to look at
existing soldering iron when I discovered this &lt;a class="reference external" href="https://shop.pimoroni.com/products/gpio-hammer-header"&gt;GPIO Hammer Header&lt;/a&gt;:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/gpio_hammer_header.jpg"&gt;&lt;img alt="/images/legomac/gpio_hammer_header.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/gpio_hammer_header.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;No soldering required!
I used the installation jig and it was really easy to install.
There is a nice &lt;a class="reference external" href="https://youtu.be/VDJ2-feg2lk"&gt;video&lt;/a&gt; that explains how
to proceed:&lt;/p&gt;
&lt;iframe width="200" height="113" src="https://www.youtube.com/embed/VDJ2-feg2lk?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="connecting-the-display-to-the-pi"&gt;
&lt;h2&gt;Connecting the display to the Pi&lt;/h2&gt;
&lt;p&gt;Based on Jannis article I initially thought it wasn't possible to use a ribbon
cable (due to space), so I ordered some Jumper Wires.
I connected the display to the Pi using the serial expansion
connector as described in his blog post.
It worked. With the &lt;a class="reference external" href="https://github.com/embeddedartists/gratis"&gt;demo from embeddedartists&lt;/a&gt;, I managed to display a nice cat picture :-)&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/jumper_wires.jpg"&gt;&lt;img alt="/images/legomac/jumper_wires.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/jumper_wires.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/cat.jpg"&gt;&lt;img alt="/images/legomac/cat.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/cat.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;I then realized that the serial expansion connector didn't give access to
the button on top of the display. That button could allow some
interactions, like changing mode, which would be nice.
According to my prototype with 1U width lego on the side, using a ribbon cable shouldn't actually be
an issue. So I ordered a &lt;a class="reference external" href="https://thepihut.com/products/downgrade-gpio-ribbon-cable-for-raspberry-pi-40p-to-26p"&gt;Downgrade GPIO Ribbon Cable for Raspberry Pi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It required a little drilling on the right side for the cable to fit. But
not that much. More is needed on the left side to center the screen.
Carried away by my enthusiasm, I actually cut a bit too much on the left side
(using the dremel was fun :-).&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/drilling_left.jpg"&gt;&lt;img alt="/images/legomac/drilling_left.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/drilling_left.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/drilling_right.jpg"&gt;&lt;img alt="/images/legomac/drilling_right.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/drilling_right.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Everything fitted nicely in the lego case:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/ribbon_cable.jpg"&gt;&lt;img alt="/images/legomac/ribbon_cable.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/ribbon_cable.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="button-on-top"&gt;
&lt;h2&gt;Button on top&lt;/h2&gt;
&lt;p&gt;With the ribbon cable, the button on top of the display is connected to pin
15 on the Raspberry Pi (BCM GPIO22).
The &lt;cite&gt;ImageDemoButton.py&lt;/cite&gt; part of the &lt;a class="reference external" href="https://github.com/embeddedartists/gratis"&gt;demo&lt;/a&gt;
shows an example how to use the button to change the image displayed.&lt;/p&gt;
&lt;p&gt;Using my small prototype, I planned a small hole on top of the case. I thought I'd have to fill
the brick with something hard to press the button. The 1x1 brick ended fitting perfectly.
As shown on the picture below, the side is exactly on top of the button.
I added a little piece of foam inside the brick to keep it straight.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/button_front.jpg"&gt;&lt;img alt="/images/legomac/button_front.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/button_front.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Of course I move away from the Macintosh Classic design here...
but &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;practicality beats purity&lt;/a&gt; :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pi-configuration"&gt;
&lt;h2&gt;Pi configuration&lt;/h2&gt;
&lt;p&gt;Jannis article made me discover &lt;a class="reference external" href="https://resin.io"&gt;resin.io&lt;/a&gt;,
which is a really interesting project. I did a few tests on a Raspberry Pi 3 and it was a nice experience.
But when I received my Pi Zero W, it wasn't supported by resinOS yet... This isn't the case anymore!
Version 2.0.3 added support for the wifi chip.&lt;/p&gt;
&lt;p&gt;Anyway, as Jannis already wrote about resinOS, I'll describe my tests with Raspbian.
To flash the SD card, I recommend &lt;a class="reference external" href="https://etcher.io"&gt;Etcher&lt;/a&gt; which is an open source project by the same resin.io.
I'm more a command line guy and I have used &lt;cite&gt;dd&lt;/cite&gt; many times. But I was pleasantly surprised.
It's easy to install and use.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Download and install &lt;a class="reference external" href="https://etcher.io"&gt;Etcher&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download &lt;a class="reference external" href="https://www.raspberrypi.org/downloads/raspbian/"&gt;Raspbian Buster Lite image&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flash the SD card using Etcher&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mount the SD card to configure it:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;# Go to the boot partition
# This is an example on OSX (mount point will be different on Linux)
$ cd /Volumes/boot

# To enable ssh, create a file named ssh onto the boot partition
$ touch ssh

# Create the file wpa_supplicant.conf with your wifi settings
# Note that for Raspbian Stretch and Buster, you need the first line
# (ctrl_interface...)! This was not the case for Jessie.
$  cat &amp;lt;&amp;lt; EOF &amp;gt; wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
network={
    ssid="MyWifiNetwork"
    psk="password"
    key_mgmt=WPA-PSK
}
EOF

# Uncomment dtparam=spi=on to enable the SPI master driver
$ vi config.txt

# Leave the boot partition
$ cd&lt;/pre&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;&lt;p&gt;Unmount the SD card and put it in the Raspberry Pi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Boot the Pi&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wrote a small Ansible playbook to install the E-ink driver and the clock demo:&lt;/p&gt;
&lt;pre class="literal-block"&gt;- name: install required dependencies
  apt:
    name:
      - git
      - libfuse-dev
      - fonts-liberation
      - python-pil
    state: present
    update_cache: yes

- name: check if the epd-fuse service exists
  command: systemctl status epd-fuse.service
  check_mode: no
  failed_when: False
  changed_when: False
  register: epd_fuse_service

- name: clone the embeddedartists gratis repository
  git:
    repo: https://github.com/embeddedartists/gratis.git
    version: 9b7accc68db23865935b0d90c77a33055483b290
    dest: /home/pi/gratis

- name: build the EPD driver and install the epd-fuse service
  shell: &amp;gt;
    COG_VERSION=V2 make rpi-epd_fuse &amp;amp;&amp;amp;
    COG_VERSION=V2 make rpi-install
  args:
    chdir: /home/pi/gratis/PlatformWithOS
  when: epd_fuse_service.rc != 0

- name: ensure the epd-fuse service is enabled and started
  service:
    name: epd-fuse
    state: started
    enabled: yes

- name: install the epd-clock service
  copy:
    src: epd-clock.service
    dest: /etc/systemd/system/epd-clock.service
    owner: root
    group: root
    mode: 0644

- name: start and enable epd-clock service
  systemd:
    name: epd-clock.service
    daemon_reload: yes
    state: started
    enabled: yes&lt;/pre&gt;
&lt;p&gt;Note that commit &lt;a class="reference external" href="https://github.com/embeddedartists/gratis/commit/282e88f8f642d8086d779c462d248063770482e3"&gt;282e88f&lt;/a&gt; in embeddedartists/gratis repository added support
for the RaspberryPi 3, but broke the PI Zero W.
You currently have to use the commit 9b7accc68 if you have a PI Zero W.&lt;/p&gt;
&lt;p&gt;To run the playbook, clone the repository &lt;a class="reference external" href="https://github.com/beenje/legomac"&gt;https://github.com/beenje/legomac&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git clone https://github.com/beenje/legomac.git
$ cd legomac
$ ansible-playbook -i hosts -k epd-demo.yml&lt;/pre&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;p&gt;Of course don't forget to change the default password on your Pi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-more-thing"&gt;
&lt;h2&gt;One more thing&lt;/h2&gt;
&lt;p&gt;There isn't much Python in this article but the Pi is running some
Python code.
I couldn't resist putting a &lt;a class="reference external" href="https://talkpython.fm"&gt;Talk Python To Me&lt;/a&gt;
sticker on the back :-)
It's really a great podcast and you should definitevely give it a try if
you haven't yet.
Thanks again to @mkennedy for the stickers!&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/talkpythontome.jpg"&gt;&lt;img alt="/images/legomac/talkpythontome.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/talkpythontome.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Below are a few pictures. You can see more on &lt;a class="reference external" href="https://flic.kr/s/aHskVAadfo"&gt;flickr&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 246)&lt;/p&gt;
&lt;p&gt;Unknown directive type "slides".&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. slides::

    /images/legomac/legomac.jpg
    /images/legomac/legomac_front_close.jpg
    /images/legomac/talkpythontome.jpg
    /images/legomac/drilling_left.jpg
    /images/legomac/drilling_right.jpg
    /images/legomac/ribbon_cable.jpg
    /images/legomac/display_front.jpg
    /images/legomac/button_front.jpg
    /images/legomac/button_top.jpg

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next"&gt;
&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;I didn't build this LEGO Macintosh to use it as a simple clock :-)
I have a few ideas. I'll start with a small web server so that I can receive and display messages.
That will be the subject of another &lt;a class="reference external" href="http://beenje.github.io/blog/posts/experimenting-with-asyncio-on-a-raspberry-pi"&gt;blog post&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>lego</category><category>Mac</category><category>pi</category><category>python</category><guid>http://beenje.github.io/blog/posts/my-lego-macintosh-classic-with-raspberry-pi-and-e-paper-display/</guid><pubDate>Tue, 23 May 2017 20:39:12 GMT</pubDate></item><item><title>Compile and install Kodi on iPad without jailbreak</title><link>http://beenje.github.io/blog/posts/compile-and-install-kodi-on-ipad-without-jailbreak/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;With iOS 9 and Xcode 7 it's finally possible to compile and deploy apps on
your iPhone/iPad with a free Apple developer account (no paid membership
required).&lt;/p&gt;
&lt;p&gt;I compiled XBMC/Kodi many times on my mac but had never signed an app with
Xcode before and it took me some time to get it right.
So here are my notes:&lt;/p&gt;
&lt;p&gt;First thanks to memphiz for the &lt;a class="reference external" href="http://forum.kodi.tv/showthread.php?tid=239610"&gt;iOS9 support&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I compiled from his ios9_workaround branch, but it has been &lt;a class="reference external" href="https://github.com/xbmc/xbmc/pull/8250"&gt;merged&lt;/a&gt; to
master since:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git clone https://github.com/xbmc/xbmc.git Kodi
$ cd Kodi
$ git remote add memphiz https://github.com/Memphiz/xbmc.git
$ git fetch memphiz
$ git checkout -b ios9_workaround memphiz/ios9_workaround&lt;/pre&gt;
&lt;p&gt;Follow the instructions from the README.ios file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git submodule update --init addons/skin.re-touched
$ cd tools/depends
$ ./bootstrap
$ ./configure --host=arm-apple-darwin
$ make -j4
$ make -j4 -C target/binary-addons
$ cd ../..
$ make -j4 -C tools/depends/target/xbmc
$ make clean
$ make -j4 xcode_depends&lt;/pre&gt;
&lt;p&gt;Start Xcode and open the Kodi project.
Open the Preferences, and add your Apple ID if not already
done:&lt;/p&gt;
&lt;img alt="/images/add_account.png" src="http://beenje.github.io/blog/images/add_account.png"&gt;
&lt;p&gt;Select the Kodi-iOS target:&lt;/p&gt;
&lt;img alt="/images/kodi_ios_target.png" src="http://beenje.github.io/blog/images/kodi_ios_target.png"&gt;
&lt;p&gt;Change the bundle identifier to something unique and click on &lt;em&gt;Fix Issue&lt;/em&gt;
to create a provisioning profile.&lt;/p&gt;
&lt;img alt="/images/bundle_identifier.png" src="http://beenje.github.io/blog/images/bundle_identifier.png"&gt;
&lt;p&gt;Connect your device to your mac and select it:&lt;/p&gt;
&lt;img alt="/images/device.png" src="http://beenje.github.io/blog/images/device.png"&gt;
&lt;p&gt;Click on &lt;em&gt;Run&lt;/em&gt; to compile and install Kodi on your device!&lt;/p&gt;&lt;/div&gt;</description><category>iOS</category><category>iPad</category><category>iPhone</category><category>kodi</category><category>Mac</category><category>OSX</category><category>Xcode</category><guid>http://beenje.github.io/blog/posts/compile-and-install-kodi-on-ipad-without-jailbreak/</guid><pubDate>Sun, 10 Jan 2016 21:10:42 GMT</pubDate></item></channel></rss>