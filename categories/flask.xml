<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tchut-Tchut Blog (Posts about flask)</title><link>http://beenje.github.io/blog/</link><description></description><atom:link href="http://beenje.github.io/blog/categories/flask.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:beenje@gmail.com"&gt;Benjamin Bertrand&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sun, 03 May 2020 21:40:47 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Running your application over HTTPS with traefik</title><link>http://beenje.github.io/blog/posts/running-your-application-over-https-with-traefik/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I just read another very clear article from Miguel Grinberg about &lt;a class="reference external" href="https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https"&gt;Running Your Flask
Application Over HTTPS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As the title suggests, it describes different ways to run a flask application over HTTPS.
I have been using &lt;a class="reference external" href="http://flask.pocoo.org"&gt;flask&lt;/a&gt; for quite some time, but I didn't even know about
the &lt;cite&gt;ssl_context&lt;/cite&gt; argument. You should definitively check his article!&lt;/p&gt;
&lt;p&gt;Using &lt;a class="reference external" href="https://nginx.org/en/"&gt;nginx&lt;/a&gt; as a reverse proxy with a self-signed certificate or &lt;a class="reference external" href="https://letsencrypt.org"&gt;Let’s
Encrypt&lt;/a&gt; are two options I have been using in the
past.&lt;/p&gt;
&lt;p&gt;If your app is available on the internet, you should definitively use
Let's Encrypt. But if your app is only supposed to be used internally
on a private network, a self-signed certificate is an option.&lt;/p&gt;
&lt;div class="section" id="traefik"&gt;
&lt;h2&gt;Traefik&lt;/h2&gt;
&lt;p&gt;I now often use &lt;a class="reference external" href="https://www.docker.com"&gt;docker&lt;/a&gt; to deploy my applications.
I was looking for a way to automatically configure Let's Encrypt.
I initially found &lt;a class="reference external" href="https://github.com/jwilder/nginx-proxy"&gt;nginx-proxy&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion"&gt;docker-letsencrypt-nginx-proxy-companion&lt;/a&gt;. This
was interesting but wasn't that straight forward to setup.&lt;/p&gt;
&lt;p&gt;I then discovered &lt;a class="reference external" href="https://traefik.io"&gt;traefik&lt;/a&gt;: "a modern HTTP reverse proxy
and load balancer made to deploy microservices with ease". And that's
really the case! I've used it to deploy several applications and I
was impressed. It's written in go, so single binary. There is also a tiny docker
image that makes it easy to deploy. It includes Let's Encrypt support (with automatic renewal),
websocket support (no specific setup required)... And many other features.&lt;/p&gt;
&lt;p&gt;Here is a &lt;cite&gt;traefik.toml&lt;/cite&gt; configuration example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;defaultEntryPoints = ["http", "https"]

[web]
# Port for the status page
address = ":8080"

# Entrypoints, http and https
[entryPoints]
  # http should be redirected to https
  [entryPoints.http]
  address = ":80"
    [entryPoints.http.redirect]
    entryPoint = "https"
  # https is the default
  [entryPoints.https]
  address = ":443"
    [entryPoints.https.tls]

# Enable ACME (Let's Encrypt): automatic SSL
[acme]
# Email address used for registration
email = "test@traefik.io"
storageFile = "/etc/traefik/acme/acme.json"
entryPoint = "https"
onDemand = false
OnHostRule = true
  # Use a HTTP-01 acme challenge rather than TLS-SNI-01 challenge
  [acme.httpChallenge]
  entryPoint = "http"

# Enable Docker configuration backend
[docker]
endpoint = "unix:///var/run/docker.sock"
domain = "example.com"
watch = true
exposedbydefault = false&lt;/pre&gt;
&lt;p&gt;With this simple configuration, you get:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;HTTP redirect on HTTPS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's Encrypt support&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker backend support&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UPDATE (2018-03-04): as mentioned by @jackminardi in the comments, Let's Encrypt &lt;a class="reference external" href="https://community.letsencrypt.org/t/important-what-you-need-to-know-about-tls-sni-validation-issues/50811"&gt;disabled the TLS-SNI
challenges for most new issuance&lt;/a&gt;.
Traefik added &lt;a class="reference external" href="https://github.com/containous/traefik/pull/2701"&gt;support for the HTTP-01 challenge&lt;/a&gt;. I updated the above
configuration to use this validation method: &lt;cite&gt;[acme.httpChallenge]&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-simple-example"&gt;
&lt;h2&gt;A simple example&lt;/h2&gt;
&lt;p&gt;I created a dummy example just to show how to run a flask application over
HTTPS with traefik and Let's Encrypt.
Note that traefik is made to dynamically discover backends. So you usually
don't run it with your app in the same docker-compose.yml file. It usually
runs separately. But to make it easier, I put both in the same file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;version: '2'
services:
  flask:
    build: ./flask
    image: flask
    command: uwsgi --http-socket 0.0.0.0:5000 --wsgi-file app.py --callable app
    labels:
      - "traefik.enable=true"
      - "traefik.backend=flask"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE}"
  traefik:
    image: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - ./traefik/acme:/etc/traefik/acme
    ports:
     - "80:80"
     - "443:443"
     - "8080:8080"&lt;/pre&gt;
&lt;p&gt;Traefik requires access to the docker socket to listen for changes in the
backends. It can thus automatically discover when you start and stop
containers. You can ovverride default behaviour by using labels in your
container.&lt;/p&gt;
&lt;p&gt;Supposing you own the myhost.example.com domain and have access to ports 80 and 443
(you can setup port forwarding if you run that on your machine behind a
router at home), you can run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git clone https://github.com/beenje/flask_traefik_letsencrypt.git
$ cd flask_traefik_letsencrypt
$ export TRAEFIK_FRONTEND_RULE=Host:myhost.example.com
$ docker-compose up&lt;/pre&gt;
&lt;p&gt;Voilà! Our flask app is available over HTTPS with a real SSL certificate!&lt;/p&gt;
&lt;img alt="/images/flask_traefik/hello_world.png" src="http://beenje.github.io/blog/images/flask_traefik/hello_world.png"&gt;
&lt;p&gt;Traefik discovered the flask docker container and requested a certificate for our domain.
All that automatically!&lt;/p&gt;
&lt;p&gt;Traefik even comes with a nice dashboard:&lt;/p&gt;
&lt;img alt="/images/flask_traefik/traefik_dashboard.png" src="http://beenje.github.io/blog/images/flask_traefik/traefik_dashboard.png"&gt;
&lt;p&gt;With this simple configuration, &lt;a class="reference external" href="https://www.ssllabs.com/index.html"&gt;Qualys SSL Labs&lt;/a&gt;
gave me an A rating :-)&lt;/p&gt;
&lt;img alt="/images/flask_traefik/traefik_ssl_report.png" src="http://beenje.github.io/blog/images/flask_traefik/traefik_ssl_report.png"&gt;
&lt;p&gt;Not as good as the A+ for Miguel's site, but not that bad!
Especially considering there isn't any specific SSL setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-more-realistic-deployment"&gt;
&lt;h2&gt;A more realistic deployment&lt;/h2&gt;
&lt;p&gt;As I already mentioned, traefik is made to automatically discover backends (docker containers in my case).
So you usually run it by itself.&lt;/p&gt;
&lt;p&gt;Here is an example how it can be deployed using &lt;a class="reference external" href="http://docs.ansible.com/ansible/"&gt;Ansible&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;---
- name: create traefik directories
  file:
    path: /etc/traefik/acme
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create traefik.toml
  template:
    src: traefik.toml.j2
    dest: /etc/traefik/traefik.toml
    owner: root
    group: root
    mode: 0644
  notify:
    - restart traefik

- name: create traefik network
  docker_network:
    name: "{{traefik_network}}"
    state: present

- name: launch traefik container with letsencrypt support
  docker_container:
    name: traefik_proxy
    image: "traefik:{{traefik_version}}"
    state: started
    restart_policy: always
    ports:
      - "80:80"
      - "443:443"
      - "{{traefik_dashboard_port}}:8080"
    volumes:
      - /etc/traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - /etc/traefik/acme:/etc/traefik/acme:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # purge networks so that the container is only part of
    # {{traefik_network}} (and not the default bridge network)
    purge_networks: yes
    networks:
      - name: "{{traefik_network}}"

- name: force all notified handlers to run
  meta: flush_handlers&lt;/pre&gt;
&lt;p&gt;Nothing strange here. It's quite similar to what we had in our docker-compose.yml file.
We created a specific &lt;cite&gt;traefik_network&lt;/cite&gt;. Our docker containers will have to be on that same network.&lt;/p&gt;
&lt;p&gt;Here is how we could deploy a flask application on the same server using another ansible role:&lt;/p&gt;
&lt;pre class="literal-block"&gt;- name: launch flask container
  docker_container:
    name: flask
    image: flask
    command: uwsgi --http-socket 0.0.0.0:5000 --wsgi-file app.py --callable app
    state: started
    restart_policy: always
    purge_networks: yes
    networks:
      - name: "{{traefik_network}}"
    labels:
      traefik.enable: "true"
      traefik.backend: "flask"
      traefik.frontend.rule: "Host:myhost.example.com"
      traefik.port: "5000"&lt;/pre&gt;
&lt;p&gt;We make sure the container is on the same network as the traefik proxy.
Note that the &lt;cite&gt;traefik.port&lt;/cite&gt; label is only required if the container exposes multiple ports.
It's thus not needed in our example.&lt;/p&gt;
&lt;p&gt;That's basically it. As you can see, &lt;a class="reference external" href="https://www.docker.com"&gt;docker&lt;/a&gt; and &lt;a class="reference external" href="http://docs.ansible.com/ansible/"&gt;Ansible&lt;/a&gt; make the deployment easy.
And &lt;a class="reference external" href="https://traefik.io"&gt;traefik&lt;/a&gt; takes care of the Let's Encrypt certificate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Traefik comes with many other features and is well &lt;a class="reference external" href="https://docs.traefik.io"&gt;documented&lt;/a&gt;.
You should check &lt;a class="reference external" href="https://docs.traefik.io/#docker"&gt;this Docker example&lt;/a&gt; that demonstrates load-balancing.
Really cool.&lt;/p&gt;
&lt;p&gt;If you use &lt;a class="reference external" href="https://www.docker.com"&gt;docker&lt;/a&gt;, you should really give &lt;a class="reference external" href="https://traefik.io"&gt;traefik&lt;/a&gt; a try!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>flask</category><category>https</category><category>python</category><category>traefik</category><guid>http://beenje.github.io/blog/posts/running-your-application-over-https-with-traefik/</guid><pubDate>Thu, 08 Jun 2017 19:49:46 GMT</pubDate></item><item><title>Running background tasks with Flask and RQ</title><link>http://beenje.github.io/blog/posts/running-background-tasks-with-flask-and-rq/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I wrote several webapps but it took me a while to understand how to run a
long task and get the result back (without blocking the server).
Of course, you should use a task queue like &lt;a class="reference external" href="http://www.celeryproject.org"&gt;Celery&lt;/a&gt; or &lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt;.
It's easy to find examples how to send a task to a queue and... forget
about it. But how do you get the result?&lt;/p&gt;
&lt;p&gt;I found a great blog post from Miguel Grinberg:
&lt;a class="reference external" href="http://blog.miguelgrinberg.com/post/using-celery-with-flask"&gt;Using Celery With Flask&lt;/a&gt;.
It explains how to use ajax to poll the server for status updates.
And I finally got it!
As Miguel's post already detailed &lt;a class="reference external" href="http://www.celeryproject.org"&gt;Celery&lt;/a&gt;, I wanted to investigate
&lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; (Redis Queue), a simple library to queue job.&lt;/p&gt;
&lt;p&gt;As a side note, Miguel's blog is really great. I learned Flask following the &lt;a class="reference external" href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega-Tutorial&lt;/a&gt;.
If you are starting with Flask, I highly recommend it, as well as the
&lt;a class="reference external" href="http://flaskbook.com"&gt;Flask book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'll make a simple app with a form to run some actions.&lt;/p&gt;
&lt;div class="section" id="first-version-send-a-post-to-the-server-and-wait-for-the-response"&gt;
&lt;h2&gt;First version: send a post to the server and wait for the response&lt;/h2&gt;
&lt;p&gt;Let's start with some boilerplate code. This is gonna be a very
simple example, but I'll organize it like I use to for a real application
using &lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/blueprints/"&gt;Blueprints&lt;/a&gt;, an
&lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/patterns/appfactories/"&gt;application factory&lt;/a&gt;
and some extensions (&lt;a class="reference external" href="https://pythonhosted.org/Flask-Bootstrap/"&gt;Flask-Bootstrap&lt;/a&gt;, &lt;a class="reference external" href="https://flask-script.readthedocs.io/en/latest/"&gt;Flask-Script&lt;/a&gt; and &lt;a class="reference external" href="http://flask-wtf.readthedocs.io/en/latest/"&gt;Flask-WTF&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;├── Dockerfile
├── LICENSE
├── README.rst
├── app
│   ├── __init__.py
│   ├── extensions.py
│   ├── factory.py
│   ├── main
│   │   ├── __init__.py
│   │   ├── forms.py
│   │   └── views.py
│   ├── settings.py
│   ├── static
│   │   └── css
│   │       └── main.css
│   ├── tasks.py
│   └── templates
│       ├── base.html
│       └── index.html
├── docker-compose.yml
├── environment.yml
├── manage.py
└── uwsgi.py&lt;/pre&gt;
&lt;p&gt;I define all the used extensions in &lt;cite&gt;app/extensions.py&lt;/cite&gt;, my application factory in &lt;cite&gt;app/factory.py&lt;/cite&gt; and
my default settings in &lt;cite&gt;app/settings.py&lt;/cite&gt;. Nothing strange in there. You can refer to the
&lt;a class="reference external" href="https://github.com/beenje/flask-rq-example"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is our main &lt;cite&gt;app/main/views.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-14"&gt;&lt;/a&gt;            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Task failed: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-17"&gt;&lt;/a&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-18"&gt;&lt;/a&gt;            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-19"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main.index'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_814bf35fd3e04b01bbc9f8b6faa60cd3-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;As said previously, we create a form. On submit, we run the task and send the response back.&lt;/p&gt;
&lt;p&gt;The form is defined in &lt;cite&gt;app/main/forms.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_wtf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Form&lt;/span&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SelectField&lt;/span&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaskForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SelectField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-10"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_25cf17c402264b8e90caf22868491240-11"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TASKS'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In &lt;cite&gt;app/tasks.py&lt;/cite&gt;, we have our &lt;cite&gt;run&lt;/cite&gt; function to start a dummy task:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'error'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-9"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Short'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-11"&gt;&lt;/a&gt;        &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'MAX_TIME_TO_WAIT'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_23025bcbc1ec45faa9d47c60cfa92d36-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; performed in &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; second(s)'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In &lt;cite&gt;app/templates/base.html&lt;/cite&gt;, we define a fixed to top navbar and
a container to show flash messages and our main code. Note that we take advantage of
&lt;a class="reference external" href="https://pythonhosted.org/Flask-Bootstrap/"&gt;Flask-Bootstrap&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code html"&gt;&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-1"&gt;&lt;/a&gt;{%- extends "bootstrap/base.html" %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-2"&gt;&lt;/a&gt;{% import "bootstrap/utils.html" as utils %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-4"&gt;&lt;/a&gt;{% block head %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-6"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-7"&gt;&lt;/a&gt;  {{super()}}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-8"&gt;&lt;/a&gt;{% endblock %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-10"&gt;&lt;/a&gt;{% block styles %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-11"&gt;&lt;/a&gt;  {{super()}}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-12"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('static', filename='css/main.css') }}"&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-13"&gt;&lt;/a&gt;{% endblock %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-15"&gt;&lt;/a&gt;{% block title %}My App{% endblock %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-17"&gt;&lt;/a&gt;{% block navbar %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-18"&gt;&lt;/a&gt;  &lt;span class="c"&gt;&amp;lt;!-- Fixed navbar --&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-default navbar-fixed-top"&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-21"&gt;&lt;/a&gt;      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-22"&gt;&lt;/a&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggle"&lt;/span&gt; &lt;span class="na"&gt;data-toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;".navbar-collapse"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-23"&gt;&lt;/a&gt;          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sr-only"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-24"&gt;&lt;/a&gt;          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-25"&gt;&lt;/a&gt;          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-26"&gt;&lt;/a&gt;          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-27"&gt;&lt;/a&gt;        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-28"&gt;&lt;/a&gt;        &lt;span class="c"&gt;&amp;lt;!--img class="navbar-brand" src="../../static/logo.png"--&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-29"&gt;&lt;/a&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ url_for('main.index') }}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-30"&gt;&lt;/a&gt;      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-31"&gt;&lt;/a&gt;    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-32"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-33"&gt;&lt;/a&gt;{% endblock %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-35"&gt;&lt;/a&gt;{% block content %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-36"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mainContent"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-37"&gt;&lt;/a&gt;    {{utils.flashed_messages(container=False, dismissible=True)}}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-38"&gt;&lt;/a&gt;    {% block main %}{% endblock %}
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-39"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_ebfbdf600b284a8cb3cdf53c9736996e-40"&gt;&lt;/a&gt;{% endblock %}
&lt;/pre&gt;&lt;p&gt;The html code for our view is in &lt;cite&gt;app/templates/index.html&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code html"&gt;&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-1"&gt;&lt;/a&gt;{%- extends "base.html" %}
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-2"&gt;&lt;/a&gt;{% import "bootstrap/wtf.html" as wtf %}
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-4"&gt;&lt;/a&gt;{% block main %}
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-5"&gt;&lt;/a&gt;      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"panel panel-default"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-6"&gt;&lt;/a&gt;        &lt;span class="c"&gt;&amp;lt;!-- Default panel contents --&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-7"&gt;&lt;/a&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"panel-heading"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Select task to run&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-8"&gt;&lt;/a&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"panel-body"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-9"&gt;&lt;/a&gt;          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-10"&gt;&lt;/a&gt;            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"taskForm"&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-11"&gt;&lt;/a&gt;              {{ form.hidden_tag() }}
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-12"&gt;&lt;/a&gt;              {{ wtf.form_field(form.task) }}
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-13"&gt;&lt;/a&gt;              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-14"&gt;&lt;/a&gt;                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-default"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Run&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-15"&gt;&lt;/a&gt;              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-16"&gt;&lt;/a&gt;            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-17"&gt;&lt;/a&gt;          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-18"&gt;&lt;/a&gt;        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-19"&gt;&lt;/a&gt;      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4cee9692fdd5499687f1958ef3eacfc4-20"&gt;&lt;/a&gt;{% endblock %}
&lt;/pre&gt;&lt;p&gt;Let's run this first example. We could just create a virtual environment using &lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt;
or &lt;a class="reference external" href="http://conda.pydata.org/docs/intro.html"&gt;conda&lt;/a&gt;. As we'll soon need &lt;a class="reference external" href="http://redis.io"&gt;Redis&lt;/a&gt;, let's directly go for &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git clone https://github.com/beenje/flask-rq-example.git
$ cd flask-rq-example
$ git checkout faa61009dbe3bafe49aae473f0fa19ab05a3ab90
$ docker-compose build
$ docker-compose up&lt;/pre&gt;
&lt;p&gt;Go to &lt;a class="reference external" href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;. You should see the following window:&lt;/p&gt;
&lt;img alt="/images/flask-rq-example.png" src="http://beenje.github.io/blog/images/flask-rq-example.png"&gt;
&lt;p&gt;Choose a task and press run. See how The UI is stuck while waiting for the server?
Not very nice...
Let' improve that a little by using some JavaScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="second-version-use-ajax-to-submit-the-form"&gt;
&lt;h2&gt;Second version: use Ajax to submit the form&lt;/h2&gt;
&lt;p&gt;Let's write some javascript. Here is the &lt;cite&gt;app/static/js/main.js&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-1"&gt;&lt;/a&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// flash an alert&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// remove previous alerts by default&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-5"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// set clean to false to keep old alerts&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-6"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;"undefined"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-9"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;remove_alerts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-10"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-11"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div class="alert alert-'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' alert-dismissible" role="alert"&amp;gt;'&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-12"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;htmlString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;button type="button" class="close" data-dismiss="alert" aria-label="Close"&amp;gt;'&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-13"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;htmlString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;span aria-hidden="true"&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/div&amp;gt;'&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-14"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;prependTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#mainContent"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;slideDown&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-15"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-17"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;remove_alerts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-18"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".alert"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slideUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-19"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-21"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-23"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;// submit form&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-24"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#submit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-25"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Running "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#task"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-26"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-27"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$SCRIPT_ROOT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/_run_task"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-28"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#taskForm"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-29"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-30"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-31"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-32"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-33"&gt;&lt;/a&gt;      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-34"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorThrown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-35"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-36"&gt;&lt;/a&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-37"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-38"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-39"&gt;&lt;/a&gt;
&lt;a name="rest_code_fe35b6bfb4c74920b80234f10f5b80c5-40"&gt;&lt;/a&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;To include this file in our html, we add the following block to &lt;cite&gt;app/templates/base.html&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code html"&gt;&lt;a name="rest_code_35579a102b2048e3bea9d42c8d411d1c-1"&gt;&lt;/a&gt;{% block scripts %}
&lt;a name="rest_code_35579a102b2048e3bea9d42c8d411d1c-2"&gt;&lt;/a&gt;  {{super()}}
&lt;a name="rest_code_35579a102b2048e3bea9d42c8d411d1c-3"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_35579a102b2048e3bea9d42c8d411d1c-4"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;$SCRIPT_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;script_root&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nx"&gt;tojson&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nx"&gt;safe&lt;/span&gt; &lt;span class="p"&gt;}};&lt;/span&gt;
&lt;a name="rest_code_35579a102b2048e3bea9d42c8d411d1c-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_35579a102b2048e3bea9d42c8d411d1c-6"&gt;&lt;/a&gt;  {% block app_scripts %}{% endblock %}
&lt;a name="rest_code_35579a102b2048e3bea9d42c8d411d1c-7"&gt;&lt;/a&gt;{% endblock %}
&lt;/pre&gt;&lt;p&gt;And here is a diff for our &lt;cite&gt;app/templates/index.html&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-1"&gt;&lt;/a&gt;               {{ form.hidden_tag() }}
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-2"&gt;&lt;/a&gt;               {{ wtf.form_field(form.task) }}
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-3"&gt;&lt;/a&gt;               &amp;lt;div class="form-group"&amp;gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-4"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-                &amp;lt;button type="submit" class="btn btn-default" id="submit"&amp;gt;Run&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-5"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+                &amp;lt;button type="button" class="btn btn-default" id="submit"&amp;gt;Run&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-6"&gt;&lt;/a&gt;               &amp;lt;/div&amp;gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-7"&gt;&lt;/a&gt;             &amp;lt;/form&amp;gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-8"&gt;&lt;/a&gt;           &amp;lt;/div&amp;gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-9"&gt;&lt;/a&gt;         &amp;lt;/div&amp;gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-10"&gt;&lt;/a&gt;       &amp;lt;/div&amp;gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-11"&gt;&lt;/a&gt; {% endblock %}
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-12"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-13"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+{% block app_scripts %}&lt;/span&gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-14"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  &amp;lt;script src="{{ url_for('static', filename='js/main.js') }}"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_3451c86b70b142a3a5d7731907465f88-15"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+{% endblock %}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We change the &lt;cite&gt;button&lt;/cite&gt; type from &lt;cite&gt;submit&lt;/cite&gt; to &lt;cite&gt;button&lt;/cite&gt; so that it doesn't send a POST when clicked.
We send an Ajax query to &lt;cite&gt;$SCRIPT_ROOT/_run_task&lt;/cite&gt; instead.&lt;/p&gt;
&lt;p&gt;This is our new &lt;cite&gt;app/main/views.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/_run_task'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_task&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-14"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Task failed: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)}),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-18"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_12a4cf3625e941bdaef3601c633b3781-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let's run this new example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git checkout c1ccfe8b3a39079ab80f813b5733b324c8b65c6f
$ docker rm flaskrqexample_web
$ docker-compose up&lt;/pre&gt;
&lt;p&gt;This time we immediately get some feedback when clicking on &lt;em&gt;Run&lt;/em&gt;. There is no reload.
That's better, but the server is still busy during the processing. If you try to open a new page, you won't get any answer until the task is done...&lt;/p&gt;
&lt;p&gt;To avoid blocking the server, we'll use a task queue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="third-version-setup-rq"&gt;
&lt;h2&gt;Third version: setup RQ&lt;/h2&gt;
&lt;p&gt;As its name indicates, &lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; (Redis Queue) is backed by &lt;a class="reference external" href="http://redis.io"&gt;Redis&lt;/a&gt;.
It is designed to have a low barrier entry.
What do we need to integrate &lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; in our &lt;a class="reference external" href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; web app?&lt;/p&gt;
&lt;p&gt;Let's first add some variables in &lt;cite&gt;app/settings.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_17d2b636b4f84769b759176df4e95f83-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# The Redis database to use&lt;/span&gt;
&lt;a name="rest_code_17d2b636b4f84769b759176df4e95f83-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;REDIS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'redis://redis:6379/0'&lt;/span&gt;
&lt;a name="rest_code_17d2b636b4f84769b759176df4e95f83-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# The queues to listen on&lt;/span&gt;
&lt;a name="rest_code_17d2b636b4f84769b759176df4e95f83-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;QUEUES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;To execute a background job, we need a worker.
&lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; comes with the &lt;cite&gt;rq worker&lt;/cite&gt; command to start a worker. To integrate it
better with our Flask app, we are going to write a simple &lt;a class="reference external" href="https://flask-script.readthedocs.io/en/latest/"&gt;Flask-Script&lt;/a&gt;
command. We add the following to our &lt;cite&gt;manage.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt;
&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-3"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;
&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;runworker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;redis_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'REDIS_URL'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;redis_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'QUEUES'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_82f790c6b1ac4ac5b36b02e34a834edf-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The Manager runs the command inside a Flask test context, meaning we can
access the app config from within the worker.
This is nice because both our web application and
workers (and thus the jobs run on the worker) have access to the same
configuration variables. No separate config file. No discrepancy.
Everything is in &lt;cite&gt;app/settings.py&lt;/cite&gt; and can be overwritten by &lt;em&gt;LOCAL_SETTINGS&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To put a job in a Queue, you just create a &lt;em&gt;RQ Queue&lt;/em&gt; and enqueue it.
One way to do that is to pass the connection when creating the &lt;em&gt;Queue&lt;/em&gt;. This is a bit tedious.
&lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; has the notion of &lt;a class="reference external" href="http://python-rq.org/docs/connections/"&gt;connection context&lt;/a&gt;. We take advantage of that
and register a function to push the connection and pop it before and after a request (&lt;cite&gt;app/main/views.py&lt;/cite&gt;):&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;push_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pop_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_redis_connection&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;redis_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'_redis_connection'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;redis_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'REDIS_URL'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;redis_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_redis_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-14"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;before_request&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-15"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push_rq_connection&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;push_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_redis_connection&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-19"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;teardown_request&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-20"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop_rq_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_26b76a023e624578aebdf276ad122fbf-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pop_connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This makes it easy to create a &lt;em&gt;Queue&lt;/em&gt; in a request or application context.&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;get_redis_connection&lt;/cite&gt; function gets the Redis connection and stores it in the &lt;em&gt;flask.g&lt;/em&gt; object.
This is the same as what is explained for SQLite &lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/patterns/sqlite3/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With that in place, it's easy to enqueue a job. Here are the changes to the &lt;em&gt;run_task&lt;/em&gt; function:&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-1"&gt;&lt;/a&gt; @bp.route('/_run_task', methods=['POST'])
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-2"&gt;&lt;/a&gt; def run_task():
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-3"&gt;&lt;/a&gt;     task = request.form.get('task')
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-4"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-    try:&lt;/span&gt;
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-5"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-        result = tasks.run(task)&lt;/span&gt;
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-6"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-    except Exception as e:&lt;/span&gt;
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-7"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-        return jsonify({'message': 'Task failed: {}'.format(e)}), 500&lt;/span&gt;
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-8"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-    return jsonify({'result': result})&lt;/span&gt;
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-9"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    q = Queue()&lt;/span&gt;
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-10"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    job = q.enqueue(tasks.run, task)&lt;/span&gt;
&lt;a name="rest_code_03fbf6f498dd423fbc6acfa418d23372-11"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    return jsonify({'job_id': job.get_id()})&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We enqeue our task and just return the job id for now.&lt;/p&gt;
&lt;p&gt;Docker and &lt;cite&gt;docker-compose&lt;/cite&gt; are now gonna come in handy to start eveything
(Redis, our web app and a worker). We just have to add the following to our
&lt;cite&gt;docker-compose.yml&lt;/cite&gt; file:&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-1"&gt;&lt;/a&gt; - "5000:5000"
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-2"&gt;&lt;/a&gt; volumes:
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-3"&gt;&lt;/a&gt; - .:/app
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-4"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    depends_on:&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-5"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    - redis&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-6"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  worker:&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-7"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    image: flaskrqexample&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-8"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    container_name: flaskrqexample_worker&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-9"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    environment:&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-10"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+      LOCAL_SETTINGS: /app/settings.cfg&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-11"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    command: python manage.py runworker&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-12"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    volumes:&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-13"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    - .:/app&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-14"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    depends_on:&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-15"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    - redis&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-16"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  redis:&lt;/span&gt;
&lt;a name="rest_code_c276cf49ad8b411390eaca85f0138699-17"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+    image: redis:3.2&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Don't forget to add &lt;em&gt;redis&lt;/em&gt; and &lt;em&gt;rq&lt;/em&gt; to your &lt;cite&gt;environment.yml&lt;/cite&gt; file!&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_5862bbdb1bcc4de2ac99a94aaaf7d4cd-1"&gt;&lt;/a&gt;   - dominate==2.2.1
&lt;a name="rest_code_5862bbdb1bcc4de2ac99a94aaaf7d4cd-2"&gt;&lt;/a&gt;   - flask-bootstrap==3.3.6.0
&lt;a name="rest_code_5862bbdb1bcc4de2ac99a94aaaf7d4cd-3"&gt;&lt;/a&gt;   - flask-script==2.0.5
&lt;a name="rest_code_5862bbdb1bcc4de2ac99a94aaaf7d4cd-4"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  - redis==2.10.5&lt;/span&gt;
&lt;a name="rest_code_5862bbdb1bcc4de2ac99a94aaaf7d4cd-5"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+  - rq==0.6.0&lt;/span&gt;
&lt;a name="rest_code_5862bbdb1bcc4de2ac99a94aaaf7d4cd-6"&gt;&lt;/a&gt;   - visitor==0.1.3
&lt;/pre&gt;&lt;p&gt;Rebuild the docker image and start the app:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git checkout 437e710df3df0dd4b153f20027f5f00270b2e1a3
$ docker rm flaskrqexample_web
$ docker-compose build
$ docker-compose up&lt;/pre&gt;
&lt;p&gt;OK, nice, we started a job in the background! This is fine to run a task
and forget about it (like sending an e-mail). But how do we get the result back?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fourth-version-poll-job-status-and-get-the-result"&gt;
&lt;h2&gt;Fourth version: poll job status and get the result&lt;/h2&gt;
&lt;p&gt;This is the part I have been missing for some time. But, as often, it's not difficult when you have seen it.
When launching the job, we return an url to check the status of the job.
The trick is to periodically call back the same function until the job is finished or failed.&lt;/p&gt;
&lt;p&gt;On the server side, the &lt;cite&gt;job_status&lt;/cite&gt; endpoint uses the job_id to retrieve
the job and to get its status and result.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/status/&amp;lt;job_id&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;job_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-6"&gt;&lt;/a&gt;        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'unknown'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-9"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-10"&gt;&lt;/a&gt;            &lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-11"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-12"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_failed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-17"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@bp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/_run_task'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-18"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_task&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_66e8a7e554e949b5ba2b7ab65648ff47-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({}),&lt;/span&gt; &lt;span class="mi"&gt;202&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Location'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main.job_status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_id&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The &lt;cite&gt;run_task&lt;/cite&gt; function returns an empty response with the &lt;a class="reference external" href="https://httpstatuses.com/202"&gt;202&lt;/a&gt; status
code. We use the &lt;em&gt;Location&lt;/em&gt; response-header field to pass the &lt;cite&gt;job_status&lt;/cite&gt; URL to the
client.&lt;/p&gt;
&lt;p&gt;On the client side, we retrieve the URL from the header and call the new
&lt;cite&gt;check_job_status&lt;/cite&gt; function.&lt;/p&gt;
&lt;pre class="code diff"&gt;&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-1"&gt;&lt;/a&gt;&lt;span class="gu"&gt;@@ -28,8 +53,11 @@ $(document).ready(function() {&lt;/span&gt;
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-2"&gt;&lt;/a&gt;       data: $("#taskForm").serialize(),
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-3"&gt;&lt;/a&gt;       method: "POST",
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-4"&gt;&lt;/a&gt;       dataType: "json",
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-5"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-      success: function(data) {&lt;/span&gt;
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-6"&gt;&lt;/a&gt;&lt;span class="gd"&gt;-        flash_alert("Job " + data.job_id + " started...", "info", false);&lt;/span&gt;
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-7"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+      success: function(data, status, request) {&lt;/span&gt;
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-8"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+        $("#submit").attr("disabled", "disabled");&lt;/span&gt;
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-9"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+        flash_alert("Running " + task + "...", "info");&lt;/span&gt;
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-10"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+        var status_url = request.getResponseHeader('Location');&lt;/span&gt;
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-11"&gt;&lt;/a&gt;&lt;span class="gi"&gt;+        check_job_status(status_url);&lt;/span&gt;
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-12"&gt;&lt;/a&gt;       },
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-13"&gt;&lt;/a&gt;       error: function(jqXHR, textStatus, errorThrown) {
&lt;a name="rest_code_d9904a1324a14c18b7dd51644c31f434-14"&gt;&lt;/a&gt;         flash_alert("Failed to start " + task, "danger");
&lt;/pre&gt;&lt;p&gt;We use &lt;cite&gt;setTimeout&lt;/cite&gt; to call back the same function until the job is done (finished
or failed).&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;check_job_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-2"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-3"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-5"&gt;&lt;/a&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"unknown"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-6"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Unknown job id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-7"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#submit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"disabled"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-8"&gt;&lt;/a&gt;          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-9"&gt;&lt;/a&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"finished"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-10"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-11"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#submit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"disabled"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-12"&gt;&lt;/a&gt;          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-13"&gt;&lt;/a&gt;      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"failed"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-14"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;flash_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Job failed: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-15"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#submit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"disabled"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-16"&gt;&lt;/a&gt;          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-17"&gt;&lt;/a&gt;      &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-18"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;// queued/started/deferred&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-19"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-20"&gt;&lt;/a&gt;          &lt;span class="nx"&gt;check_job_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-21"&gt;&lt;/a&gt;        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-22"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-23"&gt;&lt;/a&gt;  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_ff75efa9f55147ccb6a3794f2171524c-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let's checkout this commit and run our app again:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git checkout da8360aefb222afc17417a518ac25029566071d6
$ docker rm flaskrqexample_web
$ docker rm flaskrqexample_worker
$ docker-compose up&lt;/pre&gt;
&lt;p&gt;Try submitting some tasks. This time you can open another window and the
server will answer even when a task is running :-)
You can open a console in your browser to see the polling and the response
from the &lt;cite&gt;job_status&lt;/cite&gt; function.
Note that we only have one worker, so if you start a second task, it will be enqueued
and run only when the first one is done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using &lt;a class="reference external" href="http://python-rq.org"&gt;RQ&lt;/a&gt; with &lt;a class="reference external" href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; isn't that difficult. So no need to block the server to
get the result of a long task.
There are a few more things to say, but this post starts to be a bit long,
so I'll keep that for another time.&lt;/p&gt;
&lt;p&gt;Thanks again to &lt;a class="reference external" href="http://blog.miguelgrinberg.com/"&gt;Miguel Grinberg&lt;/a&gt;
and all his posts about Flask!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>ajax</category><category>flask</category><category>python</category><category>redis</category><category>rq</category><guid>http://beenje.github.io/blog/posts/running-background-tasks-with-flask-and-rq/</guid><pubDate>Sat, 20 Aug 2016 21:32:16 GMT</pubDate></item><item><title>uWSGI, send_file and Python 3.5</title><link>http://beenje.github.io/blog/posts/uwsgi-send_file-and-python35/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have a Flask app that returns an in-memory bytes buffer (&lt;a class="reference external" href="https://docs.python.org/3/library/io.html#io.BytesIO"&gt;io.Bytesio&lt;/a&gt;) using Flask &lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/api/#flask.send_file"&gt;send_file&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;The app is deployed using &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; behind Nginx.
This was working fine with Python 3.4.&lt;/p&gt;
&lt;p&gt;When I updated Python to 3.5, I got the following exception when trying to download a file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;io.UnsupportedOperation: fileno

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1817, in wsgi_app
    response = self.full_dispatch_request()
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1477, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1381, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1475, in full_dispatch_request
    rv = self.dispatch_request()
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/app.py", line 1461, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask_login.py", line 758, in decorated_view
    return func(*args, **kwargs)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask_security/decorators.py", line 194, in decorated_view
    return fn(*args, **kwargs)
  File "/webapps/bowser/bowser/app/bext/views.py", line 116, in download
    as_attachment=True)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/flask/helpers.py", line 523, in send_file
    data = wrap_file(request.environ, file)
  File "/webapps/bowser/miniconda3/envs/bowser/lib/python3.5/site-packages/werkzeug/wsgi.py", line 726, in wrap_file
    return environ.get('wsgi.file_wrapper', FileWrapper)(file, buffer_size)
SystemError: &amp;lt;built-in function uwsgi_sendfile&amp;gt; returned a result with an error set&lt;/pre&gt;
&lt;p&gt;I quickly found the following &lt;a class="reference external" href="http://lists.unbit.it/pipermail/uwsgi/2015-September/008186.html"&gt;post&lt;/a&gt; with the same exception, but no answer...
A little more googling brought me to this github issue: &lt;a class="reference external" href="https://github.com/unbit/uwsgi/issues/1126"&gt;In python3, uwsgi fails to respond a
stream from BytesIO object&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As described, you should run uwsgi with the &lt;cite&gt;--wsgi-disable-file-wrapper&lt;/cite&gt; flag to avoid this problem.
As with all command line options, you can add the following entry in your
uwsgi.ini file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;wsgi-disable-file-wrapper = true&lt;/pre&gt;
&lt;p&gt;Note that &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; 2.0.12 is required.&lt;/p&gt;
&lt;p&gt;When searching in &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt; documentation, I only found one match in &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.io/en/latest/Changelog-2.0.12.html?highlight=wsgi-disable-file-wrapper"&gt;uWSGI 2.0.12 release notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A problem/option that should be better documented. Probably a pull request to open :-)&lt;/p&gt;
&lt;p&gt;UPDATE (2016-07-13): pull request &lt;a class="reference external" href="https://github.com/unbit/uwsgi-docs/pull/317"&gt;merged&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>flask</category><category>python</category><category>uwsgi</category><guid>http://beenje.github.io/blog/posts/uwsgi-send_file-and-python35/</guid><pubDate>Tue, 05 Jul 2016 18:39:29 GMT</pubDate></item></channel></rss>