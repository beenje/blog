<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Tchut-Tchut Blog (Posts about tkinter)</title><link>http://beenje.github.io/blog/</link><description></description><atom:link href="http://beenje.github.io/blog/categories/tkinter.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 31 Mar 2018 18:53:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Logging to a Tkinter ScrolledText Widget</title><link>http://beenje.github.io/blog/posts/logging-to-a-tkinter-scrolledtext-widget/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been programming in Python for almost 10 years.
I did many CLI tools, some web applications (mainly using &lt;a class="reference external" href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt;),
but I had never built a GUI.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://riverbankcomputing.com/software/pyqt/intro"&gt;PyQt&lt;/a&gt; seems to be one of the most popular framework. I had a look at it but I was not hooked.
It looks like you really need to embrace the Qt world. You shouldn't try to use
&lt;a class="reference external" href="https://docs.python.org/3/library/threading.html#threading.Thread"&gt;Python Thread&lt;/a&gt; but use QtThread instead.
Need &lt;a class="reference external" href="http://pyserial.readthedocs.io/en/latest/"&gt;pySerial&lt;/a&gt;? Wait there is QtSerial. I guess this can be a pro or con
depending on your background.&lt;/p&gt;
&lt;p&gt;I looked more in &lt;a class="reference external" href="https://docs.python.org/3.6/library/tkinter.html"&gt;tkinter&lt;/a&gt;. I must say that in my mind it was a bit old and wasn't looking very modern.
I didn't know that &lt;a class="reference external" href="http://www.tkdocs.com"&gt;Tk 8.5&lt;/a&gt; came with an entirely new themed widget set to address the dated appearance.
The &lt;a class="reference external" href="http://www.tkdocs.com/tutorial/index.html"&gt;official tutorial&lt;/a&gt; is quite nice and comes with code examples in different languages (including Python).&lt;/p&gt;
&lt;p&gt;The GUI I needed to write wasn't very advanced.
I wanted to have a kind of console where to display log messages.&lt;/p&gt;
&lt;div class="section" id="texthandler"&gt;
&lt;h2&gt;TextHandler&lt;/h2&gt;
&lt;p&gt;I quickly found an &lt;a class="reference external" href="https://gist.github.com/moshekaplan/c425f861de7bbf28ef06"&gt;example&lt;/a&gt; on
&lt;a class="reference external" href="https://stackoverflow.com/questions/13318742/python-logging-to-tkinter-text-widget"&gt;StackOverflow&lt;/a&gt;
to send Python logging to a tkinter Text widget:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class TextHandler(logging.Handler):
    """This class allows you to log to a Tkinter Text or ScrolledText widget"""

    def __init__(self, text):
        # run the regular Handler __init__
        logging.Handler.__init__(self)
        # Store a reference to the Text it will log to
        self.text = text

    def emit(self, record):
        msg = self.format(record)

        def append():
            self.text.configure(state='normal')
            self.text.insert(tk.END, msg + '\n')
            self.text.configure(state='disabled')
            # Autoscroll to the bottom
            self.text.yview(tk.END)
        # This is necessary because we can't modify the Text from other threads
        self.text.after(0, append)
&lt;/pre&gt;
&lt;p&gt;This looks nice but doesn't work if you try to send a log message from another thread
(despite the comment)...
because we are passing the text widget with the logging handler to the other thread.
And you can only write to a tkinter widget from the main thread.&lt;/p&gt;
&lt;p&gt;This is explained in &lt;a class="reference external" href="https://stackoverflow.com/questions/43909849/tkinter-python-crashes-on-new-thread-trying-to-log-on-main-thread"&gt;another StackOverflow question&lt;/a&gt;
but I didn't like the proposed solution.
If you implement specific methods as explained (&lt;cite&gt;put_line_to_queue&lt;/cite&gt;), you lose the advantage of just calling the log function from different parts of the program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="queuehandler"&gt;
&lt;h2&gt;QueueHandler&lt;/h2&gt;
&lt;p&gt;Using a &lt;a class="reference external" href="https://docs.python.org/3/library/queue.html"&gt;Queue&lt;/a&gt; is indeed the way to share data between threads.
So I implemented a simple QueueHandler:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class QueueHandler(logging.Handler):
    """Class to send logging records to a queue

    It can be used from different threads
    """

    def __init__(self, log_queue):
        super().__init__()
        self.log_queue = log_queue

    def emit(self, record):
        self.log_queue.put(record)
&lt;/pre&gt;
&lt;p&gt;The handler only puts the message in a queue.
I created a &lt;cite&gt;ConsoleUi&lt;/cite&gt; class to poll the messages from the queue and display them in a scrolled
text widget:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
logger = logging.getLogger(__name__)


class ConsoleUi:
    """Poll messages from a logging queue and display them in a scrolled text widget"""

    def __init__(self, frame):
        self.frame = frame
        # Create a ScrolledText wdiget
        self.scrolled_text = ScrolledText(frame, state='disabled', height=12)
        self.scrolled_text.grid(row=0, column=0, sticky=(N, S, W, E))
        self.scrolled_text.configure(font='TkFixedFont')
        self.scrolled_text.tag_config('INFO', foreground='black')
        self.scrolled_text.tag_config('DEBUG', foreground='gray')
        self.scrolled_text.tag_config('WARNING', foreground='orange')
        self.scrolled_text.tag_config('ERROR', foreground='red')
        self.scrolled_text.tag_config('CRITICAL', foreground='red', underline=1)
        # Create a logging handler using a queue
        self.log_queue = queue.Queue()
        self.queue_handler = QueueHandler(self.log_queue)
        formatter = logging.Formatter('%(asctime)s: %(message)s')
        self.queue_handler.setFormatter(formatter)
        logger.addHandler(self.queue_handler)
        # Start polling messages from the queue
        self.frame.after(100, self.poll_log_queue)

    def display(self, record):
        msg = self.queue_handler.format(record)
        self.scrolled_text.configure(state='normal')
        self.scrolled_text.insert(tk.END, msg + '\n', record.levelname)
        self.scrolled_text.configure(state='disabled')
        # Autoscroll to the bottom
        self.scrolled_text.yview(tk.END)

    def poll_log_queue(self):
        # Check every 100ms if there is a new message in the queue to display
        while True:
            try:
                record = self.log_queue.get(block=False)
            except queue.Empty:
                break
            else:
                self.display(record)
        self.frame.after(100, self.poll_log_queue)
&lt;/pre&gt;
&lt;p&gt;I can safely use the logger from different threads because only a queue is passed with the handler, no tkinter widget.&lt;/p&gt;
&lt;p&gt;To demonstrate that, I created a separate thread to display the time every seconds:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Clock(threading.Thread):
    """Class to display the time every seconds

    Every 5 seconds, the time is displayed using the logging.ERROR level
    to show that different colors are associated to the log levels
    """

    def __init__(self):
        super().__init__()
        self._stop_event = threading.Event()

    def run(self):
        logger.debug('Clock started')
        previous = -1
        while not self._stop_event.is_set():
            now = datetime.datetime.now()
        while not self._stop_event.is_set():
            now = datetime.datetime.now()
            if previous != now.second:
                previous = now.second
                if now.second % 5 == 0:
                    level = logging.ERROR
                else:
                    level = logging.INFO
                logger.log(level, now)
            time.sleep(0.2)

    def stop(self):
        self._stop_event.set()
&lt;/pre&gt;
&lt;p&gt;The full code is available on &lt;a class="reference external" href="https://github.com/beenje/tkinter-logging-text-widget"&gt;github&lt;/a&gt;.
If you checkout the version v0.1.0 and run it, you'll see something like that:&lt;/p&gt;
&lt;img alt="/images/tkinter/logging_handler.png" src="http://beenje.github.io/blog/images/tkinter/logging_handler.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="pane-layout"&gt;
&lt;h2&gt;3-pane layout&lt;/h2&gt;
&lt;p&gt;The &lt;cite&gt;ConsoleUi&lt;/cite&gt; class takes a frame as argument. It makes it easy to
integrate in another layout. Let's see an example with a &lt;a class="reference external" href="http://www.tkdocs.com/tutorial/complex.html#panedwindow"&gt;Paned Window
widget&lt;/a&gt; to
implement the common 3-pane layout.&lt;/p&gt;
&lt;p&gt;Let's first create two new classes. The first one will be used to display
a simple form to send a message via logging. The user can select the
desired logging level:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class FormUi:

    def __init__(self, frame):
        self.frame = frame
        # Create a combobbox to select the logging level
        values = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
        self.level = tk.StringVar()
        ttk.Label(self.frame, text='Level:').grid(column=0, row=0, sticky=W)
        self.combobox = ttk.Combobox(
            self.frame,
            textvariable=self.level,
            width=25,
            state='readonly',
            values=values
        )
        self.combobox.current(0)
        self.combobox.grid(column=1, row=0, sticky=(W, E))
        # Create a text field to enter a message
        self.message = tk.StringVar()
        ttk.Label(self.frame, text='Message:').grid(column=0, row=1, sticky=W)
        ttk.Entry(self.frame, textvariable=self.message, width=25).grid(column=1, row=1, sticky=(W, E))
        # Add a button to log the message
        self.button = ttk.Button(self.frame, text='Submit', command=self.submit_message)
        self.button.grid(column=1, row=2, sticky=W)

    def submit_message(self):
        # Get the logging level numeric value
        lvl = getattr(logging, self.level.get())
        logger.log(lvl, self.message.get())
&lt;/pre&gt;
&lt;p&gt;The other class is a dummy one to show the 3-pane layout:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ThirdUi:

    def __init__(self, frame):
        self.frame = frame
        ttk.Label(self.frame, text='This is just an example of a third frame').grid(column=0, row=1, sticky=W)
        ttk.Label(self.frame, text='With another line here!').grid(column=0, row=4, sticky=W)
&lt;/pre&gt;
&lt;p&gt;With those new classes, the only change required is in the &lt;cite&gt;App&lt;/cite&gt; class to
create a vertical and horizontal &lt;cite&gt;ttk.PanedWindow&lt;/cite&gt;.
The horizontal pane is splitted in two frames (the form and console):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 class App:

     def __init__(self, root):
@@ -109,11 +148,24 @@ class App:
         root.title('Logging Handler')
         root.columnconfigure(0, weight=1)
         root.rowconfigure(0, weight=1)
-        console_frame = ttk.Frame(root)
-        console_frame.grid(column=0, row=0, sticky=(N, W, E, S))
+        # Create the panes and frames
+        vertical_pane = ttk.PanedWindow(self.root, orient=VERTICAL)
+        vertical_pane.grid(row=0, column=0, sticky="nsew")
+        horizontal_pane = ttk.PanedWindow(vertical_pane, orient=HORIZONTAL)
+        vertical_pane.add(horizontal_pane)
+        form_frame = ttk.Labelframe(horizontal_pane, text="MyForm")
+        form_frame.columnconfigure(1, weight=1)
+        horizontal_pane.add(form_frame, weight=1)
+        console_frame = ttk.Labelframe(horizontal_pane, text="Console")
         console_frame.columnconfigure(0, weight=1)
         console_frame.rowconfigure(0, weight=1)
+        horizontal_pane.add(console_frame, weight=1)
+        third_frame = ttk.Labelframe(vertical_pane, text="Third Frame")
+        vertical_pane.add(third_frame, weight=1)
+        # Initialize all frames
+        self.form = FormUi(form_frame)
         self.console = ConsoleUi(console_frame)
+        self.third = ThirdUi(third_frame)
         self.clock = Clock()
         self.clock.start()
         self.root.protocol('WM_DELETE_WINDOW', self.quit)
&lt;/pre&gt;
&lt;p&gt;Note that the &lt;cite&gt;Clock&lt;/cite&gt; and &lt;cite&gt;ConsoleUi&lt;/cite&gt; classes were left untouched.
We just pass a &lt;cite&gt;ttk.LabelFrame&lt;/cite&gt; instead of a &lt;cite&gt;ttk.Frame&lt;/cite&gt; to the &lt;cite&gt;ConsoleUi&lt;/cite&gt;
class.&lt;/p&gt;
&lt;p&gt;This looks more like what could be a real application:&lt;/p&gt;
&lt;img alt="/images/tkinter/paned_window.png" src="http://beenje.github.io/blog/images/tkinter/paned_window.png"&gt;
&lt;p&gt;The main window and the different panes can be resized nicely:&lt;/p&gt;
&lt;img alt="/images/tkinter/paned_window_resized.png" src="http://beenje.github.io/blog/images/tkinter/paned_window_resized.png"&gt;
&lt;p&gt;As already mentioned, the full example is available on &lt;a class="reference external" href="https://github.com/beenje/tkinter-logging-text-widget"&gt;github&lt;/a&gt;.
You can checkout the version v0.2.0 to see the 3-pane layout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I want to give some credit to &lt;a class="reference external" href="https://docs.python.org/3.6/library/tkinter.html"&gt;tkinter&lt;/a&gt;. It doesn't have a steep learning curve and allows to easily create some nice GUI.
You can continue using what you know in Python (Queue, Threads, modules like &lt;a class="reference external" href="http://pyserial.readthedocs.io/en/latest/"&gt;pySerial&lt;/a&gt;).
I can only recomment it if you are familiar with Python and want to create a simple GUI.
That being said, I'll probably try to dive more in &lt;a class="reference external" href="https://riverbankcomputing.com/software/pyqt/intro"&gt;PyQt&lt;/a&gt; when I have more time.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>gui</category><category>python</category><category>tkinter</category><guid>http://beenje.github.io/blog/posts/logging-to-a-tkinter-scrolledtext-widget/</guid><pubDate>Thu, 28 Dec 2017 20:31:25 GMT</pubDate></item></channel></rss>