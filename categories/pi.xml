<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tchut-Tchut Blog (pi)</title><link>http://beenje.github.io/blog/</link><description></description><atom:link href="http://beenje.github.io/blog/categories/pi.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 31 May 2017 21:44:50 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>My LEGO Macintosh Classic with Raspberry Pi and e-paper display</title><link>http://beenje.github.io/blog/posts/my-lego-macintosh-classic-with-raspberry-pi-and-e-paper-display/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;Beginning of April I read an inspiring blog post from Jannis Hermanns
about a &lt;a class="reference external" href="https://jann.is/lego-macintosh-classic/"&gt;LEGO Machintosh Classic with e-paper display&lt;/a&gt;.  It was a really nice and cool article.&lt;/p&gt;
&lt;p&gt;I've been playing with some Raspberry Pis before but only with
&lt;a class="reference external" href="http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible"&gt;software&lt;/a&gt;.
I have been willing to fiddle with hardware for some time.
This was the perfect opportunity!&lt;/p&gt;
&lt;div class="section" id="lego-digital-designer"&gt;
&lt;h2&gt;LEGO Digital Designer&lt;/h2&gt;
&lt;p&gt;I decided to try to make my own LEGO Macintosh based on Jannis work.
His blog post is quite detailed with even a list of links with all the
required components.&lt;/p&gt;
&lt;p&gt;But I quickly realized there were no LEGO building instructions...
I thus created my own using LEGO Digital Designer, which was fun.
Looking at the pictures on &lt;a class="reference external" href="https://www.flickr.com/photos/_-_/33583084842"&gt;Jannis flickr album&lt;/a&gt;
helped a lot. But having an exact idea of the screen size wasn't easy on
the computer. So I also built a small prototype of the front part to get a
better idea. For that I had to wait for my e-paper display.&lt;/p&gt;
&lt;p&gt;One modification I wanted to do was to use 1U width lego on the side of
the display to require less drilling.
I also wanted to check if it was possible to use the button located on top
of the display.&lt;/p&gt;
&lt;p&gt;My .lxf file is on &lt;a class="reference external" href="https://github.com/beenje/legomac/tree/master/ldd"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/legomac_ldd.png"&gt;&lt;img alt="/images/legomac/legomac_ldd.thumbnail.png" src="http://beenje.github.io/blog/images/legomac/legomac_ldd.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="e-paper-display"&gt;
&lt;h2&gt;E-paper display&lt;/h2&gt;
&lt;p&gt;When I was about to order the &lt;a class="reference external" href="http://www.embeddedartists.com/products/displays/lcd_27_epaper.php"&gt;2.7 inch e-paper display from Embedded Artists&lt;/a&gt;, I
noticed that Embedded Artists was located in Malm√∂, where I live :-).&lt;/p&gt;
&lt;p&gt;I e-mailed them and I was granted to pick up my order at their office!
A big thanks to them!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspbery-pi-zero-w"&gt;
&lt;h2&gt;Raspbery Pi Zero W&lt;/h2&gt;
&lt;p&gt;The Raspberry Pi Zero W comes with Wifi which is really nice.
It does not come with the soldered GPIO header. I was starting to look at
existing soldering iron when I discovered this &lt;a class="reference external" href="https://shop.pimoroni.com/products/gpio-hammer-header"&gt;GPIO Hammer Header&lt;/a&gt;:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/gpio_hammer_header.jpg"&gt;&lt;img alt="/images/legomac/gpio_hammer_header.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/gpio_hammer_header.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;No soldering required!
I used the installation jig and it was really easy to install.
There is a nice &lt;a class="reference external" href="https://youtu.be/VDJ2-feg2lk"&gt;video&lt;/a&gt; that explains how
to proceed:&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/VDJ2-feg2lk?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="connecting-the-display-to-the-pi"&gt;
&lt;h2&gt;Connecting the display to the Pi&lt;/h2&gt;
&lt;p&gt;Based on Jannis article I initially thought it wasn't possible to use a ribbon
cable (due to space), so I ordered some Jumper Wires.
I connected the display to the Pi using the serial expansion
connector as described in his blog post.
It worked. With the &lt;a class="reference external" href="https://github.com/embeddedartists/gratis"&gt;demo from embeddedartists&lt;/a&gt;, I managed to display a nice cat picture :-)&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/jumper_wires.jpg"&gt;&lt;img alt="/images/legomac/jumper_wires.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/jumper_wires.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/cat.jpg"&gt;&lt;img alt="/images/legomac/cat.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/cat.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;I then realized that the serial expansion connector didn't give access to
the button on top of the display. That button could allow some
interactions, like changing mode, which would be nice.
According to my prototype with 1U width lego on the side, using a ribbon cable shouldn't actually be
an issue. So I ordered a &lt;a class="reference external" href="https://thepihut.com/products/downgrade-gpio-ribbon-cable-for-raspberry-pi-40p-to-26p"&gt;Downgrade GPIO Ribbon Cable for Raspberry Pi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It required a little drilling on the right side for the cable to fit. But
not that much. More is needed on the left side to center the screen.
Carried away by my enthusiasm, I actually cut a bit too much on the left side
(using the dremel was fun :-).&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/drilling_left.jpg"&gt;&lt;img alt="/images/legomac/drilling_left.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/drilling_left.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/drilling_right.jpg"&gt;&lt;img alt="/images/legomac/drilling_right.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/drilling_right.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Everything fitted nicely in the lego case:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/ribbon_cable.jpg"&gt;&lt;img alt="/images/legomac/ribbon_cable.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/ribbon_cable.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="button-on-top"&gt;
&lt;h2&gt;Button on top&lt;/h2&gt;
&lt;p&gt;With the ribbon cable, the button on top of the display is connected to pin
15 on the Raspberry Pi (BCM GPIO22).
The &lt;cite&gt;ImageDemoButton.py&lt;/cite&gt; part of the &lt;a class="reference external" href="https://github.com/embeddedartists/gratis"&gt;demo&lt;/a&gt;
shows an example how to use the button to change the image displayed.&lt;/p&gt;
&lt;p&gt;Using my small prototype, I planned a small hole on top of the case. I thought I'd have to fill
the brick with something hard to press the button. The 1x1 brick ended fitting perfectly.
As shown on the picture below, the side is exactly on top of the button.
I added a little piece of foam inside the brick to keep it straight.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/button_front.jpg"&gt;&lt;img alt="/images/legomac/button_front.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/button_front.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Of course I move away from the Macintosh Classic design here...
but &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;practicality beats purity&lt;/a&gt; :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pi-configuration"&gt;
&lt;h2&gt;Pi configuration&lt;/h2&gt;
&lt;p&gt;Jannis article made me discover &lt;a class="reference external" href="https://resin.io"&gt;resin.io&lt;/a&gt;,
which is a really interesting project. I did a few tests on a Raspberry Pi 3 and it was a nice experience.
But when I received my Pi Zero W, it wasn't supported by resinOS yet... This isn't the case anymore!
Version 2.0.3 added support for the wifi chip.&lt;/p&gt;
&lt;p&gt;Anyway, as Jannis already wrote about resinOS, I'll describe my tests with Raspbian.
To flash the SD card, I recommend &lt;a class="reference external" href="https://etcher.io"&gt;Etcher&lt;/a&gt; which is an open source project by the same resin.io.
I'm more a command line guy and I have used &lt;cite&gt;dd&lt;/cite&gt; many times. But I was pleasantly surprised.
It's easy to install and use.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download and install &lt;a class="reference external" href="https://etcher.io"&gt;Etcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download &lt;a class="reference external" href="https://www.raspberrypi.org/downloads/raspbian/"&gt;Raspbian Jessie Lite image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flash the SD card using Etcher&lt;/li&gt;
&lt;li&gt;Mount the SD card to configure it:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
# Go to the boot partition
# This is an example on OSX (mount point will be different on Linux)
$ cd /Volumes/boot

# To enable ssh, create a file named ssh onto the boot partition
$ touch ssh

# Create the file wpa_supplicant.conf with your wifi settings
$  cat &amp;lt;&amp;lt; EOF &amp;gt; wpa_supplicant.conf
network={
    ssid="MyWifiNetwork"
    psk="password"
    key_mgmt=WPA-PSK
}
EOF

# Uncomment dtparam=spi=on to enable the SPI master driver
$ vi config.txt

# Leave the boot partition
$ cd
&lt;/pre&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Unmount the SD card and put it in the Raspberry Pi&lt;/li&gt;
&lt;li&gt;Boot the Pi&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wrote a small Ansible playbook to install the E-ink driver and the clock demo:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install required dependencies
  apt:
    name: "{{item}}"
    state: present
    update_cache: yes
  with_items:
    - git
    - libfuse-dev
    - fonts-liberation
    - python-pil

- name: check if the epd-fuse service exists
  command: systemctl status epd-fuse.service
  check_mode: no
  failed_when: False
  changed_when: False
  register: epd_fuse_service

- name: clone the embeddedartists gratis repository
  git:
    repo: https://github.com/embeddedartists/gratis.git
    dest: /home/pi/gratis

- name: build the EPD driver and install the epd-fuse service
  shell: &amp;gt;
    COG_VERSION=V2 make rpi-epd_fuse &amp;amp;&amp;amp;
    COG_VERSION=V2 make rpi-install
  args:
    chdir: /home/pi/gratis/PlatformWithOS
  when: epd_fuse_service.rc != 0

- name: ensure the epd-fuse service is enabled and started
  service:
    name: epd-fuse
    state: started
    enabled: yes

- name: install the epd-clock service
  copy:
    src: epd-clock.service
    dest: /etc/systemd/system/epd-clock.service
    owner: root
    group: root
    mode: 0644

- name: start and enable epd-clock service
  systemd:
    name: epd-clock.service
    daemon_reload: yes
    state: started
    enabled: yes
&lt;/pre&gt;
&lt;p&gt;To run the playbook, clone the repository &lt;a class="reference external" href="https://github.com/beenje/legomac"&gt;https://github.com/beenje/legomac&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://github.com/beenje/legomac.git
$ cd legomac
$ ansible-playbook -i hosts -k playbook.yml
&lt;/pre&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;p&gt;Of course don't forget to change the default password on your Pi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-more-thing"&gt;
&lt;h2&gt;One more thing&lt;/h2&gt;
&lt;p&gt;There isn't much Python in this article but the Pi is running some
Python code.
I couldn't resist putting a &lt;a class="reference external" href="https://talkpython.fm"&gt;Talk Python To Me&lt;/a&gt;
sticker on the back :-)
It's really a great podcast and you should definitevely give it a try if
you haven't yet.
Thanks again to @mkennedy for the stickers!&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://beenje.github.io/blog/images/legomac/talkpythontome.jpg"&gt;&lt;img alt="/images/legomac/talkpythontome.thumbnail.jpg" src="http://beenje.github.io/blog/images/legomac/talkpythontome.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Below are a few pictures. You can see more on &lt;a class="reference external" href="https://flic.kr/s/aHskVAadfo"&gt;flickr&lt;/a&gt;.&lt;/p&gt;

&lt;div id="slides_03b42f43ff5f47da95e9f7bfd77d73a4" class="carousel slide"&gt;
    &lt;ol class="carousel-indicators"&gt;
            &lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="0" class="active"&gt;
            &lt;/li&gt;&lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="1"&gt;
            &lt;/li&gt;&lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="2"&gt;
            &lt;/li&gt;&lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="3"&gt;
            &lt;/li&gt;&lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="4"&gt;
            &lt;/li&gt;&lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="5"&gt;
            &lt;/li&gt;&lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="6"&gt;
            &lt;/li&gt;&lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="7"&gt;
            &lt;/li&gt;&lt;li data-target="#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide-to="8"&gt;
    &lt;/li&gt;&lt;/ol&gt;
    &lt;div class="carousel-inner"&gt;
                &lt;div class="item active"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/legomac.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
                &lt;div class="item"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/legomac_front_close.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
                &lt;div class="item"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/talkpythontome.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
                &lt;div class="item"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/drilling_left.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
                &lt;div class="item"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/drilling_right.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
                &lt;div class="item"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/ribbon_cable.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
                &lt;div class="item"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/display_front.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
                &lt;div class="item"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/button_front.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
                &lt;div class="item"&gt;&lt;img src="http://beenje.github.io/blog/images/legomac/button_top.jpg" alt="" style="margin: 0 auto 0 auto;"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;a class="left carousel-control" href="http://beenje.github.io/blog/posts/my-lego-macintosh-classic-with-raspberry-pi-and-e-paper-display/#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide="prev"&gt;&lt;span class="icon-prev"&gt;&lt;/span&gt;&lt;/a&gt;
    &lt;a class="right carousel-control" href="http://beenje.github.io/blog/posts/my-lego-macintosh-classic-with-raspberry-pi-and-e-paper-display/#slides_03b42f43ff5f47da95e9f7bfd77d73a4" data-slide="next"&gt;&lt;span class="icon-next"&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="section" id="next"&gt;
&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;I didn't build this LEGO Macintosh to use it as a simple clock :-)
I have a few ideas. I'll start with a small web server so that I can receive and display messages.
That will be the subject of another blog post!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>lego</category><category>Mac</category><category>pi</category><category>python</category><guid>http://beenje.github.io/blog/posts/my-lego-macintosh-classic-with-raspberry-pi-and-e-paper-display/</guid><pubDate>Tue, 23 May 2017 20:39:12 GMT</pubDate></item><item><title>OpenVPN source based routing</title><link>http://beenje.github.io/blog/posts/openvpn-source-based-routing/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I already spoke about installing OpenVPN on a Raspberry Pi in another blog
&lt;a class="reference external" href="http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I only connect to this VPN server to access content that requires a french IP address.
I use OpenVPN Connect App on my iPad and &lt;a class="reference external" href="https://tunnelblick.net"&gt;Tunnelblick&lt;/a&gt;
on my mac.
It works nicely but how to use this VPN on my Apple TV 4?
There is no VPN client available...&lt;/p&gt;
&lt;p&gt;End of last year I finally received my &lt;a class="reference external" href="https://omnia.turris.cz/en/"&gt;Turris Omnia&lt;/a&gt; that I supported on Indiegogo.
It's a nice router running a free operating system based on
OpenWrt with automatic updates.
If you haven't heard about it, you should check it out.&lt;/p&gt;
&lt;div class="section" id="configuring-openvpn-client-on-openwrt"&gt;
&lt;h2&gt;Configuring OpenVPN client on OpenWrt&lt;/h2&gt;
&lt;p&gt;Installing an OpenVPN client on OpenWrt is not very difficult.
Here is a quick summary.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install &lt;cite&gt;openvpn-openssl&lt;/cite&gt; package (via the
webinterface or the command line)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I already have a custom client config that I generated with Ansible in
this &lt;a class="reference external" href="http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible"&gt;post&lt;/a&gt;.
To use this config, create the file &lt;cite&gt;/etc/config/openvpn&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/config/openvpn
package openvpn

config openvpn myvpn
        # Set to 1 to enable this instance:
        option enabled 1
        # Include OpenVPN configuration
        option config /etc/openvpn/myclientconfig.ovpn
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a new interface in &lt;cite&gt;/etc/config/network&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
config interface 'myvpn'
       option proto 'none'
       option ifname 'tun0'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a new zone to &lt;cite&gt;/etc/config/firewall&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
config zone
        option forward 'REJECT'
        option output 'ACCEPT'
        option name 'VPN_FW'
        option input 'REJECT'
        option masq '1'
        option network 'myvpn'
        option mtu_fix '1'

config forwarding
        option dest 'VPN_FW'
        option src 'lan'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;An easy way to configure DNS servers is to add fixed DNS for the WAN interface of the router.
To use Google DNS, add the following two lines to the wan interface in &lt;cite&gt;/etc/config/network&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# diff -u network.save network
@@ -20,6 +20,8 @@
 config interface 'wan'
         option ifname 'eth1'
         option proto 'dhcp'
+        option peerdns '0'
+        option dns '8.8.8.8 8.8.4.4'
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you run &lt;cite&gt;/etc/init.d/openvpn start&lt;/cite&gt; with this config, you should connect successfully!
All the traffic will go via the VPN. That's nice but it's not what I want.
I only want my Apple TV traffic to go via the VPN. How to achieve that?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="source-based-routing"&gt;
&lt;h2&gt;Source based routing&lt;/h2&gt;
&lt;p&gt;I quickly found this &lt;a class="reference external" href="https://wiki.openwrt.org/doc/networking/routing"&gt;wiki page&lt;/a&gt; to implement source
based routing. Exactly what I want. What took me some time to realize is
that before to do that I had to ignore the routes pushed by the server.&lt;/p&gt;
&lt;p&gt;With my configuration, when the client connects, the server pushes some
routes among which a default route that makes all the traffic go via the
VPN:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         10.8.0.21       128.0.0.0       UG    0      0        0 tun0
...
&lt;/pre&gt;
&lt;p&gt;Ignoring the routes pushed by the server can be done with the &lt;cite&gt;--route-noexec&lt;/cite&gt; option.
I tried to add &lt;cite&gt;option route_noexec 1&lt;/cite&gt; to my &lt;cite&gt;/etc/config/openvpn&lt;/cite&gt; file
but it had no effect. It looks like that when using a custom config, you
can't add other options there. You have to set everything in the custom
config. I added &lt;cite&gt;route-noexec&lt;/cite&gt; to  my &lt;cite&gt;/etc/openvpn/myclientconfig.ovpn&lt;/cite&gt; file and it worked!
No more route added. No traffic sent via the VPN.&lt;/p&gt;
&lt;p&gt;We can now apply the changes described in the &lt;a class="reference external" href="https://wiki.openwrt.org/doc/networking/routing"&gt;Routing wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the &lt;cite&gt;ip&lt;/cite&gt; package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the &lt;cite&gt;10 vpn&lt;/cite&gt; line to &lt;cite&gt;/etc/iproute2/rt_tables&lt;/cite&gt; so that it looks like
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/iproute2/rt_tables
#
# reserved values
#
255  local
254  main
253  default
10   vpn
0    unspec
#
# local
#
#1  inr.ruhep
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We now need to add a new rule and route when starting the client.
We can do so using the openvpn &lt;cite&gt;up&lt;/cite&gt; command. Create the &lt;cite&gt;/etc/openvpn/upvpn&lt;/cite&gt; script:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/openvpn/upvpn
#!/bin/sh

client=192.168.75.20

tun_dev=$1
tun_mtu=$2
link_mtu=$3
ifconfig_local_ip=$4
ifconfig_remote_ip=$5

echo "Routing client $client traffic through VPN"
ip rule add from $client priority 10 table vpn
ip route add $client dev $tun_dev table vpn
ip route add default via $ifconfig_remote_ip dev $tun_dev table vpn
ip route flush cache
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create the &lt;cite&gt;/etc/openvpn/downvpn&lt;/cite&gt; script to properly remove the rule and route:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/openvpn/downvpn
#!/bin/sh

client=192.168.75.20

tun_dev=$1
tun_mtu=$2
link_mtu=$3
ifconfig_local_ip=$4
ifconfig_remote_ip=$5

echo "Delete client $client traffic routing through VPN"
ip rule del from $client priority 10 table vpn
ip route del $client dev $tun_dev table vpn
ip route del default via $ifconfig_remote_ip dev $tun_dev table vpn
ip route flush cache
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We now have to add those scripts to the client config.
Here is everything I added to my &lt;cite&gt;/etc/openvpn/myclientconfig.ovpn&lt;/cite&gt; file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Don't add or remove routes automatically
# Source based routing for specific client added in up script
route-noexec
# script-security 2 needed to run up and down scripts
script-security 2
# Script to run after successful TUN/TAP device open
up /etc/openvpn/upvpn
# Call down script before to close TUN to properly remove the routing
down-pre
down /etc/openvpn/downvpn
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice that the machine IP address that we want to route via the VPN is
hard-coded in the the upvpn and downvpn scripts.
This IP shall be fixed. You can easily do that by associating it to
the required MAC address in the DHCP settings.&lt;/p&gt;
&lt;p&gt;The tunnel remote IP is automatically passed in parameter to the up and
down scripts by openvpn.&lt;/p&gt;
&lt;p&gt;If we run &lt;cite&gt;/etc/init.d/openvpn start&lt;/cite&gt; with this config, only the traffic
from the 192.168.75.20 IP address will go via the VPN!&lt;/p&gt;
&lt;p&gt;Run &lt;cite&gt;/etc/init.d/openvpn stop&lt;/cite&gt; to close the tunnel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a nice way to route traffic through a VPN based on the source IP
address.&lt;/p&gt;
&lt;p&gt;You can of course use the router webinterface to stop and start openvpn.
In &lt;a class="reference external" href="http://beenje.github.io/blog/posts/home-assistant-on-turris-omnia-via-lxc-container"&gt;another post&lt;/a&gt;,
I'll talk about an even more user friendly way to control it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>AppleTV</category><category>OpenWrt</category><category>pi</category><category>VPN</category><guid>http://beenje.github.io/blog/posts/openvpn-source-based-routing/</guid><pubDate>Fri, 20 Jan 2017 20:46:16 GMT</pubDate></item><item><title>Installing OpenVPN on a Raspberry Pi with Ansible</title><link>http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have to confess that I initially decided to install a VPN,
not to secure my connection when using a free Wireless Acces Point in an
airport or hotel, but to watch Netflix :-)&lt;/p&gt;
&lt;p&gt;I had a VPS in France where I installed sniproxy to access Netflix.
Not that I find the french catalogue so great, but as a French guy living
in Sweden, it was a good way for my kids to watch some french programs.
But Netflix started to block VPS providers...&lt;/p&gt;
&lt;p&gt;I have a brother in France who has a Fiber Optic Internet access.
That was a good opportunity to setup a private VPN and I bought him a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;There are many resources on the web about &lt;a class="reference external" href="https://openvpn.net/index.php/open-source/documentation/howto.html"&gt;OpenVPN&lt;/a&gt;.
A paper worth mentioning is: &lt;a class="reference external" href="https://www.sans.org/reading-room/whitepapers/networkdevs/soho-remote-access-vpn-easy-pie-raspberry-pi-34427"&gt;SOHO Remote Access VPN. Easy as Pie, Raspberry Pi...&lt;/a&gt;
It's from end of 2013 and describes Esay-RSA 2.0 (that used to be installed with
OpenVPN), but it's still an interesting read.&lt;/p&gt;
&lt;p&gt;Anyway, most resources describe all the commands to run.
I don't really like installing softwares by running a bunch of commands. Propably due
to my professional experience, I like things to be reproducible.
That's why I love to automate things. I wrote a lot of shell scripts over
the years. About two years ago, I discovered &lt;a class="reference external" href="http://docs.ansible.com/ansible/index.html"&gt;Ansible&lt;/a&gt; and it quickly became my
favorite tool to deploy software.&lt;/p&gt;
&lt;p&gt;So let's write a small Ansible playbook to install OpenVPN on a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;First the firewall configuration. I like to use &lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;ufw&lt;/a&gt; which is quite easy to
setup:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install dependencies
  apt: name=ufw state=present update_cache=yes cache_valid_time=3600

- name: update ufw default forward policy
  lineinfile: dest=/etc/default/ufw regexp=^DEFAULT_FORWARD_POLICY line=DEFAULT_FORWARD_POLICY="ACCEPT"
  notify: reload ufw

- name: enable ufw ip forward
  lineinfile: dest=/etc/ufw/sysctl.conf regexp=^net/ipv4/ip_forward line=net/ipv4/ip_forward=1
  notify: reload ufw

- name: add NAT rules to ufw
  blockinfile:
    dest: /etc/ufw/before.rules
    insertbefore: BOF
    block: |
      # Nat table
      *nat
      :POSTROUTING ACCEPT [0:0]

      # Nat rules
      -F
      -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j SNAT --to-source {{ansible_eth0.ipv4.address}}

      # don't delete the 'COMMIT' line or these nat rules won't be processed
      COMMIT
  notify: reload ufw

- name: allow ssh
  ufw: rule=limit port=ssh proto=tcp

- name: allow openvpn
  ufw: rule=allow port={{openvpn_port}} proto={{openvpn_protocol}}

- name: enable ufw
  ufw: logging=on state=enabled
&lt;/pre&gt;
&lt;p&gt;This enables IP forwarding, adds the required NAT rules and allows ssh and
openvpn.&lt;/p&gt;
&lt;p&gt;The rest of the playbook installs OpenVPN and generates all the keys automatically,
except the Diffie-Hellman one that should be generated locally.
This is just because it takes for ever on the Pi :-)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install openvpn
  apt: name=openvpn state=present

- name: create /etc/openvpn
  file: path=/etc/openvpn state=directory mode=0755 owner=root group=root

- name: create /etc/openvpn/keys
  file: path=/etc/openvpn/keys state=directory mode=0700 owner=root group=root

- name: create clientside and serverside directories
  file: path="{{item}}" state=directory mode=0755
  with_items:
      - "{{clientside}}/keys"
      - "{{serverside}}"
  become: true
  become_user: "{{user}}"

- name: create openvpn base client.conf
  template: src=client.conf.j2 dest={{clientside}}/client.conf owner=root group=root mode=0644

- name: download EasyRSA
  get_url: url={{easyrsa_url}} dest=/home/{{user}}/openvpn
  become: true
  become_user: "{{user}}"

- name: create scripts
  template: src={{item}}.j2 dest=/home/{{user}}/openvpn/{{item}} owner=root group=root mode=0755
  with_items:
    - create_serverside
    - create_clientside
  tags: client

- name: run serverside script
  command: ./create_serverside
  args:
    chdir: /home/{{user}}/openvpn
    creates: "{{easyrsa_server}}/ta.key"
  become: true
  become_user: "{{user}}"

- name: run clientside script
  command: ./create_clientside {{item}}
  args:
    chdir: /home/{{user}}/openvpn
    creates: "{{clientside}}/files/{{item}}.ovpn"
  become: true
  become_user: "{{user}}"
  with_items: "{{openvpn_clients}}"
  tags: client

- name: install all server keys
  command: install -o root -g root -m 600 {{item.name}} /etc/openvpn/keys/
  args:
    chdir: "{{item.path}}"
    creates: /etc/openvpn/keys/{{item.name}}
  with_items:
    - { name: 'ca.crt', path: "{{easyrsa_server}}/pki" }
    - { name: '{{ansible_hostname}}.crt', path: "{{easyrsa_server}}/pki/issued" }
    - { name: '{{ansible_hostname}}.key', path: "{{easyrsa_server}}/pki/private" }
    - { name: 'ta.key', path: "{{easyrsa_server}}" }

- name: copy Diffie-Hellman key
  copy: src="{{openvpn_dh}}" dest=/etc/openvpn/keys/dh.pem owner=root group=root mode=0600

- name: create openvpn server.conf
  template: src=server.conf.j2 dest=/etc/openvpn/server.conf owner=root group=root mode=0644
  notify: restart openvpn

- name: start openvpn
  service: name=openvpn state=started
&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;create_clientside&lt;/em&gt; script generates all the required client keys and creates an ovpn file
that includes them.  It makes it very easy to install on any device: just one file to
drop.&lt;/p&gt;
&lt;p&gt;One thing I stumbled upon is the &lt;em&gt;ns-cert-type server&lt;/em&gt; option that I
initially used in the server configuration. This prevented the client to
connect. As explained &lt;a class="reference external" href="https://community.openvpn.net/openvpn/wiki/EasyRSA3-OpenVPN-Howto"&gt;here&lt;/a&gt;,
this option is a deprecated "Netscape" cert attribute. It's not enabled by
default with Easy-RSA 3.&lt;/p&gt;
&lt;p&gt;Fortunately, the mentioned &lt;a class="reference external" href="https://community.openvpn.net/openvpn/wiki/EasyRSA3-OpenVPN-Howto"&gt;howto&lt;/a&gt; and
the &lt;a class="reference external" href="https://github.com/OpenVPN/easy-rsa"&gt;Easy-RSA github&lt;/a&gt; page are good references
for Easy-RSA 3.&lt;/p&gt;
&lt;p&gt;One important thing to note is that I create all the keys with no password.
That's obviously not the most secure and recommended way.
Anyone accessing the CA could sign new requests. But it can be stored offline on an USB stick.
I actually think that for my use case it's not even worth keeping the CA.
Sure it means I can't easily add a new client or revoke a certificate.
But with the playbook, it's super easy to throw all the keys and regenerate everything.
That forces to replace all clients configuration but with 2 or 3
clients, this is not a problem.&lt;/p&gt;
&lt;p&gt;For sure don't leave all the generated keys on the Pi!
After copying the clients ovpn files, remove the /home/pi/openvpn
directory (save it somewhere safe if you want to add new clients or revoke
a certificate without regenerating everything).&lt;/p&gt;
&lt;p&gt;The full playbook can be found on &lt;a class="reference external" href="https://github.com/beenje/pi_openvpn"&gt;github&lt;/a&gt;.
The README includes some quick instructions.&lt;/p&gt;
&lt;p&gt;I now have a private VPN in France and one at home that I can use to
securely access my NAS from anywhere!&lt;/p&gt;&lt;/div&gt;</description><category>Ansible</category><category>pi</category><category>VPN</category><guid>http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible/</guid><pubDate>Mon, 18 Jul 2016 20:26:28 GMT</pubDate></item></channel></rss>