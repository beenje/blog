<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Tchut-Tchut Blog (pi)</title><link>http://beenje.github.io/blog/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://beenje.github.io/blog/categories/pi.xml"></atom:link><language>en</language><lastBuildDate>Thu, 26 Jan 2017 21:12:43 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>OpenVPN source based routing</title><link>http://beenje.github.io/blog/posts/openvpn-source-based-routing/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I already spoke about installing OpenVPN on a Raspberry Pi in another blog
&lt;a class="reference external" href="http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I only connect to this VPN server to access content that requires a french IP address.
I use OpenVPN Connect App on my iPad and &lt;a class="reference external" href="https://tunnelblick.net"&gt;Tunnelblick&lt;/a&gt;
on my mac.
It works nicely but how to use this VPN on my Apple TV 4?
There is no VPN client available...&lt;/p&gt;
&lt;p&gt;End of last year I finally received my &lt;a class="reference external" href="https://omnia.turris.cz/en/"&gt;Turris Omnia&lt;/a&gt; that I supported on Indiegogo.
It's a nice router running a free operating system based on
OpenWrt with automatic updates.
If you haven't heard about it, you should check it out.&lt;/p&gt;
&lt;div class="section" id="configuring-openvpn-client-on-openwrt"&gt;
&lt;h2&gt;Configuring OpenVPN client on OpenWrt&lt;/h2&gt;
&lt;p&gt;Installing an OpenVPN client on OpenWrt is not very difficult.
Here is a quick summary.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install &lt;cite&gt;openvpn-openssl&lt;/cite&gt; package (via the
webinterface or the command line)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I already have a custom client config that I generated with Ansible in
this &lt;a class="reference external" href="http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible"&gt;post&lt;/a&gt;.
To use this config, create the file &lt;cite&gt;/etc/config/openvpn&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/config/openvpn
package openvpn

config openvpn myvpn
        # Set to 1 to enable this instance:
        option enabled 1
        # Include OpenVPN configuration
        option config /etc/openvpn/myclientconfig.ovpn
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a new interface in &lt;cite&gt;/etc/config/network&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
config interface 'myvpn'
       option proto 'none'
       option ifname 'tun0'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a new zone to &lt;cite&gt;/etc/config/firewall&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
config zone
        option forward 'REJECT'
        option output 'ACCEPT'
        option name 'VPN_FW'
        option input 'REJECT'
        option masq '1'
        option network 'myvpn'
        option mtu_fix '1'

config forwarding
        option dest 'VPN_FW'
        option src 'lan'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;An easy way to configure DNS servers is to add fixed DNS for the WAN interface of the router.
To use Google DNS, add the following two lines to the wan interface in &lt;cite&gt;/etc/config/network&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# diff -u network.save network
@@ -20,6 +20,8 @@
 config interface 'wan'
         option ifname 'eth1'
         option proto 'dhcp'
+        option peerdns '0'
+        option dns '8.8.8.8 8.8.4.4'
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you run &lt;cite&gt;/etc/init.d/openvpn start&lt;/cite&gt; with this config, you should connect successfully!
All the traffic will go via the VPN. That's nice but it's not what I want.
I only want my Apple TV traffic to go via the VPN. How to achieve that?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="source-based-routing"&gt;
&lt;h2&gt;Source based routing&lt;/h2&gt;
&lt;p&gt;I quickly found this &lt;a class="reference external" href="https://wiki.openwrt.org/doc/networking/routing"&gt;wiki page&lt;/a&gt; to implement source
based routing. Exactly what I want. What took me some time to realize is
that before to do that I had to ignore the routes pushed by the server.&lt;/p&gt;
&lt;p&gt;With my configuration, when the client connects, the server pushes some
routes among which a default route that makes all the traffic go via the
VPN:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         10.8.0.21       128.0.0.0       UG    0      0        0 tun0
...
&lt;/pre&gt;
&lt;p&gt;Ignoring the routes pushed by the server can be done with the &lt;cite&gt;--route-noexec&lt;/cite&gt; option.
I tried to add &lt;cite&gt;option route_noexec 1&lt;/cite&gt; to my &lt;cite&gt;/etc/config/openvpn&lt;/cite&gt; file
but it had no effect. It looks like that when using a custom config, you
can't add other options there. You have to set everything in the custom
config. I added &lt;cite&gt;route-noexec&lt;/cite&gt; to  my &lt;cite&gt;/etc/openvpn/myclientconfig.ovpn&lt;/cite&gt; file and it worked!
No more route added. No traffic sent via the VPN.&lt;/p&gt;
&lt;p&gt;We can now apply the changes described in the &lt;a class="reference external" href="https://wiki.openwrt.org/doc/networking/routing"&gt;Routing wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the &lt;cite&gt;ip&lt;/cite&gt; package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the &lt;cite&gt;10 vpn&lt;/cite&gt; line to &lt;cite&gt;/etc/iproute2/rt_tables&lt;/cite&gt; so that it looks like
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/iproute2/rt_tables
#
# reserved values
#
255  local
254  main
253  default
10   vpn
0    unspec
#
# local
#
#1  inr.ruhep
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We now need to add a new rule and route when starting the client.
We can do so using the openvpn &lt;cite&gt;up&lt;/cite&gt; command. Create the &lt;cite&gt;/etc/openvpn/upvpn&lt;/cite&gt; script:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/openvpn/upvpn
#!/bin/sh

client=192.168.75.20

tun_dev=$1
tun_mtu=$2
link_mtu=$3
ifconfig_local_ip=$4
ifconfig_remote_ip=$5

echo "Routing client $client traffic through VPN"
ip rule add from $client priority 10 table vpn
ip route add $client dev $tun_dev table vpn
ip route add default via $ifconfig_remote_ip dev $tun_dev table vpn
ip route flush cache
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create the &lt;cite&gt;/etc/openvpn/downvpn&lt;/cite&gt; script to properly remove the rule and route:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# cat /etc/openvpn/downvpn
#!/bin/sh

client=192.168.75.20

tun_dev=$1
tun_mtu=$2
link_mtu=$3
ifconfig_local_ip=$4
ifconfig_remote_ip=$5

echo "Delete client $client traffic routing through VPN"
ip rule del from $client priority 10 table vpn
ip route del $client dev $tun_dev table vpn
ip route del default via $ifconfig_remote_ip dev $tun_dev table vpn
ip route flush cache
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We now have to add those scripts to the client config.
Here is everything I added to my &lt;cite&gt;/etc/openvpn/myclientconfig.ovpn&lt;/cite&gt; file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Don't add or remove routes automatically
# Source based routing for specific client added in up script
route-noexec
# script-security 2 needed to run up and down scripts
script-security 2
# Script to run after successful TUN/TAP device open
up /etc/openvpn/upvpn
# Call down script before to close TUN to properly remove the routing
down-pre
down /etc/openvpn/downvpn
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice that the machine IP address that we want to route via the VPN is
hard-coded in the the upvpn and downvpn scripts.
This IP shall be fixed. You can easily do that by associating it to
the required MAC address in the DHCP settings.&lt;/p&gt;
&lt;p&gt;The tunnel remote IP is automatically passed in parameter to the up and
down scripts by openvpn.&lt;/p&gt;
&lt;p&gt;If we run &lt;cite&gt;/etc/init.d/openvpn start&lt;/cite&gt; with this config, only the traffic
from the 192.168.75.20 IP address will go via the VPN!&lt;/p&gt;
&lt;p&gt;Run &lt;cite&gt;/etc/init.d/openvpn stop&lt;/cite&gt; to close the tunnel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a nice way to route traffic through a VPN based on the source IP
address.&lt;/p&gt;
&lt;p&gt;You can of course use the router webinterface to stop and start openvpn.
In &lt;a class="reference external" href="http://beenje.github.io/blog/posts/home-assistant-on-turris-omnia-via-lxc-container"&gt;another post&lt;/a&gt;,
I'll talk about an even more user friendly way to control it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>AppleTV</category><category>OpenWrt</category><category>pi</category><category>VPN</category><guid>http://beenje.github.io/blog/posts/openvpn-source-based-routing/</guid><pubDate>Fri, 20 Jan 2017 20:46:16 GMT</pubDate></item><item><title>Installing OpenVPN on a Raspberry Pi with Ansible</title><link>http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible/</link><dc:creator>Benjamin Bertrand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have to confess that I initially decided to install a VPN,
not to secure my connection when using a free Wireless Acces Point in an
airport or hotel, but to watch Netflix :-)&lt;/p&gt;
&lt;p&gt;I had a VPS in France where I installed sniproxy to access Netflix.
Not that I find the french catalogue so great, but as a French guy living
in Sweden, it was a good way for my kids to watch some french programs.
But Netflix started to block VPS providers...&lt;/p&gt;
&lt;p&gt;I have a brother in France who has a Fiber Optic Internet access.
That was a good opportunity to setup a private VPN and I bought him a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;There are many resources on the web about &lt;a class="reference external" href="https://openvpn.net/index.php/open-source/documentation/howto.html"&gt;OpenVPN&lt;/a&gt;.
A paper worth mentioning is: &lt;a class="reference external" href="https://www.sans.org/reading-room/whitepapers/networkdevs/soho-remote-access-vpn-easy-pie-raspberry-pi-34427"&gt;SOHO Remote Access VPN. Easy as Pie, Raspberry Pi...&lt;/a&gt;
It's from end of 2013 and describes Esay-RSA 2.0 (that used to be installed with
OpenVPN), but it's still an interesting read.&lt;/p&gt;
&lt;p&gt;Anyway, most resources describe all the commands to run.
I don't really like installing softwares by running a bunch of commands. Propably due
to my professional experience, I like things to be reproducible.
That's why I love to automate things. I wrote a lot of shell scripts over
the years. About two years ago, I discovered &lt;a class="reference external" href="http://docs.ansible.com/ansible/index.html"&gt;Ansible&lt;/a&gt; and it quickly became my
favorite tool to deploy software.&lt;/p&gt;
&lt;p&gt;So let's write a small Ansible playbook to install OpenVPN on a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;First the firewall configuration. I like to use &lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;ufw&lt;/a&gt; which is quite easy to
setup:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install dependencies
  apt: name=ufw state=present update_cache=yes cache_valid_time=3600

- name: update ufw default forward policy
  lineinfile: dest=/etc/default/ufw regexp=^DEFAULT_FORWARD_POLICY line=DEFAULT_FORWARD_POLICY="ACCEPT"
  notify: reload ufw

- name: enable ufw ip forward
  lineinfile: dest=/etc/ufw/sysctl.conf regexp=^net/ipv4/ip_forward line=net/ipv4/ip_forward=1
  notify: reload ufw

- name: add NAT rules to ufw
  blockinfile:
    dest: /etc/ufw/before.rules
    insertbefore: BOF
    block: |
      # Nat table
      *nat
      :POSTROUTING ACCEPT [0:0]

      # Nat rules
      -F
      -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j SNAT --to-source {{ansible_eth0.ipv4.address}}

      # don't delete the 'COMMIT' line or these nat rules won't be processed
      COMMIT
  notify: reload ufw

- name: allow ssh
  ufw: rule=limit port=ssh proto=tcp

- name: allow openvpn
  ufw: rule=allow port={{openvpn_port}} proto={{openvpn_protocol}}

- name: enable ufw
  ufw: logging=on state=enabled
&lt;/pre&gt;
&lt;p&gt;This enables IP forwarding, adds the required NAT rules and allows ssh and
openvpn.&lt;/p&gt;
&lt;p&gt;The rest of the playbook installs OpenVPN and generates all the keys automatically,
except the Diffie-Hellman one that should be generated locally.
This is just because it takes for ever on the Pi :-)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: install openvpn
  apt: name=openvpn state=present

- name: create /etc/openvpn
  file: path=/etc/openvpn state=directory mode=0755 owner=root group=root

- name: create /etc/openvpn/keys
  file: path=/etc/openvpn/keys state=directory mode=0700 owner=root group=root

- name: create clientside and serverside directories
  file: path="{{item}}" state=directory mode=0755
  with_items:
      - "{{clientside}}/keys"
      - "{{serverside}}"
  become: true
  become_user: "{{user}}"

- name: create openvpn base client.conf
  template: src=client.conf.j2 dest={{clientside}}/client.conf owner=root group=root mode=0644

- name: download EasyRSA
  get_url: url={{easyrsa_url}} dest=/home/{{user}}/openvpn
  become: true
  become_user: "{{user}}"

- name: create scripts
  template: src={{item}}.j2 dest=/home/{{user}}/openvpn/{{item}} owner=root group=root mode=0755
  with_items:
    - create_serverside
    - create_clientside
  tags: client

- name: run serverside script
  command: ./create_serverside
  args:
    chdir: /home/{{user}}/openvpn
    creates: "{{easyrsa_server}}/ta.key"
  become: true
  become_user: "{{user}}"

- name: run clientside script
  command: ./create_clientside {{item}}
  args:
    chdir: /home/{{user}}/openvpn
    creates: "{{clientside}}/files/{{item}}.ovpn"
  become: true
  become_user: "{{user}}"
  with_items: "{{openvpn_clients}}"
  tags: client

- name: install all server keys
  command: install -o root -g root -m 600 {{item.name}} /etc/openvpn/keys/
  args:
    chdir: "{{item.path}}"
    creates: /etc/openvpn/keys/{{item.name}}
  with_items:
    - { name: 'ca.crt', path: "{{easyrsa_server}}/pki" }
    - { name: '{{ansible_hostname}}.crt', path: "{{easyrsa_server}}/pki/issued" }
    - { name: '{{ansible_hostname}}.key', path: "{{easyrsa_server}}/pki/private" }
    - { name: 'ta.key', path: "{{easyrsa_server}}" }

- name: copy Diffie-Hellman key
  copy: src="{{openvpn_dh}}" dest=/etc/openvpn/keys/dh.pem owner=root group=root mode=0600

- name: create openvpn server.conf
  template: src=server.conf.j2 dest=/etc/openvpn/server.conf owner=root group=root mode=0644
  notify: restart openvpn

- name: start openvpn
  service: name=openvpn state=started
&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;create_clientside&lt;/em&gt; script generates all the required client keys and creates an ovpn file
that includes them.  It makes it very easy to install on any device: just one file to
drop.&lt;/p&gt;
&lt;p&gt;One thing I stumbled upon is the &lt;em&gt;ns-cert-type server&lt;/em&gt; option that I
initially used in the server configuration. This prevented the client to
connect. As explained &lt;a class="reference external" href="https://community.openvpn.net/openvpn/wiki/EasyRSA3-OpenVPN-Howto"&gt;here&lt;/a&gt;,
this option is a deprecated "Netscape" cert attribute. It's not enabled by
default with Easy-RSA 3.&lt;/p&gt;
&lt;p&gt;Fortunately, the mentioned &lt;a class="reference external" href="https://community.openvpn.net/openvpn/wiki/EasyRSA3-OpenVPN-Howto"&gt;howto&lt;/a&gt; and
the &lt;a class="reference external" href="https://github.com/OpenVPN/easy-rsa"&gt;Easy-RSA github&lt;/a&gt; page are good references
for Easy-RSA 3.&lt;/p&gt;
&lt;p&gt;One important thing to note is that I create all the keys with no password.
That's obviously not the most secure and recommended way.
Anyone accessing the CA could sign new requests. But it can be stored offline on an USB stick.
I actually think that for my use case it's not even worth keeping the CA.
Sure it means I can't easily add a new client or revoke a certificate.
But with the playbook, it's super easy to throw all the keys and regenerate everything.
That forces to replace all clients configuration but with 2 or 3
clients, this is not a problem.&lt;/p&gt;
&lt;p&gt;For sure don't leave all the generated keys on the Pi!
After copying the clients ovpn files, remove the /home/pi/openvpn
directory (save it somewhere safe if you want to add new clients or revoke
a certificate without regenerating everything).&lt;/p&gt;
&lt;p&gt;The full playbook can be found on &lt;a class="reference external" href="https://github.com/beenje/pi_openvpn"&gt;github&lt;/a&gt;.
The README includes some quick instructions.&lt;/p&gt;
&lt;p&gt;I now have a private VPN in France and one at home that I can use to
securely access my NAS from anywhere!&lt;/p&gt;&lt;/div&gt;</description><category>Ansible</category><category>pi</category><category>VPN</category><guid>http://beenje.github.io/blog/posts/installing-openvpn-on-a-raspberry-pi-with-ansible/</guid><pubDate>Mon, 18 Jul 2016 20:26:28 GMT</pubDate></item></channel></rss>